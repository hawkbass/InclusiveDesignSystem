"use client"

import type React from "react"

import { useEffect, useRef, useState } from "react"
import {
  Calendar,
  Users,
  Search,
  Bell,
  BellDot,
  Settings,
  Filter,
  Download,
  MoreVertical,
  ChevronDown,
  CheckCircle2,
  CheckSquare,
  Square,
  ArrowRight,
  TrendingUp,
  AreaChart,
  BarChart2,
  BarChart3,
  LineChart,
  Activity,
  User,
  Shield,
  Zap,
  MessageSquare,
  Video,
  GitBranch,
  RefreshCw,
  Briefcase,
  Eye,
  Mail,
  Target,
  Phone
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { StatusBadge, CandidateStatus } from "@/components/ui/status-badge"
import { MetricChart } from "@/components/ui/metric-chart"
import { AnimatedElement } from "./animations"

export function DashboardPreviewDark() {
  const [activeTab, setActiveTab] = useState("dashboard")

  const [isVisible, setIsVisible] = useState(false)
  const dashboardRef = useRef<HTMLDivElement>(null)
  const [hoverPoint, setHoverPoint] = useState<number | null>(null)
  
  // Enhanced state for new functionality
  const [chartType, setChartType] = useState<"line" | "area" | "bar">("area")
  const [timePeriod, setTimePeriod] = useState("12M")
  const [notifications, setNotifications] = useState([
    { id: 1, type: "interview", message: "Interview with Alex Morgan in 30 min", time: "2 min ago", urgent: true },
    { id: 2, type: "application", message: "5 new applications received", time: "15 min ago", urgent: false },
    { id: 3, type: "goal", message: "Monthly hiring goal 85% complete", time: "1 hour ago", urgent: false }
  ])
  const [showNotifications, setShowNotifications] = useState(false)
  const [selectedCandidates, setSelectedCandidates] = useState<Set<string>>(new Set())
  const [tableFilter, setTableFilter] = useState("all")


  // Functional state for Candidates tab
  const [candidateStageFilter, setCandidateStageFilter] = useState("all")

  const [candidateSearchTerm, setCandidateSearchTerm] = useState("")
  const [selectedCandidateIds, setSelectedCandidateIds] = useState<Set<string>>(new Set())
  const [showFilterDropdown, setShowFilterDropdown] = useState(false)
  const [showAddCandidateModal, setShowAddCandidateModal] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const candidatesPerPage = 5

  // Modal states for enhanced button functionality
  const [showCandidateModal, setShowCandidateModal] = useState(false)
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [showScheduleModal, setShowScheduleModal] = useState(false)
  const [showMoreActionsModal, setShowMoreActionsModal] = useState(false)
  const [selectedCandidate, setSelectedCandidate] = useState<any>(null)

  // Jobs tab state management
  const [showCreateJobModal, setShowCreateJobModal] = useState(false)
  const [showJobDetailsModal, setShowJobDetailsModal] = useState(false)
  const [showEditJobModal, setShowEditJobModal] = useState(false)
  const [selectedJob, setSelectedJob] = useState<any>(null)
  const [jobFilter, setJobFilter] = useState("all")
  const [jobSearchTerm, setJobSearchTerm] = useState("")

  // Calendar tab state management
  const [showScheduleInterviewModal, setShowScheduleInterviewModal] = useState(false)
  const [showEventDetailsModal, setShowEventDetailsModal] = useState(false)
  const [selectedEvent, setSelectedEvent] = useState<any>(null)
  const [calendarView, setCalendarView] = useState("month")
  const [selectedDate, setSelectedDate] = useState(15) // Today
  const [calendarFilter, setCalendarFilter] = useState("all")

  // Settings tab state management
  const [activeSettingsTab, setActiveSettingsTab] = useState("profile")
  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false)
  const [showDeleteAccountModal, setShowDeleteAccountModal] = useState(false)
  const [showInviteTeamModal, setShowInviteTeamModal] = useState(false)
  const [profileData, setProfileData] = useState({
    fullName: "Sarah Wilson",
    email: "sarah.wilson@inclusive.io",
    jobTitle: "Senior Recruitment Manager",
    department: "Human Resources",
    phone: "+1 (555) 123-4567",
    location: "San Francisco, CA",
    timezone: "Pacific Time (PT)",
    avatar: "SW",
    bio: "Experienced recruitment professional with 8+ years in talent acquisition and team building."
  })
  const [notificationPrefs, setNotificationPrefs] = useState({
    newApplications: true,
    interviewReminders: true,
    statusUpdates: true,
    teamMentions: true,
    weeklyReports: false,
    marketingEmails: false,
    securityAlerts: true,
    systemUpdates: true
  })
  const [securitySettings, setSecuritySettings] = useState({
    twoFactorAuth: true,
    sessionTimeout: "4 hours",
    loginNotifications: true,
    deviceManagement: true
  })
  const [teamMembers] = useState([
    { id: 1, name: "Alex Morgan", role: "HR Coordinator", email: "alex.morgan@inclusive.io", avatar: "AM", status: "active", lastActive: "2 hours ago" },
    { id: 2, name: "Jamie Chen", role: "Recruitment Specialist", email: "jamie.chen@inclusive.io", avatar: "JC", status: "active", lastActive: "30 minutes ago" },
    { id: 3, name: "Taylor Kim", role: "Talent Acquisition Lead", email: "taylor.kim@inclusive.io", avatar: "TK", status: "away", lastActive: "1 day ago" },
    { id: 4, name: "Casey Smith", role: "HR Analyst", email: "casey.smith@inclusive.io", avatar: "CS", status: "active", lastActive: "5 minutes ago" }
  ])

  // Comprehensive job data
  const [jobsData, setJobsData] = useState([
    {
      id: "1",
      title: "Senior UX Designer",
      department: "Design",
      location: "Remote",
      type: "Full-time",
      level: "Senior",
      salary: "$85,000 - $120,000",
      applicants: 48,
      posted: "2 weeks ago",
      status: "active",
      description: "We're looking for a Senior UX Designer to join our growing design team...",
      requirements: ["5+ years UX design experience", "Proficiency in Figma", "User research skills"],
      benefits: ["Health insurance", "Remote work", "Flexible hours", "Professional development"],
      priority: "high"
    },
    {
      id: "2", 
      title: "Frontend Developer",
      department: "Engineering",
      location: "San Francisco",
      type: "Full-time",
      level: "Mid-level",
      salary: "$75,000 - $95,000",
      applicants: 36,
      posted: "1 week ago",
      status: "active",
      description: "Join our frontend team to build amazing user experiences...",
      requirements: ["3+ years React experience", "TypeScript proficiency", "Modern CSS skills"],
      benefits: ["Health insurance", "Stock options", "Gym membership", "Catered meals"],
      priority: "high"
    },
    {
      id: "3",
      title: "Product Manager",
      department: "Product",
      location: "New York",
      type: "Full-time", 
      level: "Senior",
      salary: "$95,000 - $130,000",
      applicants: 24,
      posted: "3 days ago",
      status: "active",
      description: "Lead product strategy and execution for our core platform...",
      requirements: ["5+ years product management", "Technical background", "Analytics experience"],
      benefits: ["Health insurance", "Equity package", "Unlimited PTO", "Learning budget"],
      priority: "medium"
    },
    {
      id: "4",
      title: "Marketing Specialist",
      department: "Marketing",
      location: "Remote",
      type: "Full-time",
      level: "Entry-level",
      salary: "$45,000 - $65,000",
      applicants: 18,
      posted: "1 day ago",
      status: "active",
      description: "Drive growth through creative marketing campaigns...",
      requirements: ["2+ years marketing experience", "Social media expertise", "Content creation skills"],
      benefits: ["Health insurance", "Remote work", "Marketing tools budget", "Conference attendance"],
      priority: "medium"
    },
    {
      id: "5",
      title: "DevOps Engineer",
      department: "Engineering",
      location: "Austin",
      type: "Full-time",
      level: "Senior",
      salary: "$90,000 - $125,000",
      applicants: 31,
      posted: "5 days ago",
      status: "active",
      description: "Scale our infrastructure and improve deployment processes...",
      requirements: ["AWS/GCP experience", "Kubernetes knowledge", "CI/CD expertise"],
      benefits: ["Health insurance", "Stock options", "Home office stipend", "Flexible schedule"],
      priority: "high"
    },
    {
      id: "6",
      title: "Data Scientist",
      department: "Analytics",
      location: "Seattle",
      type: "Full-time",
      level: "Mid-level",
      salary: "$80,000 - $110,000",
      applicants: 27,
      posted: "1 week ago",
      status: "paused",
      description: "Extract insights from data to drive business decisions...",
      requirements: ["Python/R proficiency", "Machine learning experience", "SQL expertise"],
      benefits: ["Health insurance", "Research budget", "Conference travel", "Flexible hours"],
      priority: "low"
    },
    {
      id: "7",
      title: "Customer Success Manager",
      department: "Customer Success",
      location: "Chicago",
      type: "Full-time",
      level: "Mid-level",
      salary: "$60,000 - $80,000",
      applicants: 22,
      posted: "4 days ago",
      status: "active",
      description: "Ensure customer satisfaction and drive retention...",
      requirements: ["3+ years customer success", "SaaS experience", "Communication skills"],
      benefits: ["Health insurance", "Commission structure", "Travel opportunities", "Training budget"],
      priority: "medium"
    },
    {
      id: "8",
      title: "Mobile Developer",
      department: "Engineering",
      location: "Remote",
      type: "Contract",
      level: "Senior",
      salary: "$70 - $90/hour",
      applicants: 19,
      posted: "6 days ago",
      status: "active",
      description: "Build and maintain our mobile applications...",
      requirements: ["React Native experience", "iOS/Android development", "App Store deployment"],
      benefits: ["Flexible schedule", "Remote work", "Project bonuses", "Equipment provided"],
      priority: "medium"
    },
    {
      id: "9",
      title: "Technical Writer",
      department: "Documentation",
      location: "Remote",
      type: "Full-time",
      level: "Mid-level",
      salary: "$55,000 - $75,000",
      applicants: 14,
      posted: "3 days ago",
      status: "active",
      description: "Create comprehensive documentation for our products and APIs...",
      requirements: ["Technical writing experience", "API documentation", "Markdown proficiency", "Developer tools knowledge"],
      benefits: ["Health insurance", "Remote work", "Learning budget", "Flexible hours"],
      priority: "medium"
    }
  ])

  // Job filtering logic
  const filteredJobs = jobsData.filter(job => {
    const matchesFilter = jobFilter === "all" || job.status === jobFilter || job.department.toLowerCase() === jobFilter
    const matchesSearch = jobSearchTerm === "" || 
      job.title.toLowerCase().includes(jobSearchTerm.toLowerCase()) ||
      job.department.toLowerCase().includes(jobSearchTerm.toLowerCase()) ||
      job.location.toLowerCase().includes(jobSearchTerm.toLowerCase())
    
    return matchesFilter && matchesSearch
  })

  // Job action handlers
  const handleJobAction = (jobId: string, action: string) => {
    const job = jobsData.find(j => j.id === jobId)
    if (!job) return

    setSelectedJob(job)

    switch (action) {
      case "view":
        setShowJobDetailsModal(true)
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `👀 Viewing ${job.title} details`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "edit":
        setShowEditJobModal(true)
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `✏️ Editing ${job.title}`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "pause":
        setJobsData(prev => prev.map(j => 
          j.id === jobId ? { ...j, status: j.status === "active" ? "paused" : "active" } : j
        ))
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `⏸️ ${job.title} ${job.status === "active" ? "paused" : "activated"}`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "delete":
        if (confirm(`Are you sure you want to delete "${job.title}"?`)) {
          setJobsData(prev => prev.filter(j => j.id !== jobId))
          setNotifications(prev => [
            { id: Date.now(), type: "application", message: `🗑️ ${job.title} deleted`, time: "Just now", urgent: false },
            ...prev.slice(0, 4)
          ])
        }
        break
    }
  }

  // Sample candidate data with full functionality
  const [candidatesData, setCandidatesData] = useState([
    { 
      id: "1",
      name: "Jordan Lee", 
      position: "Frontend Developer", 
      stage: "applied", 
      match: "89%",
      avatar: "JL",
      skills: ["React", "TypeScript", "CSS"],
      experience: "4 years",
      location: "Remote",
      lastActivity: "1h ago",
      date: "2 days ago",
      email: "jordan.lee@email.com",
      phone: "+1 (555) 123-4567"
    },
    { 
      id: "2",
      name: "Riley Johnson", 
      position: "UX Designer", 
      stage: "screening", 
      match: "94%",
      avatar: "RJ",
      skills: ["Figma", "Sketch", "User Research"],
      experience: "6 years",
      location: "San Francisco",
      lastActivity: "3h ago",
      date: "5 days ago",
      email: "riley.johnson@email.com",
      phone: "+1 (555) 234-5678"
    },
    { 
      id: "3",
      name: "Morgan Smith", 
      position: "Product Manager", 
      stage: "interview", 
      match: "91%",
      avatar: "MS",
      skills: ["Strategy", "Analytics", "Roadmapping"],
      experience: "8 years",
      location: "New York",
      lastActivity: "5h ago",
      date: "1 week ago",
      email: "morgan.smith@email.com",
      phone: "+1 (555) 345-6789"
    },
    { 
      id: "4",
      name: "Taylor Brown", 
      position: "Data Scientist", 
      stage: "offer", 
      match: "96%",
      avatar: "TB",
      skills: ["Python", "Machine Learning", "SQL"],
      experience: "5 years",
      location: "Austin",
      lastActivity: "2h ago",
      date: "2 weeks ago",
      email: "taylor.brown@email.com",
      phone: "+1 (555) 456-7890"
    },
    { 
      id: "5",
      name: "Casey Wilson", 
      position: "Marketing Specialist", 
      stage: "applied", 
      match: "82%",
      avatar: "CW",
      skills: ["Content", "SEO", "Analytics"],
      experience: "3 years",
      location: "Remote",
      lastActivity: "1d ago",
      date: "3 days ago",
      email: "casey.wilson@email.com",
      phone: "+1 (555) 567-8901"
    },
    { 
      id: "6",
      name: "Alex Chen", 
      position: "Backend Developer", 
      stage: "screening", 
      match: "87%",
      avatar: "AC",
      skills: ["Node.js", "PostgreSQL", "Docker"],
      experience: "5 years",
      location: "Seattle",
      lastActivity: "4h ago",
      date: "1 week ago",
      email: "alex.chen@email.com",
      phone: "+1 (555) 678-9012"
    },
    { 
      id: "7",
      name: "Sam Rodriguez", 
      position: "DevOps Engineer", 
      stage: "interview", 
      match: "93%",
      avatar: "SR",
      skills: ["AWS", "Kubernetes", "Terraform"],
      experience: "7 years",
      location: "Denver",
      lastActivity: "6h ago",
      date: "4 days ago",
      email: "sam.rodriguez@email.com",
      phone: "+1 (555) 789-0123"
    },
    { 
      id: "8",
      name: "Jamie Park", 
      position: "Mobile Developer", 
      stage: "applied", 
      match: "85%",
      avatar: "JP",
      skills: ["React Native", "Swift", "Kotlin"],
      experience: "4 years",
      location: "Los Angeles",
      lastActivity: "2h ago",
      date: "1 day ago",
      email: "jamie.park@email.com",
      phone: "+1 (555) 890-1234"
    },
    { 
      id: "9",
      name: "Avery Thompson", 
      position: "UI/UX Designer", 
      stage: "screening", 
      match: "90%",
      avatar: "AT",
      skills: ["Adobe XD", "Prototyping", "User Testing"],
      experience: "6 years",
      location: "Chicago",
      lastActivity: "1h ago",
      date: "6 days ago",
      email: "avery.thompson@email.com",
      phone: "+1 (555) 901-2345"
    },
    { 
      id: "10",
      name: "River Davis", 
      position: "Full Stack Developer", 
      stage: "interview", 
      match: "88%",
      avatar: "RD",
      skills: ["React", "Express", "MongoDB"],
      experience: "5 years",
      location: "Portland",
      lastActivity: "3h ago",
      date: "3 days ago",
      email: "river.davis@email.com",
      phone: "+1 (555) 012-3456"
    },
    { 
      id: "11",
      name: "Sage Miller", 
      position: "QA Engineer", 
      stage: "applied", 
      match: "79%",
      avatar: "SM",
      skills: ["Selenium", "Jest", "Cypress"],
      experience: "3 years",
      location: "Remote",
      lastActivity: "5h ago",
      date: "2 days ago",
      email: "sage.miller@email.com",
      phone: "+1 (555) 123-4567"
    },
    { 
      id: "12",
      name: "Phoenix Garcia", 
      position: "Security Engineer", 
      stage: "offer", 
      match: "95%",
      avatar: "PG",
      skills: ["Penetration Testing", "CISSP", "Network Security"],
      experience: "8 years",
      location: "Washington DC",
      lastActivity: "1h ago",
      date: "2 weeks ago",
      email: "phoenix.garcia@email.com",
      phone: "+1 (555) 234-5678"
    },
    { 
      id: "13",
      name: "Dakota Martinez", 
      position: "Data Analyst", 
      stage: "screening", 
      match: "83%",
      avatar: "DM",
      skills: ["Tableau", "R", "Statistics"],
      experience: "4 years",
      location: "Miami",
      lastActivity: "2h ago",
      date: "5 days ago",
      email: "dakota.martinez@email.com",
      phone: "+1 (555) 345-6789"
    },
    { 
      id: "14",
      name: "Rowan Lee", 
      position: "Machine Learning Engineer", 
      stage: "interview", 
      match: "92%",
      avatar: "RL",
      skills: ["TensorFlow", "PyTorch", "MLOps"],
      experience: "6 years",
      location: "San Francisco",
      lastActivity: "4h ago",
      date: "1 week ago",
      email: "rowan.lee@email.com",
      phone: "+1 (555) 456-7890"
    },
    { 
      id: "15",
      name: "Emery Johnson", 
      position: "Cloud Architect", 
      stage: "applied", 
      match: "86%",
      avatar: "EJ",
      skills: ["Azure", "Microservices", "Serverless"],
      experience: "9 years",
      location: "Boston",
      lastActivity: "6h ago",
      date: "4 days ago",
      email: "emery.johnson@email.com",
      phone: "+1 (555) 567-8901"
    },
    { 
      id: "16",
      name: "Finley Brown", 
      position: "Technical Writer", 
      stage: "screening", 
      match: "81%",
      avatar: "FB",
      skills: ["Documentation", "API Docs", "Markdown"],
      experience: "4 years",
      location: "Remote",
      lastActivity: "3h ago",
      date: "1 week ago",
      email: "finley.brown@email.com",
      phone: "+1 (555) 678-9012"
    },
    { 
      id: "17",
      name: "Harper Wilson", 
      position: "Scrum Master", 
      stage: "interview", 
      match: "84%",
      avatar: "HW",
      skills: ["Agile", "Jira", "Team Leadership"],
      experience: "7 years",
      location: "Dallas",
      lastActivity: "1h ago",
      date: "3 days ago",
      email: "harper.wilson@email.com",
      phone: "+1 (555) 789-0123"
    },
    { 
      id: "18",
      name: "Indigo Taylor", 
      position: "Business Analyst", 
      stage: "applied", 
      match: "78%",
      avatar: "IT",
      skills: ["Requirements", "Process Mapping", "Stakeholder Management"],
      experience: "5 years",
      location: "Atlanta",
      lastActivity: "5h ago",
      date: "2 days ago",
      email: "indigo.taylor@email.com",
      phone: "+1 (555) 890-1234"
    },
    { 
      id: "19",
      name: "Juniper Anderson", 
      position: "Site Reliability Engineer", 
      stage: "offer", 
      match: "97%",
      avatar: "JA",
      skills: ["Monitoring", "Incident Response", "Performance Tuning"],
      experience: "6 years",
      location: "San Jose",
      lastActivity: "2h ago",
      date: "3 weeks ago",
      email: "juniper.anderson@email.com",
      phone: "+1 (555) 901-2345"
    },
    { 
      id: "20",
      name: "Kai Thomas", 
      position: "Frontend Architect", 
      stage: "screening", 
      match: "89%",
      avatar: "KT",
      skills: ["Vue.js", "Architecture", "Performance"],
      experience: "8 years",
      location: "Phoenix",
      lastActivity: "4h ago",
      date: "1 week ago",
      email: "kai.thomas@email.com",
      phone: "+1 (555) 012-3456"
    },
    { 
      id: "21",
      name: "Lane Jackson", 
      position: "Product Designer", 
      stage: "interview", 
      match: "91%",
      avatar: "LJ",
      skills: ["Design Systems", "Interaction Design", "Usability"],
      experience: "5 years",
      location: "Nashville",
      lastActivity: "1h ago",
      date: "4 days ago",
      email: "lane.jackson@email.com",
      phone: "+1 (555) 123-4567"
    },
    { 
      id: "22",
      name: "Marley White", 
      position: "Database Administrator", 
      stage: "applied", 
      match: "80%",
      avatar: "MW",
      skills: ["MySQL", "Performance Tuning", "Backup & Recovery"],
      experience: "7 years",
      location: "Minneapolis",
      lastActivity: "3h ago",
      date: "5 days ago",
      email: "marley.white@email.com",
      phone: "+1 (555) 234-5678"
    },
    { 
      id: "23",
      name: "Nova Harris", 
      position: "AI Research Scientist", 
      stage: "screening", 
      match: "94%",
      avatar: "NH",
      skills: ["Deep Learning", "Computer Vision", "NLP"],
      experience: "6 years",
      location: "Cambridge",
      lastActivity: "2h ago",
      date: "1 week ago",
      email: "nova.harris@email.com",
      phone: "+1 (555) 345-6789"
    },
    { 
      id: "24",
      name: "Ocean Clark", 
      position: "Growth Hacker", 
      stage: "interview", 
      match: "87%",
      avatar: "OC",
      skills: ["A/B Testing", "Analytics", "Growth Strategy"],
      experience: "4 years",
      location: "San Diego",
      lastActivity: "6h ago",
      date: "2 days ago",
      email: "ocean.clark@email.com",
      phone: "+1 (555) 456-7890"
    },
    { 
      id: "25",
      name: "Peyton Lewis", 
      position: "Blockchain Developer", 
      stage: "applied", 
      match: "88%",
      avatar: "PL",
      skills: ["Solidity", "Web3", "Smart Contracts"],
      experience: "3 years",
      location: "Remote",
      lastActivity: "1h ago",
      date: "1 day ago",
      email: "peyton.lewis@email.com",
      phone: "+1 (555) 567-8901"
    },
    { 
      id: "26",
      name: "Quinn Robinson", 
      position: "Systems Administrator", 
      stage: "offer", 
      match: "85%",
      avatar: "QR",
      skills: ["Linux", "Automation", "Network Management"],
      experience: "8 years",
      location: "Richmond",
      lastActivity: "4h ago",
      date: "2 weeks ago",
      email: "quinn.robinson@email.com",
      phone: "+1 (555) 678-9012"
    }
  ])

  // Functional candidate filtering with pagination
  const filteredCandidates = candidatesData.filter(candidate => {
    const matchesStage = candidateStageFilter === "all" || candidate.stage === candidateStageFilter
    const matchesSearch = candidateSearchTerm === "" || 
      candidate.name.toLowerCase().includes(candidateSearchTerm.toLowerCase()) ||
      candidate.position.toLowerCase().includes(candidateSearchTerm.toLowerCase()) ||
      candidate.skills.some(skill => skill.toLowerCase().includes(candidateSearchTerm.toLowerCase()))
    
    return matchesStage && matchesSearch
  })

  // Pagination calculations
  const totalPages = Math.ceil(filteredCandidates.length / candidatesPerPage)
  const startIndex = (currentPage - 1) * candidatesPerPage
  const endIndex = startIndex + candidatesPerPage
  const paginatedCandidates = filteredCandidates.slice(startIndex, endIndex)

  // Reset to page 1 when filters change
  useEffect(() => {
    setCurrentPage(1)
  }, [candidateStageFilter, candidateSearchTerm])

  // Pagination handlers
  const handlePageChange = (page: number) => {
    setCurrentPage(page)
    // Clear selections when changing pages
    setSelectedCandidateIds(new Set())
  }

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      handlePageChange(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      handlePageChange(currentPage + 1)
    }
  }

  // Functional bulk actions
  const handleBulkAction = (action: string) => {
    const selectedIds = Array.from(selectedCandidateIds)
    console.log(`Bulk action: ${action} for candidates:`, selectedIds)
    
    switch (action) {
      case "email":
        // Simulate email action
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `✅ Email sent to ${selectedIds.length} candidates`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "schedule":
        // Simulate schedule action
        setNotifications(prev => [
          { id: Date.now(), type: "interview", message: `📅 Interview scheduled for ${selectedIds.length} candidates`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "advance":
        // Simulate advancing candidates
        setCandidatesData(prev => prev.map(candidate => {
          if (selectedIds.includes(candidate.id)) {
            const stages = ["applied", "screening", "interview", "offer"]
            const currentIndex = stages.indexOf(candidate.stage)
            const nextStage = currentIndex < stages.length - 1 ? stages[currentIndex + 1] : candidate.stage
            return { ...candidate, stage: nextStage }
          }
          return candidate
        }))
        setNotifications(prev => [
          { id: Date.now(), type: "goal", message: `⬆️ ${selectedIds.length} candidates advanced to next stage`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "reject":
        // Simulate rejection
        setCandidatesData(prev => prev.filter(candidate => !selectedIds.includes(candidate.id)))
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `❌ ${selectedIds.length} candidates rejected`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
    }
    
    // Clear selection after action
    setSelectedCandidateIds(new Set())
  }

  // Individual candidate actions
  const handleCandidateAction = (candidateId: string, action: string) => {
    const candidate = candidatesData.find(c => c.id === candidateId)
    if (!candidate) return

    console.log(`Individual action: ${action} for candidate:`, candidate.name)
    setSelectedCandidate(candidate)

    switch (action) {
      case "view":
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `👀 Viewing ${candidate.name}'s profile`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        setShowCandidateModal(true)
        break
      case "email":
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: `📧 Composing email to ${candidate.name}`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        setShowEmailModal(true)
        break
      case "schedule":
        setNotifications(prev => [
          { id: Date.now(), type: "interview", message: `📅 Scheduling interview with ${candidate.name}`, time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        setShowScheduleModal(true)
        break
      case "more":
        setShowMoreActionsModal(true)
        break
    }
  }

  // Calculate stage counts dynamically
  const stageCounts = {
    all: candidatesData.length,
    applied: candidatesData.filter(c => c.stage === "applied").length,
    screening: candidatesData.filter(c => c.stage === "screening").length,
    interview: candidatesData.filter(c => c.stage === "interview").length,
    offer: candidatesData.filter(c => c.stage === "offer").length
  }

  // Chart data with different datasets for different time periods
  const chartDataSets = {
    "7D": { 
      data: [45, 52, 48, 61, 55, 67, 72], 
      labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      changes: ["+5", "+7", "-4", "+13", "-6", "+12", "+5"]
    },
    "30D": { 
      data: [40, 45, 52, 48, 61, 55, 67, 72, 68, 75, 70, 78, 82, 79, 85, 88, 84, 90, 87, 92, 89, 95, 91, 88, 93, 96, 92, 89, 94, 97], 
      labels: Array.from({length: 30}, (_, i) => `${i + 1}`),
      changes: Array.from({length: 30}, () => Math.random() > 0.5 ? `+${Math.floor(Math.random() * 10)}` : `-${Math.floor(Math.random() * 5)}`)
    },
    "90D": { 
      data: [35, 42, 38, 45, 52, 48, 55, 61, 58, 65, 62, 68, 72, 69, 75, 78, 82, 79, 85, 88, 84, 90, 87, 92, 89, 95, 91, 88, 93, 96], 
      labels: Array.from({length: 30}, (_, i) => `${i * 3 + 1}`),
      changes: Array.from({length: 30}, () => Math.random() > 0.5 ? `+${Math.floor(Math.random() * 15)}` : `-${Math.floor(Math.random() * 8)}`)
    },
    "12M": { 
      data: [40, 65, 35, 85, 55, 72, 60, 45, 90, 65, 75, 50], 
      labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      changes: ["+5", "+25", "-30", "+50", "-30", "+17", "-12", "-15", "+45", "-25", "+10", "-25"]
    }
  }

  // Chart data based on selected time period
  const [chartData, setChartData] = useState(chartDataSets[timePeriod].data)
  const [chartLabels, setChartLabels] = useState(chartDataSets[timePeriod].labels)
  const [monthlyChanges, setMonthlyChanges] = useState(chartDataSets[timePeriod].changes)

  // Update chart data when time period changes
  useEffect(() => {
    const selectedData = chartDataSets[timePeriod]
    setChartData(selectedData.data)
    setChartLabels(selectedData.labels)
    setMonthlyChanges(selectedData.changes)
  }, [timePeriod])

  // Animation on mount
  useEffect(() => {
    setIsVisible(true)
  }, [])

  // Real-time simulation effects
  useEffect(() => {
    const interval = setInterval(() => {
      // Simulate new notifications
      if (Math.random() > 0.7) {
        const newNotifications = [
          { type: "application", message: "New application from Sarah Wilson", time: "Just now", urgent: false },
          { type: "interview", message: "Interview completed for John Doe", time: "Just now", urgent: false },
          { type: "goal", message: "Weekly target 95% achieved!", time: "Just now", urgent: false }
        ]
        const randomNotification = newNotifications[Math.floor(Math.random() * newNotifications.length)]
        setNotifications(prev => [
          { id: Date.now(), ...randomNotification },
          ...prev.slice(0, 4)
        ])
      }
    }, 8000) // Every 8 seconds

    return () => clearInterval(interval)
  }, [])

  // Chart data simulation
  useEffect(() => {
    const chartInterval = setInterval(() => {
      if (Math.random() > 0.8) {
        // Simulate small data changes
        setChartData(prev => prev.map(val => 
          Math.max(20, Math.min(100, val + (Math.random() - 0.5) * 5))
        ))
      }
    }, 5000) // Every 5 seconds

    return () => clearInterval(chartInterval)
  }, [])

  // Auto-dismiss notifications
  useEffect(() => {
    if (notifications.length > 5) {
      const timer = setTimeout(() => {
        setNotifications(prev => prev.slice(0, 5))
      }, 2000)
      return () => clearTimeout(timer)
    }
  }, [notifications])

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showFilterDropdown) {
        const target = event.target as Element
        if (!target.closest('.filter-dropdown-container')) {
          setShowFilterDropdown(false)
        }
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showFilterDropdown])

  // Chart rendering
  const chartRef = useRef<HTMLCanvasElement>(null)
  const chartContainerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!chartRef.current) return

    const canvas = chartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas dimensions
    canvas.width = canvas.offsetWidth * 2
    canvas.height = canvas.offsetHeight * 2
    ctx.scale(2, 2) // For retina displays

    // Chart data
    const data = chartData
    const maxValue = Math.max(...data)
    const canvasWidth = canvas.width / 2
    const canvasHeight = canvas.height / 2
    const padding = 20
    const chartWidth = canvasWidth - padding * 2
    const chartHeight = canvasHeight - padding * 2

    // Clear canvas
    ctx.clearRect(0, 0, canvasWidth, canvasHeight)

    // Draw grid lines (dark theme)
    ctx.strokeStyle = "#334155"
    ctx.lineWidth = 0.5

    // Horizontal grid lines
    for (let i = 0; i <= 4; i++) {
      const y = padding + (chartHeight / 4) * i
      ctx.beginPath()
      ctx.moveTo(padding, y)
      ctx.lineTo(canvasWidth - padding, y)
      ctx.stroke()
    }

    // Draw line chart with dark theme colors
    ctx.strokeStyle = "#d946ef"
    ctx.lineWidth = 2.5
    ctx.beginPath()

    // Create smooth line
    data.forEach((value, index) => {
      const x = padding + index * (chartWidth / (data.length - 1))
      const y = canvasHeight - padding - (value / maxValue) * chartHeight

      if (index === 0) {
        ctx.moveTo(x, y)
      } else {
        // Create a smooth curve
        const prevX = padding + (index - 1) * (chartWidth / (data.length - 1))
        const prevY = canvasHeight - padding - (data[index - 1] / maxValue) * chartHeight

        const cpX1 = prevX + (x - prevX) / 3
        const cpX2 = prevX + (2 * (x - prevX)) / 3

        ctx.bezierCurveTo(cpX1, prevY, cpX2, y, x, y)
      }
    })
    ctx.stroke()

    // Add area fill under the line
    const lastX = padding + (data.length - 1) * (chartWidth / (data.length - 1))
    const lastY = canvasHeight - padding - (data[data.length - 1] / maxValue) * chartHeight

    ctx.lineTo(lastX, canvasHeight - padding)
    ctx.lineTo(padding, canvasHeight - padding)
    ctx.closePath()

    // Create gradient fill (dark theme)
    const gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight)
    gradient.addColorStop(0, "rgba(217, 70, 239, 0.2)")
    gradient.addColorStop(1, "rgba(217, 70, 239, 0)")
    ctx.fillStyle = gradient
    ctx.fill()

    // Add dots at data points
    data.forEach((value, index) => {
      const x = padding + index * (chartWidth / (data.length - 1))
      const y = canvasHeight - padding - (value / maxValue) * chartHeight

      // Highlight the hovered point
      if (index === hoverPoint) {
        // Draw larger highlight circle
        ctx.fillStyle = "rgba(217, 70, 239, 0.2)"
        ctx.beginPath()
        ctx.arc(x, y, 8, 0, Math.PI * 2)
        ctx.fill()
      }

      // Dark theme dot colors
      ctx.fillStyle = "#0f172a"
      ctx.beginPath()
      ctx.arc(x, y, 4, 0, Math.PI * 2)
      ctx.fill()

      ctx.strokeStyle = "#d946ef"
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.arc(x, y, 4, 0, Math.PI * 2)
      ctx.stroke()
    })
  }, [activeTab, hoverPoint, chartData])

  // Handle mouse movement over chart
  const handleChartMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!chartContainerRef.current || !chartRef.current) return

    const rect = chartContainerRef.current.getBoundingClientRect()
    const x = e.clientX - rect.left
    const width = rect.width
    const pointWidth = width / chartData.length

    // Calculate which data point is closest
    const pointIndex = Math.min(Math.floor(x / pointWidth), chartData.length - 1)
    setHoverPoint(pointIndex)
  }

  const handleChartMouseLeave = () => {
    setHoverPoint(null)
  }

  // Dashboard content based on active tab
  const renderDashboardContent = () => {
    switch (activeTab) {
      case "dashboard":
        return (
          <div className="space-y-3">
            {/* Stats Row */}
            <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
              {[
                {
                  title: "Active Jobs",
                  value: "24",
                  change: "+3",
                  trend: "up" as const,
                  icon: <Briefcase className="h-4 w-4 text-fuchsia-400" />,
                  goal: 30,
                  progress: 80,
                  subtitle: "vs last month"
                },
                { 
                  title: "Candidates", 
                  value: "156", 
                  change: "+12", 
                  trend: "up" as const,
                  icon: <Users className="h-4 w-4 text-blue-400" />,
                  goal: 200,
                  progress: 78,
                  subtitle: "in pipeline"
                },
                {
                  title: "Interviews",
                  value: "32",
                  change: "+5",
                  trend: "up" as const,
                  icon: <Calendar className="h-4 w-4 text-emerald-400" />,
                  goal: 40,
                  progress: 80,
                  subtitle: "this week"
                },
                {
                  title: "Time Saved",
                  value: "48h",
                  change: "+8h",
                  trend: "up" as const,
                  icon: <BarChart3 className="h-4 w-4 text-amber-400" />,
                  goal: 60,
                  progress: 80,
                  subtitle: "automation"
                },
              ].map((stat, i) => (
                <AnimatedElement key={i} animation="slide-up" delay={i * 100}>
                  <div className="bg-slate-800/50 rounded-lg border border-slate-700/50 p-3 hover:border-fuchsia-500/50 transition-all duration-300 group backdrop-blur-sm min-h-[120px]">
                    <div className="flex justify-between items-start mb-2">
                      <div className="text-xs text-slate-400 font-medium">{stat.title}</div>
                      <div className="flex-shrink-0">
                        {stat.icon}
                      </div>
                    </div>
                    
                    <div className="flex flex-col justify-between h-full">
                      <div>
                        <div className="text-xl font-bold text-slate-100 mb-1 flex items-baseline gap-2">
                          {stat.value}
                          <span className="text-xs text-slate-500">/ {stat.goal}</span>
                        </div>
                        <div className="text-xs text-slate-500 mb-2">{stat.subtitle}</div>
                        
                        {/* Progress Bar */}
                        <div className="w-full bg-slate-700/50 rounded-full h-1.5 mb-2">
                          <div 
                            className="bg-gradient-to-r from-fuchsia-500 to-purple-500 h-1.5 rounded-full transition-all duration-500"
                            style={{ width: `${stat.progress}%` }}
                          />
                        </div>
                      </div>
                      
                      <div className="flex justify-between items-center">
                        <div className="text-xs font-medium flex items-center gap-1 text-green-400">
                          <TrendingUp className="h-3 w-3" />
                          {stat.change}
                        </div>
                        <div className="text-xs text-slate-500">{stat.progress}%</div>
                      </div>
                    </div>

                    {/* Hover effect */}
                    <div className="mt-2 pt-2 border-t border-slate-700/50 text-xs text-fuchsia-400 flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                      View details
                      <ArrowRight className="ml-1 h-3 w-3" />
                    </div>
                  </div>
                </AnimatedElement>
              ))}
            </div>

            {/* Candidates Table */}
            <AnimatedElement animation="slide-up" delay={400}>
              <div className="bg-slate-800/50 rounded-lg border border-slate-700/50 overflow-hidden backdrop-blur-sm">
                <div className="p-4 border-b border-slate-700/50">
                  <div className="flex justify-between items-center mb-3">
                    <div className="font-medium text-slate-100 text-sm">Recent Candidates</div>
                    <div className="flex items-center gap-2">
                      {/* Table Filter */}
                      <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                        {[
                          { key: "all", label: "All", count: 4 },
                          { key: "interview", label: "Interview", count: 1 },
                          { key: "screening", label: "Review", count: 2 }
                        ].map((filter) => (
                          <button
                            key={filter.key}
                            onClick={() => setTableFilter(filter.key)}
                            className={`px-2 py-1 rounded text-xs transition-all ${
                              tableFilter === filter.key 
                                ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                                : 'text-slate-400 hover:text-slate-300'
                            }`}
                          >
                            {filter.label} ({filter.count})
                          </button>
                        ))}
                      </div>
                      <div 
                        className="text-xs text-fuchsia-400 cursor-pointer hover:underline"
                        onClick={handleExportCandidates}
                      >
                        Export
                      </div>
                    </div>
                  </div>
                  
                  {/* Bulk Actions */}
                  {selectedCandidates.size > 0 && (
                    <div className="flex items-center gap-2 mb-3 p-2 bg-fuchsia-500/10 border border-fuchsia-500/30 rounded-md">
                      <span className="text-xs text-fuchsia-300">{selectedCandidates.size} selected</span>
                      <div className="flex items-center gap-1">
                        <Button variant="ghost" size="sm" className="h-6 text-xs text-fuchsia-400">
                          <Mail className="h-3 w-3 mr-1" />
                          Email
                        </Button>
                        <Button variant="ghost" size="sm" className="h-6 text-xs text-fuchsia-400">
                          <Calendar className="h-3 w-3 mr-1" />
                          Schedule
                        </Button>
                        <Button variant="ghost" size="sm" className="h-6 text-xs text-red-400">
                          <X className="h-3 w-3 mr-1" />
                          Reject
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="p-4">
                  {/* Enhanced Table */}
                  <div className="space-y-3">
                    {[
                      { 
                        id: "1",
                        name: "Alex Morgan", 
                        position: "UX Designer", 
                        status: "interview", 
                        match: "92%",
                        avatar: "AM",
                        skills: ["Figma", "React", "UX Research"],
                        experience: "5 years",
                        location: "San Francisco",
                        lastActivity: "2h ago"
                      },
                      { 
                        id: "2",
                        name: "Jamie Chen", 
                        position: "Frontend Dev", 
                        status: "screening", 
                        match: "87%",
                        avatar: "JC",
                        skills: ["React", "TypeScript", "Node.js"],
                        experience: "3 years",
                        location: "Remote",
                        lastActivity: "5h ago"
                      },
                      { 
                        id: "3",
                        name: "Taylor Kim", 
                        position: "Product Manager", 
                        status: "applied", 
                        match: "78%",
                        avatar: "TK",
                        skills: ["Strategy", "Analytics", "Agile"],
                        experience: "7 years",
                        location: "New York",
                        lastActivity: "1d ago"
                      },
                      { 
                        id: "4",
                        name: "Casey Smith", 
                        position: "Data Analyst", 
                        status: "offer", 
                        match: "85%",
                        avatar: "CS",
                        skills: ["Python", "SQL", "Tableau"],
                        experience: "4 years",
                        location: "Austin",
                        lastActivity: "3h ago"
                      }
                    ].map((candidate) => (
                      <div key={candidate.id} className="bg-slate-900/30 rounded-lg p-3 border border-slate-700/30 hover:border-fuchsia-500/30 transition-all group">
                        <div className="flex items-center gap-3">
                          {/* Selection Checkbox */}
                          <button
                            onClick={() => {
                              const newSelected = new Set(selectedCandidates)
                              if (newSelected.has(candidate.id)) {
                                newSelected.delete(candidate.id)
                              } else {
                                newSelected.add(candidate.id)
                              }
                              setSelectedCandidates(newSelected)
                            }}
                            className="text-slate-400 hover:text-fuchsia-400 transition-colors"
                          >
                            {selectedCandidates.has(candidate.id) ? (
                              <CheckSquare className="h-4 w-4 text-fuchsia-400" />
                            ) : (
                              <Square className="h-4 w-4" />
                            )}
                          </button>
                          
                          {/* Avatar */}
                          <div className="w-10 h-10 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                            {candidate.avatar}
                          </div>
                          
                          {/* Candidate Info */}
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-medium text-slate-200">{candidate.name}</span>
                              <CandidateStatus status={candidate.status} />
                              <span className="text-fuchsia-400 font-medium text-sm">{candidate.match}</span>
                            </div>
                            <div className="text-sm text-slate-400">{candidate.position} • {candidate.experience} • {candidate.location}</div>
                            <div className="flex items-center gap-1 mt-1">
                              {candidate.skills.slice(0, 3).map((skill, i) => (
                                <span key={i} className="px-1.5 py-0.5 bg-slate-700/50 rounded text-xs text-slate-300">
                                  {skill}
                                </span>
                              ))}
                              {candidate.skills.length > 3 && (
                                <span className="text-xs text-slate-500">+{candidate.skills.length - 3}</span>
                              )}
                            </div>
                          </div>
                          
                          {/* Quick Actions */}
                          <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-7 w-7 p-0 text-slate-400 hover:text-fuchsia-400 hover:bg-fuchsia-500/10 transition-all" 
                              title="View Profile"
                              onClick={() => handleCandidateAction(candidate.id, "view")}
                            >
                              <Eye className="h-3 w-3" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-7 w-7 p-0 text-slate-400 hover:text-blue-400 hover:bg-blue-500/10 transition-all" 
                              title="Send Email"
                              onClick={() => handleCandidateAction(candidate.id, "email")}
                            >
                              <Mail className="h-3 w-3" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-7 w-7 p-0 text-slate-400 hover:text-emerald-400 hover:bg-emerald-500/10 transition-all" 
                              title="Schedule Interview"
                              onClick={() => handleCandidateAction(candidate.id, "schedule")}
                            >
                              <Calendar className="h-3 w-3" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-7 w-7 p-0 text-slate-400 hover:text-purple-400 hover:bg-purple-500/10 transition-all" 
                              title="More Actions"
                              onClick={() => handleCandidateAction(candidate.id, "more")}
                            >
                              <MoreVertical className="h-3 w-3" />
                            </Button>
                          </div>
                          
                          {/* Last Activity */}
                          <div className="text-xs text-slate-500 min-w-fit">
                            {candidate.lastActivity}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </AnimatedElement>

            {/* Activity Chart */}
            <AnimatedElement animation="slide-up" delay={500}>
              <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm min-h-[280px]">
                <div className="flex justify-between items-center mb-4">
                  <div className="font-medium text-slate-100 flex items-center gap-2 text-sm">
                    <LineChart className="h-4 w-4 text-fuchsia-400" />
                    Recruitment Activity
                    <div className="flex items-center gap-1 ml-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span className="text-xs text-green-400">Live</span>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    {/* Chart Type Selector */}
                    <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                      {[
                        { type: "area" as const, icon: <AreaChart className="h-3 w-3" />, label: "Area" },
                        { type: "line" as const, icon: <LineChart className="h-3 w-3" />, label: "Line" },
                        { type: "bar" as const, icon: <BarChart2 className="h-3 w-3" />, label: "Bar" }
                      ].map((item) => (
                        <button
                          key={item.type}
                          onClick={() => setChartType(item.type)}
                          className={`px-2 py-1 rounded text-xs transition-all flex items-center gap-1 ${
                            chartType === item.type 
                              ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                              : 'text-slate-400 hover:text-slate-300'
                          }`}
                          title={`${item.label} Chart`}
                        >
                          {item.icon}
                          <span className="hidden sm:inline">{item.label}</span>
                        </button>
                      ))}
                    </div>
                    
                    {/* Time Period Selector */}
                    <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                      {[
                        { period: "7D", label: "7 Days" },
                        { period: "30D", label: "30 Days" },
                        { period: "90D", label: "90 Days" },
                        { period: "12M", label: "12 Months" }
                      ].map((item) => (
                        <button
                          key={item.period}
                          onClick={() => setTimePeriod(item.period)}
                          className={`px-2 py-1 rounded text-xs transition-all ${
                            timePeriod === item.period 
                              ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                              : 'text-slate-400 hover:text-slate-300'
                          }`}
                          title={item.label}
                        >
                          {item.period}
                        </button>
                      ))}
                    </div>
                    
                    <Button variant="ghost" size="sm" className="h-6 w-6 p-0" title="Download Chart">
                      <Download className="h-3 w-3 text-slate-400" />
                    </Button>
                  </div>
                </div>
                
                {/* Chart Insights */}
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <div className="text-lg font-bold text-green-400">+18.5%</div>
                    <div className="text-xs text-slate-400">vs last period</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-blue-400">94.2</div>
                    <div className="text-xs text-slate-400">avg score</div>
                  </div>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1">
                      <Target className="h-4 w-4 text-purple-400" />
                      <div className="text-lg font-bold text-purple-400">Peak</div>
                    </div>
                    <div className="text-xs text-slate-400">performance</div>
                  </div>
                </div>
                
                <div className="h-[140px]">
                  <MetricChart
                    data={chartData}
                    labels={chartLabels}
                    changes={monthlyChanges}
                    height={140}
                    color="#d946ef"
                    fillColor="rgba(217, 70, 239, 0.2)"
                    gridColor="#334155"
                    type={chartType}
                    showTooltip
                    animate
                  />
                </div>
                
                {/* Chart Footer */}
                <div className="flex justify-between items-center mt-3 pt-3 border-t border-slate-700/50">
                  <div className="text-xs text-slate-500">
                    Last updated: <span className="text-slate-400">2 min ago</span>
                  </div>
                  <div className="flex items-center gap-2 text-xs">
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-fuchsia-400 rounded-full"></div>
                      <span className="text-slate-400">Applications</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                      <span className="text-slate-400">Interviews</span>
                    </div>
                  </div>
                </div>
              </div>
            </AnimatedElement>
          </div>
        )
      case "candidates":
        return (
          <AnimatedElement animation="fade-in">
            <div className="space-y-3">
              <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-slate-100">Candidate Pipeline</h3>
                  <div className="flex items-center gap-2">
                    {/* Filter Button with Dropdown */}
                    <div className="relative filter-dropdown-container">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 h-8 text-xs"
                        onClick={() => setShowFilterDropdown(!showFilterDropdown)}
                      >
                        <Filter className="h-3 w-3 mr-1" /> Filter
                        <ChevronDown className="h-3 w-3 ml-1" />
                      </Button>
                      
                      {/* Filter Dropdown */}
                      {showFilterDropdown && (
                        <div className="absolute right-0 top-10 w-48 bg-slate-800/95 border border-slate-700/50 rounded-lg shadow-xl backdrop-blur-sm z-50">
                          <div className="p-2">
                            <div className="text-xs text-slate-400 mb-2 px-2">Filter by:</div>
                            <button
                              onClick={() => handleFilterAction("location")}
                              className="w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700/50 rounded transition-colors"
                            >
                              Location
                            </button>
                            <button
                              onClick={() => handleFilterAction("experience")}
                              className="w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700/50 rounded transition-colors"
                            >
                              Experience Level
                            </button>
                            <button
                              onClick={() => handleFilterAction("skills")}
                              className="w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700/50 rounded transition-colors"
                            >
                              Skills
                            </button>
                            <div className="border-t border-slate-700/50 my-1"></div>
                            <button
                              onClick={() => {
                                setCandidateStageFilter("all")
                                setCandidateSearchTerm("")
                                setShowFilterDropdown(false)
                                setNotifications(prev => [
                                  { id: Date.now(), type: "application", message: "All filters cleared", time: "Just now", urgent: false },
                                  ...prev.slice(0, 4)
                                ])
                              }}
                              className="w-full text-left px-2 py-1 text-xs text-red-400 hover:bg-slate-700/50 rounded transition-colors"
                            >
                              Clear All Filters
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {/* Add Candidate Button */}
                    <Button 
                      size="sm" 
                      className="bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                      onClick={() => setShowAddCandidateModal(true)}
                    >
                      Add Candidate
                    </Button>
                  </div>
                </div>

                {/* Add Candidate Modal */}
                {showAddCandidateModal && (
                  <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
                    <div className="bg-slate-800 border border-slate-700/50 rounded-lg p-6 w-96 max-w-[90vw]">
                      <div className="flex justify-between items-center mb-4">
                        <h4 className="text-lg font-medium text-slate-100">Add New Candidate</h4>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => setShowAddCandidateModal(false)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-xs text-slate-400 mb-1">Full Name</label>
                          <Input className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" placeholder="Enter candidate name" />
                        </div>
                        <div>
                          <label className="block text-xs text-slate-400 mb-1">Position</label>
                          <Input className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" placeholder="Enter position" />
                        </div>
                        <div>
                          <label className="block text-xs text-slate-400 mb-1">Email</label>
                          <Input className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" placeholder="Enter email address" />
                        </div>
                        <div className="flex gap-2 pt-2">
                          <Button
                            variant="outline"
                            size="sm"
                            className="flex-1 text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 h-8 text-xs"
                            onClick={() => setShowAddCandidateModal(false)}
                          >
                            Cancel
                          </Button>
                          <Button
                            size="sm"
                            className="flex-1 bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                            onClick={handleAddCandidate}
                          >
                            Add Candidate
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Enhanced Pipeline Stats */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-4">
                  {[
                    {
                      title: "Applied",
                      value: stageCounts.applied.toString(),
                      change: "+8",
                      trend: "up" as const,
                      icon: <Users className="h-4 w-4 text-blue-400" />,
                      goal: 50,
                      progress: Math.round((stageCounts.applied / 50) * 100),
                      subtitle: "this week"
                    },
                    {
                      title: "Screening",
                      value: stageCounts.screening.toString(),
                      change: "+5",
                      trend: "up" as const,
                      icon: <Search className="h-4 w-4 text-amber-400" />,
                      goal: 35,
                      progress: Math.round((stageCounts.screening / 35) * 100),
                      subtitle: "in review"
                    },
                    {
                      title: "Interview",
                      value: stageCounts.interview.toString(),
                      change: "+3",
                      trend: "up" as const,
                      icon: <Calendar className="h-4 w-4 text-emerald-400" />,
                      goal: 20,
                      progress: Math.round((stageCounts.interview / 20) * 100),
                      subtitle: "scheduled"
                    },
                    {
                      title: "Offer",
                      value: stageCounts.offer.toString(),
                      change: "+2",
                      trend: "up" as const,
                      icon: <CheckCircle2 className="h-4 w-4 text-fuchsia-400" />,
                      goal: 10,
                      progress: Math.round((stageCounts.offer / 10) * 100),
                      subtitle: "extended"
                    }
                  ].map((stat, i) => (
                    <AnimatedElement key={i} animation="slide-up" delay={i * 100}>
                      <div className="bg-slate-800/50 rounded-lg border border-slate-700/50 p-3 hover:border-fuchsia-500/50 transition-all duration-300 group backdrop-blur-sm min-h-[120px]">
                        <div className="flex justify-between items-start mb-2">
                          <div className="text-xs text-slate-400 font-medium">{stat.title}</div>
                          <div className="flex-shrink-0">
                            {stat.icon}
                          </div>
                        </div>
                        
                        <div className="flex flex-col justify-between h-full">
                          <div>
                            <div className="text-xl font-bold text-slate-100 mb-1 flex items-baseline gap-2">
                              {stat.value}
                              <span className="text-xs text-slate-500">/ {stat.goal}</span>
                            </div>
                            <div className="text-xs text-slate-500 mb-2">{stat.subtitle}</div>
                            
                            {/* Progress Bar */}
                            <div className="w-full bg-slate-700/50 rounded-full h-1.5 mb-2">
                              <div 
                                className="bg-gradient-to-r from-fuchsia-500 to-purple-500 h-1.5 rounded-full transition-all duration-500"
                                style={{ width: `${Math.min(stat.progress, 100)}%` }}
                              />
                            </div>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="text-xs font-medium flex items-center gap-1 text-green-400">
                              <TrendingUp className="h-3 w-3" />
                              {stat.change}
                            </div>
                            <div className="text-xs text-slate-500">{Math.min(stat.progress, 100)}%</div>
                          </div>
                        </div>

                        {/* Hover effect */}
                        <div className="mt-2 pt-2 border-t border-slate-700/50 text-xs text-fuchsia-400 flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                          View details
                          <ArrowRight className="ml-1 h-3 w-3" />
                        </div>
                      </div>
                    </AnimatedElement>
                  ))}
                </div>

                {/* Enhanced Candidates Table */}
                <div className="bg-slate-900/30 rounded-lg border border-slate-700/50 overflow-hidden">
                  <div className="p-4 border-b border-slate-700/50">
                    <div className="flex justify-between items-center mb-3">
                      <div className="font-medium text-slate-100 text-sm">
                        All Candidates
                        {filteredCandidates.length > candidatesPerPage && (
                          <span className="ml-2 text-xs text-slate-400">
                            (Page {currentPage} of {totalPages})
                          </span>
                        )}
                      </div>
                      <div className="flex items-center gap-2">
                        {/* Stage Filter */}
                        <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                          {[
                            { key: "all", label: "All", count: stageCounts.all },
                            { key: "applied", label: "Applied", count: stageCounts.applied },
                            { key: "screening", label: "Screening", count: stageCounts.screening },
                            { key: "interview", label: "Interview", count: stageCounts.interview },
                            { key: "offer", label: "Offer", count: stageCounts.offer }
                          ].map((filter) => (
                            <button
                              key={filter.key}
                              onClick={() => setCandidateStageFilter(filter.key)}
                              className={`px-2 py-1 rounded text-xs transition-all ${
                                candidateStageFilter === filter.key 
                                  ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                                  : 'text-slate-400 hover:text-slate-300'
                              }`}
                            >
                              {filter.label} ({filter.count})
                            </button>
                          ))}
                        </div>
                        <div 
                          className="text-xs text-fuchsia-400 cursor-pointer hover:underline"
                          onClick={handleExportCandidates}
                        >
                          Export ({filteredCandidates.length})
                        </div>
                      </div>
                    </div>
                    
                    {/* Search Bar */}
                    <div className="mb-3">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-400" />
                        <Input
                          placeholder="Search candidates..."
                          value={candidateSearchTerm}
                          onChange={(e) => setCandidateSearchTerm(e.target.value)}
                          className="pl-9 h-8 bg-slate-800/50 border-slate-700/50 text-slate-200 placeholder:text-slate-400 text-sm"
                        />
                      </div>
                    </div>
                    
                    {/* Bulk Actions */}
                    {selectedCandidateIds.size > 0 && (
                      <div className="flex items-center gap-2 mb-3 p-2 bg-fuchsia-500/10 border border-fuchsia-500/30 rounded-md">
                        <span className="text-xs text-fuchsia-300">{selectedCandidateIds.size} selected</span>
                        <div className="flex items-center gap-1">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-6 text-xs text-fuchsia-400"
                            onClick={() => handleBulkAction("email")}
                          >
                            <Mail className="h-3 w-3 mr-1" />
                            Email
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-6 text-xs text-fuchsia-400"
                            onClick={() => handleBulkAction("schedule")}
                          >
                            <Calendar className="h-3 w-3 mr-1" />
                            Schedule
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-6 text-xs text-emerald-400"
                            onClick={() => handleBulkAction("advance")}
                          >
                            <CheckCircle2 className="h-3 w-3 mr-1" />
                            Advance
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-6 text-xs text-red-400"
                            onClick={() => handleBulkAction("reject")}
                          >
                            <X className="h-3 w-3 mr-1" />
                            Reject
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="p-4">
                    {/* Enhanced Candidate Cards */}
                    <div className="space-y-3">
                      {paginatedCandidates.length === 0 ? (
                        <div className="text-center py-8 text-slate-400">
                          <Users className="h-12 w-12 mx-auto mb-3 opacity-50" />
                          <div className="text-sm">No candidates found</div>
                          <div className="text-xs text-slate-500 mt-1">
                            {candidateSearchTerm ? "Try adjusting your search terms" : "Try changing your filter"}
                          </div>
                        </div>
                      ) : (
                        paginatedCandidates.map((candidate) => (
                          <div key={candidate.id} className="bg-slate-900/30 rounded-lg p-3 border border-slate-700/30 hover:border-fuchsia-500/30 transition-all group">
                            <div className="flex items-center gap-3">
                              {/* Selection Checkbox */}
                              <button
                                onClick={() => {
                                  const newSelected = new Set(selectedCandidateIds)
                                  if (newSelected.has(candidate.id)) {
                                    newSelected.delete(candidate.id)
                                  } else {
                                    newSelected.add(candidate.id)
                                  }
                                  setSelectedCandidateIds(newSelected)
                                }}
                                className="text-slate-400 hover:text-fuchsia-400 transition-colors"
                              >
                                {selectedCandidateIds.has(candidate.id) ? (
                                  <CheckSquare className="h-4 w-4 text-fuchsia-400" />
                                ) : (
                                  <Square className="h-4 w-4" />
                                )}
                              </button>
                              
                              {/* Avatar */}
                              <div className="w-10 h-10 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                                {candidate.avatar}
                              </div>
                              
                              {/* Candidate Info */}
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-medium text-slate-200">{candidate.name}</span>
                                  <span
                                    className={`px-2 py-1 rounded-full text-xs ${
                                      candidate.stage === "interview"
                                        ? "bg-emerald-500/20 text-emerald-300 border border-emerald-500/30"
                                        : candidate.stage === "screening"
                                          ? "bg-blue-500/20 text-blue-300 border border-blue-500/30"
                                          : candidate.stage === "applied"
                                            ? "bg-slate-500/20 text-slate-300 border border-slate-500/30"
                                            : "bg-fuchsia-500/20 text-fuchsia-300 border border-fuchsia-500/30"
                                    }`}
                                  >
                                    {candidate.stage}
                                  </span>
                                  <span className="text-fuchsia-400 font-medium text-sm">{candidate.match}</span>
                                </div>
                                <div className="text-sm text-slate-400">{candidate.position} • {candidate.experience} • {candidate.location}</div>
                                <div className="flex items-center gap-1 mt-1">
                                  {candidate.skills.slice(0, 3).map((skill, i) => (
                                    <span key={i} className="px-1.5 py-0.5 bg-slate-700/50 rounded text-xs text-slate-300">
                                      {skill}
                                    </span>
                                  ))}
                                  {candidate.skills.length > 3 && (
                                    <span className="text-xs text-slate-500">+{candidate.skills.length - 3}</span>
                                  )}
                                </div>
                              </div>
                              
                              {/* Quick Actions */}
                              <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-7 w-7 p-0 text-slate-400 hover:text-fuchsia-400 hover:bg-fuchsia-500/10 transition-all" 
                                  title="View Profile"
                                  onClick={() => handleCandidateAction(candidate.id, "view")}
                                >
                                  <Eye className="h-3 w-3" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-7 w-7 p-0 text-slate-400 hover:text-blue-400 hover:bg-blue-500/10 transition-all" 
                                  title="Send Email"
                                  onClick={() => handleCandidateAction(candidate.id, "email")}
                                >
                                  <Mail className="h-3 w-3" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-7 w-7 p-0 text-slate-400 hover:text-emerald-400 hover:bg-emerald-500/10 transition-all" 
                                  title="Schedule Interview"
                                  onClick={() => handleCandidateAction(candidate.id, "schedule")}
                                >
                                  <Calendar className="h-3 w-3" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-7 w-7 p-0 text-slate-400 hover:text-purple-400 hover:bg-purple-500/10 transition-all" 
                                  title="More Actions"
                                  onClick={() => handleCandidateAction(candidate.id, "more")}
                                >
                                  <MoreVertical className="h-3 w-3" />
                                </Button>
                              </div>
                              
                              {/* Applied Date & Last Activity */}
                              <div className="text-xs text-slate-500 min-w-fit text-right">
                                <div>Applied {candidate.date}</div>
                                <div className="text-slate-400">Active {candidate.lastActivity}</div>
                              </div>
                            </div>
                          </div>
                        ))
                      )}
                    </div>

                    {/* Pagination Controls */}
                    {filteredCandidates.length > candidatesPerPage && (
                      <div className="flex items-center justify-between mt-6 pt-4 border-t border-slate-700/50">
                        <div className="text-xs text-slate-400">
                          Showing {startIndex + 1}-{Math.min(endIndex, filteredCandidates.length)} of {filteredCandidates.length} candidates
                        </div>
                        
                        <div className="flex items-center gap-2">
                          {/* Previous Button */}
                          <Button
                            variant="outline"
                            size="sm"
                            className="h-8 w-8 p-0 text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 disabled:opacity-50"
                            onClick={handlePreviousPage}
                            disabled={currentPage === 1}
                          >
                            <ChevronDown className="h-3 w-3 rotate-90" />
                          </Button>

                          {/* Page Numbers */}
                          <div className="flex items-center gap-1">
                            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                              <Button
                                key={page}
                                variant={currentPage === page ? "default" : "outline"}
                                size="sm"
                                className={`h-8 w-8 p-0 text-xs ${
                                  currentPage === page
                                    ? "bg-fuchsia-500 hover:bg-fuchsia-600 text-white"
                                    : "text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50"
                                }`}
                                onClick={() => handlePageChange(page)}
                              >
                                {page}
                              </Button>
                            ))}
                          </div>

                          {/* Next Button */}
                          <Button
                            variant="outline"
                            size="sm"
                            className="h-8 w-8 p-0 text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 disabled:opacity-50"
                            onClick={handleNextPage}
                            disabled={currentPage === totalPages}
                          >
                            <ChevronDown className="h-3 w-3 -rotate-90" />
                          </Button>
                        </div>
                        
                        <div className="text-xs text-slate-400">
                          Page {currentPage} of {totalPages}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </AnimatedElement>
        )
      case "jobs":
        return (
          <AnimatedElement animation="fade-in">
            <div className="space-y-3">
              {/* Jobs Management Header */}
              <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-slate-100">Job Management</h3>
                  <div className="flex items-center gap-2">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 h-8 text-xs"
                      onClick={() => {
                        setNotifications(prev => [
                          { id: Date.now(), type: "application", message: "📊 Job analytics exported", time: "Just now", urgent: false },
                          ...prev.slice(0, 4)
                        ])
                      }}
                    >
                      <Download className="h-3 w-3 mr-1" /> Export
                    </Button>
                    <Button 
                      size="sm" 
                      className="bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                      onClick={() => setShowCreateJobModal(true)}
                    >
                      Post New Job
                    </Button>
                  </div>
                </div>

                {/* Enhanced Job Statistics */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-4">
                  {[
                    {
                      title: "Active Jobs",
                      value: jobsData.filter(j => j.status === "active").length.toString(),
                      change: "+3",
                      trend: "up" as const,
                      icon: <Briefcase className="h-4 w-4 text-fuchsia-400" />,
                      goal: 30,
                      progress: Math.round((jobsData.filter(j => j.status === "active").length / 30) * 100),
                      subtitle: "open positions"
                    },
                    {
                      title: "Applications",
                      value: jobsData.reduce((sum, job) => sum + job.applicants, 0).toString(),
                      change: "+47",
                      trend: "up" as const,
                      icon: <Users className="h-4 w-4 text-blue-400" />,
                      goal: 400,
                      progress: Math.round((jobsData.reduce((sum, job) => sum + job.applicants, 0) / 400) * 100),
                      subtitle: "total received"
                    },
                    {
                      title: "High Priority",
                      value: jobsData.filter(j => j.priority === "high").length.toString(),
                      change: "+2",
                      trend: "up" as const,
                      icon: <AlertTriangle className="h-4 w-4 text-amber-400" />,
                      goal: 10,
                      progress: Math.round((jobsData.filter(j => j.priority === "high").length / 10) * 100),
                      subtitle: "urgent roles"
                    },
                    {
                      title: "Avg. Time",
                      value: "18d",
                      change: "-2d",
                      trend: "up" as const,
                      icon: <Activity className="h-4 w-4 text-emerald-400" />,
                      goal: 100,
                      progress: 82,
                      subtitle: "to fill"
                    }
                  ].map((stat, i) => (
                    <AnimatedElement key={i} animation="slide-up" delay={i * 100}>
                      <div className="bg-slate-800/50 rounded-lg border border-slate-700/50 p-3 hover:border-fuchsia-500/50 transition-all duration-300 group backdrop-blur-sm min-h-[120px]">
                        <div className="flex justify-between items-start mb-2">
                          <div className="text-xs text-slate-400 font-medium">{stat.title}</div>
                          <div className="flex-shrink-0">
                            {stat.icon}
                          </div>
                        </div>
                        
                        <div className="flex flex-col justify-between h-full">
                          <div>
                            <div className="text-xl font-bold text-slate-100 mb-1 flex items-baseline gap-2">
                              {stat.value}
                              <span className="text-xs text-slate-500">/ {stat.goal}</span>
                            </div>
                            <div className="text-xs text-slate-500 mb-2">{stat.subtitle}</div>
                            
                            {/* Progress Bar */}
                            <div className="w-full bg-slate-700/50 rounded-full h-1.5 mb-2">
                              <div 
                                className="bg-gradient-to-r from-fuchsia-500 to-purple-500 h-1.5 rounded-full transition-all duration-500"
                                style={{ width: `${Math.min(stat.progress, 100)}%` }}
                              />
                            </div>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="text-xs font-medium flex items-center gap-1 text-green-400">
                              <TrendingUp className="h-3 w-3" />
                              {stat.change}
                            </div>
                            <div className="text-xs text-slate-500">{Math.min(stat.progress, 100)}%</div>
                          </div>
                        </div>

                        {/* Hover effect */}
                        <div className="mt-2 pt-2 border-t border-slate-700/50 text-xs text-fuchsia-400 flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                          View details
                          <ArrowRight className="ml-1 h-3 w-3" />
                        </div>
                      </div>
                    </AnimatedElement>
                  ))}
                </div>

                {/* Jobs Table */}
                <div className="bg-slate-900/30 rounded-lg border border-slate-700/50 overflow-hidden">
                  <div className="p-4 border-b border-slate-700/50">
                    <div className="flex justify-between items-center mb-3">
                      <div className="font-medium text-slate-100 text-sm">
                        All Job Postings ({filteredJobs.length})
                      </div>
                      <div className="flex items-center gap-2">
                        {/* Job Filter */}
                        <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                          {[
                            { key: "all", label: "All", count: jobsData.length },
                            { key: "active", label: "Active", count: jobsData.filter(j => j.status === "active").length },
                            { key: "paused", label: "Paused", count: jobsData.filter(j => j.status === "paused").length },
                            { key: "engineering", label: "Engineering", count: jobsData.filter(j => j.department === "Engineering").length }
                          ].map((filter) => (
                            <button
                              key={filter.key}
                              onClick={() => setJobFilter(filter.key)}
                              className={`px-2 py-1 rounded text-xs transition-all ${
                                jobFilter === filter.key 
                                  ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                                  : 'text-slate-400 hover:text-slate-300'
                              }`}
                            >
                              {filter.label} ({filter.count})
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    {/* Search Bar */}
                    <div className="mb-3">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-400" />
                        <Input
                          placeholder="Search jobs by title, department, or location..."
                          value={jobSearchTerm}
                          onChange={(e) => setJobSearchTerm(e.target.value)}
                          className="pl-9 h-8 bg-slate-800/50 border-slate-700/50 text-slate-200 placeholder:text-slate-400 text-sm"
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    {/* Enhanced Job Grid */}
                    {filteredJobs.length === 0 ? (
                      <div className="text-center py-12 text-slate-400">
                        <Briefcase className="h-16 w-16 mx-auto mb-4 opacity-50" />
                        <div className="text-lg font-medium mb-2">No jobs found</div>
                        <div className="text-sm text-slate-500">
                          {jobSearchTerm ? "Try adjusting your search terms" : "Try changing your filter"}
                        </div>
                      </div>
                    ) : (
                      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                        {filteredJobs.map((job) => (
                          <div key={job.id} className="relative bg-slate-900/40 rounded-xl p-5 border border-slate-700/40 hover:border-fuchsia-500/40 transition-all duration-300 group hover:shadow-lg hover:shadow-fuchsia-500/10 backdrop-blur-sm">
                            {/* Job Header */}
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex-1">
                                <h4 className="font-semibold text-slate-100 text-base mb-2 group-hover:text-fuchsia-300 transition-colors">
                                  {job.title}
                                </h4>
                                <div className="flex items-center gap-2 mb-2">
                                  <span className="text-sm text-slate-400">{job.department}</span>
                                  <span className="w-1 h-1 bg-slate-600 rounded-full"></span>
                                  <span className="text-sm text-slate-400">{job.location}</span>
                                </div>
                              </div>
                              
                              {/* Priority Badge */}
                              <span
                                className={`px-2 py-1 rounded-full text-xs font-medium ${
                                  job.priority === "high"
                                    ? "bg-red-500/20 text-red-300 border border-red-500/30"
                                    : job.priority === "medium"
                                      ? "bg-yellow-500/20 text-yellow-300 border border-yellow-500/30"
                                      : "bg-slate-500/20 text-slate-300 border border-slate-500/30"
                                }`}
                              >
                                {job.priority}
                              </span>
                            </div>

                            {/* Job Details Grid */}
                            <div className="space-y-3 mb-4">
                              <div className="flex items-center justify-between">
                                <span className="text-xs text-slate-500 uppercase tracking-wide">Type</span>
                                <span className="text-sm text-slate-300">{job.type}</span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className="text-xs text-slate-500 uppercase tracking-wide">Level</span>
                                <span className="text-sm text-slate-300">{job.level}</span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className="text-xs text-slate-500 uppercase tracking-wide">Salary</span>
                                <span className="text-sm text-fuchsia-400 font-medium">{job.salary}</span>
                              </div>
                            </div>

                            {/* Applications Counter */}
                            <div className="bg-slate-800/50 rounded-lg p-3 mb-4 border border-slate-700/30">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Users className="h-4 w-4 text-fuchsia-400" />
                                  <span className="text-sm text-slate-300">Applications</span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <span className="text-lg font-bold text-fuchsia-400">{job.applicants}</span>
                                  <span className="text-xs text-slate-500">total</span>
                                </div>
                              </div>
                              <div className="mt-2 flex items-center justify-between text-xs">
                                <span className="text-slate-500">Posted {job.posted}</span>
                                <span
                                  className={`px-2 py-1 rounded-full ${
                                    job.status === "active"
                                      ? "bg-emerald-500/20 text-emerald-300"
                                      : "bg-amber-500/20 text-amber-300"
                                  }`}
                                >
                                  {job.status}
                                </span>
                              </div>
                            </div>

                            {/* Skills Preview */}
                            <div className="mb-4">
                              <div className="text-xs text-slate-500 uppercase tracking-wide mb-2">Key Requirements</div>
                              <div className="flex flex-wrap gap-1">
                                {job.requirements.slice(0, 2).map((req, i) => (
                                  <span key={i} className="px-2 py-1 bg-slate-700/40 rounded text-xs text-slate-300 border border-slate-600/30">
                                    {req}
                                  </span>
                                ))}
                                {job.requirements.length > 2 && (
                                  <span className="px-2 py-1 bg-slate-700/20 rounded text-xs text-slate-500 border border-slate-600/20">
                                    +{job.requirements.length - 2} more
                                  </span>
                                )}
                              </div>
                            </div>

                            {/* Action Buttons */}
                            <div className="flex items-center gap-2">
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="flex-1 h-8 text-xs text-fuchsia-400 hover:text-fuchsia-300 hover:bg-fuchsia-500/10 border border-fuchsia-500/20 hover:border-fuchsia-500/40 transition-all" 
                                onClick={() => handleJobAction(job.id, "view")}
                              >
                                <Eye className="h-3 w-3 mr-1" />
                                View Details
                              </Button>
                              
                              <div className="flex items-center gap-1">
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-slate-400 hover:text-blue-400 hover:bg-blue-500/10 transition-all" 
                                  title="Edit Job"
                                  onClick={() => handleJobAction(job.id, "edit")}
                                >
                                  <Settings className="h-3 w-3" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="h-8 w-8 p-0 text-slate-400 hover:text-amber-400 hover:bg-amber-500/10 transition-all" 
                                  title={job.status === "active" ? "Pause Job" : "Activate Job"}
                                  onClick={() => handleJobAction(job.id, "pause")}
                                >
                                  {job.status === "active" ? (
                                    <RefreshCw className="h-3 w-3" />
                                  ) : (
                                    <CheckCircle2 className="h-3 w-3" />
                                  )}
                                </Button>
                              </div>
                            </div>

                            {/* Hover Glow Effect */}
                            <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-fuchsia-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </AnimatedElement>
        )
      case "calendar":
        return (
          <AnimatedElement animation="fade-in">
            <div className="space-y-3">
              {/* Calendar Management Header */}
              <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-slate-100">Interview Calendar</h3>
                  <div className="flex items-center gap-2">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="text-slate-300 border-slate-700/50 bg-slate-800/50 hover:bg-slate-700/50 h-8 text-xs"
                      onClick={() => {
                        setNotifications(prev => [
                          { id: Date.now(), type: "application", message: "📅 Calendar exported to CSV", time: "Just now", urgent: false },
                          ...prev.slice(0, 4)
                        ])
                      }}
                    >
                      <Download className="h-3 w-3 mr-1" /> Export
                    </Button>
                    <Button 
                      size="sm" 
                      className="bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                      onClick={() => setShowScheduleInterviewModal(true)}
                    >
                      Schedule Interview
                    </Button>
                  </div>
                </div>

                {/* Enhanced Calendar Statistics */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
                  {[
                    {
                      title: "Today's Interviews",
                      value: "5",
                      change: "+2",
                      trend: "up" as const,
                      icon: <Calendar className="h-4 w-4 text-fuchsia-400" />,
                      goal: 8,
                      progress: 62,
                      subtitle: "scheduled"
                    },
                    {
                      title: "This Week",
                      value: "24",
                      change: "+6",
                      trend: "up" as const,
                      icon: <Users className="h-4 w-4 text-blue-400" />,
                      goal: 30,
                      progress: 80,
                      subtitle: "total meetings"
                    },
                    {
                      title: "Completion Rate",
                      value: "94%",
                      change: "+3%",
                      trend: "up" as const,
                      icon: <CheckCircle2 className="h-4 w-4 text-emerald-400" />,
                      goal: 100,
                      progress: 94,
                      subtitle: "attendance"
                    },
                    {
                      title: "Avg Duration",
                      value: "45m",
                      change: "-5m",
                      trend: "up" as const,
                      icon: <Activity className="h-4 w-4 text-amber-400" />,
                      goal: 100,
                      progress: 75,
                      subtitle: "per interview"
                    }
                  ].map((stat, i) => (
                    <AnimatedElement key={i} animation="slide-up" delay={i * 100}>
                      <div className="bg-slate-800/50 rounded-lg border border-slate-700/50 p-3 hover:border-fuchsia-500/50 transition-all duration-300 group backdrop-blur-sm min-h-[120px]">
                        <div className="flex justify-between items-start mb-2">
                          <div className="text-xs text-slate-400 font-medium">{stat.title}</div>
                          <div className="flex-shrink-0">
                            {stat.icon}
                          </div>
                        </div>
                        
                        <div className="flex flex-col justify-between h-full">
                          <div>
                            <div className="text-xl font-bold text-slate-100 mb-1 flex items-baseline gap-2">
                              {stat.value}
                              <span className="text-xs text-slate-500">/ {stat.goal}</span>
                            </div>
                            <div className="text-xs text-slate-500 mb-2">{stat.subtitle}</div>
                            
                            {/* Progress Bar */}
                            <div className="w-full bg-slate-700/50 rounded-full h-1.5 mb-2">
                              <div 
                                className="bg-gradient-to-r from-fuchsia-500 to-purple-500 h-1.5 rounded-full transition-all duration-500"
                                style={{ width: `${Math.min(stat.progress, 100)}%` }}
                              />
                            </div>
                          </div>
                          
                          <div className="flex justify-between items-center">
                            <div className="text-xs font-medium flex items-center gap-1 text-green-400">
                              <TrendingUp className="h-3 w-3" />
                              {stat.change}
                            </div>
                            <div className="text-xs text-slate-500">{Math.min(stat.progress, 100)}%</div>
                          </div>
                        </div>

                        {/* Hover effect */}
                        <div className="mt-2 pt-2 border-t border-slate-700/50 text-xs text-fuchsia-400 flex items-center opacity-0 group-hover:opacity-100 transition-opacity">
                          View details
                          <ArrowRight className="ml-1 h-3 w-3" />
                        </div>
                      </div>
                    </AnimatedElement>
                  ))}
                </div>

                {/* Calendar View Controls */}
                <div className="flex justify-between items-center mb-4">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium text-slate-100 text-sm">December 2024</h4>
                    <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                      {[
                        { key: "month", label: "Month" },
                        { key: "week", label: "Week" },
                        { key: "day", label: "Day" }
                      ].map((view) => (
                        <button
                          key={view.key}
                          onClick={() => setCalendarView(view.key)}
                          className={`px-2 py-1 rounded text-xs transition-all ${
                            calendarView === view.key 
                              ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                              : 'text-slate-400 hover:text-slate-300'
                          }`}
                        >
                          {view.label}
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    {/* Calendar Filter */}
                    <div className="flex items-center gap-1 bg-slate-700/50 rounded-md p-1">
                      {[
                        { key: "all", label: "All", count: 5 },
                        { key: "interviews", label: "Interviews", count: 4 },
                        { key: "meetings", label: "Meetings", count: 1 }
                      ].map((filter) => (
                        <button
                          key={filter.key}
                          onClick={() => setCalendarFilter(filter.key)}
                          className={`px-2 py-1 rounded text-xs transition-all ${
                            calendarFilter === filter.key 
                              ? 'bg-fuchsia-500/20 text-fuchsia-300' 
                              : 'text-slate-400 hover:text-slate-300'
                          }`}
                        >
                          {filter.label} ({filter.count})
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Enhanced Calendar Grid */}
                <div className="bg-slate-900/30 rounded-lg border border-slate-700/50 overflow-hidden mb-6">
                  <div className="grid grid-cols-7 gap-0 border-b border-slate-700/50">
                    {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
                      <div key={day} className="text-center text-xs font-medium text-slate-400 py-3 bg-slate-800/30 border-r border-slate-700/30 last:border-r-0">
                        {day}
                      </div>
                    ))}
                  </div>
                  <div className="grid grid-cols-7 gap-0">
                    {Array.from({ length: 35 }).map((_, i) => {
                      const day = i - 2 // Offset to start month on correct day
                      const dayEvents = calendarEvents[day] || []
                      const hasEvent = dayEvents.length > 0
                      const isToday = day === selectedDate
                      const eventCount = dayEvents.length
                      
                      return (
                        <div
                          key={i}
                          className={`
                            h-20 p-2 border-r border-b border-slate-700/30 last:border-r-0 text-xs relative
                            ${day < 1 || day > 30 ? "bg-slate-900/20" : "hover:bg-slate-700/20 cursor-pointer"}
                            ${isToday ? "border-fuchsia-500/50 bg-fuchsia-500/5" : ""}
                          `}
                          onClick={() => day > 0 && day <= 30 && setSelectedDate(day)}
                        >
                          {day > 0 && day <= 30 && (
                            <>
                              <div className={`text-right mb-1 ${isToday ? "font-bold text-fuchsia-400" : "text-slate-300"}`}>
                                {day}
                              </div>
                              {hasEvent && (
                                <div className="space-y-1">
                                  {eventCount === 1 && (
                                    <div className="bg-fuchsia-500/20 text-fuchsia-300 px-1 py-0.5 rounded text-[10px] truncate border border-fuchsia-500/30">
                                      {dayEvents[0].time.split(' ')[0]} {dayEvents[0].candidate.split(' ')[0]}
                                    </div>
                                  )}
                                  {eventCount === 2 && (
                                    <>
                                      <div className="bg-fuchsia-500/20 text-fuchsia-300 px-1 py-0.5 rounded text-[10px] truncate border border-fuchsia-500/30">
                                        {dayEvents[0].time.split(' ')[0]} {dayEvents[0].candidate.split(' ')[0]}
                                      </div>
                                      <div className="bg-blue-500/20 text-blue-300 px-1 py-0.5 rounded text-[10px] truncate border border-blue-500/30">
                                        {dayEvents[1].time.split(' ')[0]} {dayEvents[1].candidate.split(' ')[0]}
                                      </div>
                                    </>
                                  )}
                                  {eventCount === 3 && (
                                    <>
                                      <div className="bg-fuchsia-500/20 text-fuchsia-300 px-1 py-0.5 rounded text-[10px] truncate border border-fuchsia-500/30">
                                        {dayEvents[0].time.split(' ')[0]} {dayEvents[0].candidate.split(' ')[0]}
                                      </div>
                                      <div className="bg-blue-500/20 text-blue-300 px-1 py-0.5 rounded text-[10px] truncate border border-blue-500/30">
                                        {dayEvents[1].time.split(' ')[0]} {dayEvents[1].candidate.split(' ')[0]}
                                      </div>
                                      <div className="bg-emerald-500/20 text-emerald-300 px-1 py-0.5 rounded text-[10px] truncate border border-emerald-500/30">
                                        +1 more
                                      </div>
                                    </>
                                  )}
                                  {eventCount >= 4 && (
                                    <>
                                      <div className="bg-fuchsia-500/20 text-fuchsia-300 px-1 py-0.5 rounded text-[10px] truncate border border-fuchsia-500/30">
                                        {dayEvents[0].time.split(' ')[0]} {dayEvents[0].candidate.split(' ')[0]}
                                      </div>
                                      <div className="bg-blue-500/20 text-blue-300 px-1 py-0.5 rounded text-[10px] truncate border border-blue-500/30">
                                        {dayEvents[1].time.split(' ')[0]} {dayEvents[1].candidate.split(' ')[0]}
                                      </div>
                                      <div className="bg-emerald-500/20 text-emerald-300 px-1 py-0.5 rounded text-[10px] truncate border border-emerald-500/30">
                                        +{eventCount - 2} more
                                      </div>
                                    </>
                                  )}
                                </div>
                              )}
                              {eventCount > 0 && (
                                <div className="absolute top-1 left-1">
                                  <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-pulse"></div>
                                </div>
                              )}
                            </>
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>

                {/* Today's Detailed Schedule */}
                <div className="bg-slate-900/30 rounded-lg border border-slate-700/50 overflow-hidden">
                  <div className="p-4 border-b border-slate-700/50">
                    <div className="flex justify-between items-center">
                      <h4 className="font-medium text-slate-100 text-sm">
                        {selectedDate === 15 ? "Today's Schedule" : `Schedule for December ${selectedDate}`}
                      </h4>
                      <div className="text-xs text-slate-400">
                        {calendarEvents[selectedDate]?.length || 0} events
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-4">
                    {calendarEvents[selectedDate] && calendarEvents[selectedDate].length > 0 ? (
                      <div className="space-y-3">
                        {calendarEvents[selectedDate].map((event, i) => (
                          <div
                            key={i}
                            className="flex items-center gap-3 p-3 bg-slate-900/40 border border-slate-700/40 rounded-lg hover:border-fuchsia-500/40 transition-all group cursor-pointer"
                            onClick={() => {
                              setSelectedEvent(event)
                              setShowEventDetailsModal(true)
                            }}
                          >
                            {/* Time */}
                            <div className="w-20 text-xs font-medium text-slate-400">
                              {event.time}
                            </div>
                            
                            {/* Avatar */}
                            <div className="w-8 h-8 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold">
                              {event.avatar}
                            </div>
                            
                            {/* Event Details */}
                            <div className="flex-1">
                              <div className="font-medium text-slate-200 text-sm group-hover:text-fuchsia-300 transition-colors">
                                {event.candidate}
                              </div>
                              <div className="text-xs text-slate-400">
                                {event.position} • {event.duration}
                              </div>
                            </div>
                            
                            {/* Type & Status */}
                            <div className="flex items-center gap-2">
                              <span
                                className={`px-2 py-1 rounded-full text-xs ${
                                  event.type === "Meeting"
                                    ? "bg-purple-500/20 text-purple-300 border border-purple-500/30"
                                    : event.type === "Technical"
                                      ? "bg-blue-500/20 text-blue-300 border border-blue-500/30"
                                      : event.type === "First Round"
                                        ? "bg-emerald-500/20 text-emerald-300 border border-emerald-500/30"
                                        : event.type === "Second Round"
                                          ? "bg-amber-500/20 text-amber-300 border border-amber-500/30"
                                          : event.type === "Final Round"
                                            ? "bg-purple-500/20 text-purple-300 border border-purple-500/30"
                                            : event.type === "Portfolio Review"
                                              ? "bg-pink-500/20 text-pink-300 border border-pink-500/30"
                                              : "bg-fuchsia-500/20 text-fuchsia-300 border border-fuchsia-500/30"
                                }`}
                              >
                                {event.type}
                              </span>
                              <div
                                className={`w-2 h-2 rounded-full ${
                                  event.status === "confirmed" ? "bg-emerald-400" : "bg-amber-400"
                                }`}
                                title={event.status}
                              />
                            </div>
                            
                            {/* Action Arrow */}
                            <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                              <ArrowRight className="h-4 w-4 text-slate-400" />
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-slate-400">
                        <Calendar className="h-12 w-12 mx-auto mb-3 opacity-50" />
                        <div className="text-sm">No events scheduled</div>
                        <div className="text-xs text-slate-500 mt-1">
                          Click "Schedule Interview" to add an event
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </AnimatedElement>
        )
      case "settings":
        return (
          <AnimatedElement animation="fade-in">
            {/* Settings Header */}
            <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-slate-100">Account Settings</h3>
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center text-white text-xs font-medium">
                    {profileData.avatar}
                  </div>
                  <div className="text-right">
                    <div className="text-sm font-medium text-slate-100">{profileData.fullName}</div>
                    <div className="text-xs text-slate-400">{profileData.jobTitle}</div>
                  </div>
                </div>
              </div>

              {/* Settings Navigation Tabs */}
              <div className="flex flex-wrap gap-1 p-1 bg-slate-900/50 rounded-lg border border-slate-700/30">
                {[
                  { id: "profile", label: "Profile", icon: User },
                  { id: "notifications", label: "Notifications", icon: Bell },
                  { id: "security", label: "Security", icon: Shield },
                  { id: "team", label: "Team", icon: Users },
                  { id: "integrations", label: "Integrations", icon: Zap }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveSettingsTab(tab.id)}
                    className={`flex items-center gap-2 px-3 py-2 rounded-md text-xs font-medium transition-all ${
                      activeSettingsTab === tab.id
                        ? "bg-fuchsia-500/20 text-fuchsia-300 border border-fuchsia-500/30"
                        : "text-slate-400 hover:text-slate-300 hover:bg-slate-700/30"
                    }`}
                  >
                    <tab.icon className="h-3.5 w-3.5" />
                    {tab.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Settings Content */}
            <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
              {activeSettingsTab === "profile" && (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="text-base font-medium text-slate-200">Profile Information</h4>
                    <Button 
                      size="sm" 
                      className="bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                      onClick={() => {
                        setNotifications(prev => [
                          { id: Date.now(), type: "settings", message: "✅ Profile updated successfully", time: "Just now", urgent: false },
                          ...prev.slice(0, 4)
                        ])
                      }}
                    >
                      Save Changes
                    </Button>
                  </div>

                  {/* Profile Picture Section */}
                  <div className="flex items-center gap-4 p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                    <div className="w-16 h-16 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center text-white text-xl font-bold">
                      {profileData.avatar}
                    </div>
                    <div className="flex-1">
                      <h5 className="text-sm font-medium text-slate-200 mb-1">Profile Picture</h5>
                      <p className="text-xs text-slate-400 mb-2">Upload a new avatar or change your display initials</p>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50 h-7 text-xs">
                          Upload Image
                        </Button>
                        <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50 h-7 text-xs">
                          Change Initials
                        </Button>
                      </div>
                    </div>
                  </div>

                  {/* Profile Form */}
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Full Name</label>
                      <Input 
                        value={profileData.fullName} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, fullName: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Email Address</label>
                      <Input 
                        value={profileData.email} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Job Title</label>
                      <Input 
                        value={profileData.jobTitle} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, jobTitle: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Department</label>
                      <Input 
                        value={profileData.department} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, department: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Phone Number</label>
                      <Input 
                        value={profileData.phone} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-1">Location</label>
                      <Input 
                        value={profileData.location} 
                        onChange={(e) => setProfileData(prev => ({ ...prev, location: e.target.value }))}
                        className="bg-slate-900/50 border-slate-700/50 text-slate-200 h-8 text-sm" 
                      />
                    </div>
                  </div>

                  {/* Bio Section */}
                  <div>
                    <label className="block text-xs text-slate-400 mb-1">Bio</label>
                    <textarea 
                      value={profileData.bio}
                      onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}
                      className="w-full bg-slate-900/50 border border-slate-700/50 text-slate-200 text-sm rounded-md p-2 h-20 resize-none"
                      placeholder="Tell us about yourself..."
                    />
                  </div>
                </div>
              )}

              {activeSettingsTab === "notifications" && (
                <div className="space-y-4">
                  <h4 className="text-base font-medium text-slate-200">Notification Preferences</h4>
                  
                  <div className="space-y-4">
                    <div>
                      <h5 className="text-sm font-medium text-slate-300 mb-3">Email Notifications</h5>
                      <div className="space-y-3">
                        {[
                          { key: "newApplications", label: "New candidate applications", desc: "Get notified when new candidates apply" },
                          { key: "interviewReminders", label: "Interview reminders", desc: "Receive reminders 15 minutes before interviews" },
                          { key: "statusUpdates", label: "Candidate status updates", desc: "Updates when candidates move through pipeline stages" },
                          { key: "teamMentions", label: "Team mentions and comments", desc: "When team members mention you in comments" }
                        ].map((pref) => (
                          <div key={pref.key} className="flex items-center justify-between py-2 px-3 bg-slate-900/30 rounded-lg border border-slate-700/30">
                            <div>
                              <div className="text-sm text-slate-300">{pref.label}</div>
                              <div className="text-xs text-slate-500">{pref.desc}</div>
                            </div>
                            <button
                              onClick={() => setNotificationPrefs(prev => ({ ...prev, [pref.key]: !prev[pref.key] }))}
                              className={`w-10 h-5 rounded-full relative transition-colors ${
                                notificationPrefs[pref.key] ? "bg-fuchsia-500" : "bg-slate-600"
                              }`}
                            >
                              <div className={`absolute top-0.5 w-4 h-4 bg-white rounded-full transition-transform ${
                                notificationPrefs[pref.key] ? "right-0.5" : "left-0.5"
                              }`}></div>
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h5 className="text-sm font-medium text-slate-300 mb-3">System Notifications</h5>
                      <div className="space-y-3">
                        {[
                          { key: "weeklyReports", label: "Weekly reports", desc: "Receive weekly analytics and insights" },
                          { key: "marketingEmails", label: "Marketing emails", desc: "Product updates and feature announcements" },
                          { key: "securityAlerts", label: "Security alerts", desc: "Important security-related notifications" },
                          { key: "systemUpdates", label: "System updates", desc: "Maintenance and system update notifications" }
                        ].map((pref) => (
                          <div key={pref.key} className="flex items-center justify-between py-2 px-3 bg-slate-900/30 rounded-lg border border-slate-700/30">
                            <div>
                              <div className="text-sm text-slate-300">{pref.label}</div>
                              <div className="text-xs text-slate-500">{pref.desc}</div>
                            </div>
                            <button
                              onClick={() => setNotificationPrefs(prev => ({ ...prev, [pref.key]: !prev[pref.key] }))}
                              className={`w-10 h-5 rounded-full relative transition-colors ${
                                notificationPrefs[pref.key] ? "bg-fuchsia-500" : "bg-slate-600"
                              }`}
                            >
                              <div className={`absolute top-0.5 w-4 h-4 bg-white rounded-full transition-transform ${
                                notificationPrefs[pref.key] ? "right-0.5" : "left-0.5"
                              }`}></div>
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeSettingsTab === "security" && (
                <div className="space-y-4">
                  <h4 className="text-base font-medium text-slate-200">Security Settings</h4>
                  
                  <div className="space-y-4">
                    {/* Password Section */}
                    <div className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                      <div className="flex items-center justify-between mb-2">
                        <h5 className="text-sm font-medium text-slate-300">Password</h5>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50 h-7 text-xs"
                          onClick={() => setShowChangePasswordModal(true)}
                        >
                          Change Password
                        </Button>
                      </div>
                      <p className="text-xs text-slate-500">Last changed 2 months ago</p>
                    </div>

                    {/* Two-Factor Authentication */}
                    <div className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <h5 className="text-sm font-medium text-slate-300">Two-Factor Authentication</h5>
                          <p className="text-xs text-slate-500">Add an extra layer of security to your account</p>
                        </div>
                        <button
                          onClick={() => setSecuritySettings(prev => ({ ...prev, twoFactorAuth: !prev.twoFactorAuth }))}
                          className={`w-10 h-5 rounded-full relative transition-colors ${
                            securitySettings.twoFactorAuth ? "bg-emerald-500" : "bg-slate-600"
                          }`}
                        >
                          <div className={`absolute top-0.5 w-4 h-4 bg-white rounded-full transition-transform ${
                            securitySettings.twoFactorAuth ? "right-0.5" : "left-0.5"
                          }`}></div>
                        </button>
                      </div>
                      {securitySettings.twoFactorAuth && (
                        <div className="text-xs text-emerald-400">✓ Enabled via Authenticator App</div>
                      )}
                    </div>

                    {/* Active Sessions */}
                    <div className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                      <h5 className="text-sm font-medium text-slate-300 mb-3">Active Sessions</h5>
                      <div className="space-y-2">
                        {[
                          { device: "MacBook Pro", location: "San Francisco, CA", current: true, lastActive: "Now" },
                          { device: "iPhone 14", location: "San Francisco, CA", current: false, lastActive: "2 hours ago" },
                          { device: "Chrome Browser", location: "San Francisco, CA", current: false, lastActive: "1 day ago" }
                        ].map((session, i) => (
                          <div key={i} className="flex items-center justify-between py-2 px-3 bg-slate-800/30 rounded border border-slate-700/20">
                            <div>
                              <div className="text-sm text-slate-300 flex items-center gap-2">
                                {session.device}
                                {session.current && (
                                  <span className="px-2 py-0.5 bg-emerald-500/20 text-emerald-300 text-xs rounded border border-emerald-500/30">
                                    Current
                                  </span>
                                )}
                              </div>
                              <div className="text-xs text-slate-500">{session.location} • {session.lastActive}</div>
                            </div>
                            {!session.current && (
                              <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-400 hover:bg-slate-700/50 h-6 text-xs">
                                Revoke
                              </Button>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeSettingsTab === "team" && (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="text-base font-medium text-slate-200">Team Management</h4>
                    <Button 
                      size="sm" 
                      className="bg-fuchsia-500 hover:bg-fuchsia-600 h-8 text-xs"
                      onClick={() => setShowInviteTeamModal(true)}
                    >
                      Invite Member
                    </Button>
                  </div>

                  <div className="space-y-3">
                    {teamMembers.map((member) => (
                      <div key={member.id} className="flex items-center justify-between p-3 bg-slate-900/30 rounded-lg border border-slate-700/30">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                            {member.avatar}
                          </div>
                          <div>
                            <div className="text-sm font-medium text-slate-200">{member.name}</div>
                            <div className="text-xs text-slate-400">{member.role} • {member.email}</div>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className="text-right">
                            <div className={`text-xs font-medium ${
                              member.status === 'active' ? 'text-emerald-400' : 
                              member.status === 'away' ? 'text-amber-400' : 'text-slate-400'
                            }`}>
                              {member.status}
                            </div>
                            <div className="text-xs text-slate-500">{member.lastActive}</div>
                          </div>
                          <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-400 hover:bg-slate-700/50 h-7 text-xs">
                            Manage
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeSettingsTab === "integrations" && (
                <div className="space-y-4">
                  <h4 className="text-base font-medium text-slate-200">Integrations</h4>
                  
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    {[
                      { name: "Slack", desc: "Get notifications in Slack", connected: true, icon: MessageSquare },
                      { name: "Google Calendar", desc: "Sync interviews with calendar", connected: true, icon: Calendar },
                      { name: "LinkedIn", desc: "Import candidate profiles", connected: false, icon: Briefcase },
                      { name: "Zoom", desc: "Auto-create meeting links", connected: true, icon: Video },
                      { name: "GitHub", desc: "View candidate repositories", connected: false, icon: GitBranch },
                      { name: "Jira", desc: "Create tickets for new hires", connected: false, icon: Target }
                    ].map((integration, i) => (
                      <div key={i} className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-slate-700/50 rounded-lg flex items-center justify-center">
                              <integration.icon className="h-4 w-4 text-slate-300" />
                            </div>
                            <div>
                              <div className="text-sm font-medium text-slate-200">{integration.name}</div>
                              <div className="text-xs text-slate-500">{integration.desc}</div>
                            </div>
                          </div>
                          <Button 
                            variant={integration.connected ? "outline" : "default"}
                            size="sm" 
                            className={integration.connected 
                              ? "border-emerald-500/50 text-emerald-300 hover:bg-emerald-500/10 h-7 text-xs" 
                              : "bg-fuchsia-500 hover:bg-fuchsia-600 h-7 text-xs"
                            }
                          >
                            {integration.connected ? "Connected" : "Connect"}
                          </Button>
                        </div>
                        {integration.connected && (
                          <div className="text-xs text-emerald-400">✓ Active since Nov 2024</div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeSettingsTab === "billing" && (
                <div className="space-y-4">
                  <h4 className="text-base font-medium text-slate-200">Billing & Subscription</h4>
                  
                  <div className="space-y-4">
                    {/* Current Plan */}
                    <div className="p-4 bg-gradient-to-r from-fuchsia-500/10 to-purple-500/10 rounded-lg border border-fuchsia-500/20">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <h5 className="text-sm font-medium text-slate-200">Professional Plan</h5>
                          <p className="text-xs text-slate-400">Up to 50 team members • Advanced analytics</p>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold text-fuchsia-300">$99</div>
                          <div className="text-xs text-slate-400">per month</div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" className="border-fuchsia-500/50 text-fuchsia-300 hover:bg-fuchsia-500/10 h-7 text-xs">
                          Change Plan
                        </Button>
                        <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-400 hover:bg-slate-700/50 h-7 text-xs">
                          View Usage
                        </Button>
                      </div>
                    </div>

                    {/* Payment Method */}
                    <div className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                      <h5 className="text-sm font-medium text-slate-300 mb-3">Payment Method</h5>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-6 bg-gradient-to-r from-blue-500 to-blue-600 rounded text-white text-xs flex items-center justify-center font-bold">
                            VISA
                          </div>
                          <div>
                            <div className="text-sm text-slate-300">•••• •••• •••• 4242</div>
                            <div className="text-xs text-slate-500">Expires 12/2027</div>
                          </div>
                        </div>
                        <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-400 hover:bg-slate-700/50 h-7 text-xs">
                          Update
                        </Button>
                      </div>
                    </div>

                    {/* Recent Invoices */}
                    <div className="p-4 bg-slate-900/30 rounded-lg border border-slate-700/30">
                      <h5 className="text-sm font-medium text-slate-300 mb-3">Recent Invoices</h5>
                      <div className="space-y-2">
                        {[
                          { date: "Dec 1, 2024", amount: "$99.00", status: "Paid" },
                          { date: "Nov 1, 2024", amount: "$99.00", status: "Paid" },
                          { date: "Oct 1, 2024", amount: "$99.00", status: "Paid" }
                        ].map((invoice, i) => (
                          <div key={i} className="flex items-center justify-between py-2 px-3 bg-slate-800/30 rounded border border-slate-700/20">
                            <div>
                              <div className="text-sm text-slate-300">{invoice.date}</div>
                              <div className="text-xs text-slate-500">Professional Plan</div>
                            </div>
                            <div className="flex items-center gap-3">
                              <div className="text-sm text-slate-300">{invoice.amount}</div>
                              <div className="px-2 py-1 bg-emerald-500/20 text-emerald-300 text-xs rounded border border-emerald-500/30">
                                {invoice.status}
                              </div>
                              <Button variant="outline" size="sm" className="border-slate-700/50 text-slate-400 hover:bg-slate-700/50 h-6 text-xs">
                                Download
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </AnimatedElement>
        )
      default:
        return null
    }
  }

  // Add new candidate function
  const handleAddCandidate = () => {
    console.log("Adding new candidate")
    const newCandidate = {
      id: Date.now().toString(),
      name: "New Candidate",
      position: "Software Engineer",
      stage: "applied",
      match: "85%",
      avatar: "NC",
      skills: ["JavaScript", "React", "Node.js"],
      experience: "3 years",
      location: "Remote",
      lastActivity: "Just now",
      date: "Just now",
      email: "new.candidate@email.com",
      phone: "+1 (555) 999-0000"
    }
    
    setCandidatesData(prev => [newCandidate, ...prev])
    setShowAddCandidateModal(false)
    setNotifications(prev => [
      { id: Date.now(), type: "application", message: "➕ New candidate added to pipeline", time: "Just now", urgent: false },
      ...prev.slice(0, 4)
    ])
  }

  // Filter functions
  const handleFilterAction = (filterType: string) => {
    console.log("Filter action:", filterType)
    switch (filterType) {
      case "location":
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: "🌍 Location filter applied", time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "experience":
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: "📊 Experience filter applied", time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      case "skills":
        setNotifications(prev => [
          { id: Date.now(), type: "application", message: "🛠️ Skills filter applied", time: "Just now", urgent: false },
          ...prev.slice(0, 4)
        ])
        break
      default:
        break
    }
    setShowFilterDropdown(false)
  }

  // Export function
  const handleExportCandidates = () => {
    console.log("Exporting candidates:", filteredCandidates.length)
    const exportData = filteredCandidates.map(candidate => ({
      name: candidate.name,
      position: candidate.position,
      stage: candidate.stage,
      match: candidate.match,
      experience: candidate.experience,
      location: candidate.location,
      skills: candidate.skills.join(", "),
      email: candidate.email,
      phone: candidate.phone
    }))
    
    setNotifications(prev => [
      { id: Date.now(), type: "application", message: `📄 Exported ${exportData.length} candidates to CSV`, time: "Just now", urgent: false },
      ...prev.slice(0, 4)
    ])
  }

  // Comprehensive calendar event data
  const [calendarEvents] = useState({
    3: [
      { time: "10:00 AM", candidate: "Sarah Wilson", position: "Marketing Manager", type: "First Round", duration: "45 min", status: "confirmed", avatar: "SW" }
    ],
    5: [
      { time: "02:00 PM", candidate: "David Chen", position: "Backend Developer", type: "Technical", duration: "60 min", status: "confirmed", avatar: "DC" },
      { time: "04:00 PM", candidate: "Team Meeting", position: "Sprint Planning", type: "Meeting", duration: "30 min", status: "confirmed", avatar: "TM" }
    ],
    8: [
      { time: "09:30 AM", candidate: "Emily Rodriguez", position: "Data Scientist", type: "First Round", duration: "45 min", status: "confirmed", avatar: "ER" },
      { time: "11:00 AM", candidate: "Michael Johnson", position: "Product Designer", type: "Portfolio Review", duration: "60 min", status: "confirmed", avatar: "MJ" },
      { time: "03:30 PM", candidate: "Lisa Park", position: "DevOps Engineer", type: "Technical", duration: "45 min", status: "pending", avatar: "LP" }
    ],
    10: [
      { time: "01:00 PM", candidate: "James Thompson", position: "QA Engineer", type: "Second Round", duration: "45 min", status: "confirmed", avatar: "JT" }
    ],
    12: [
      { time: "10:00 AM", candidate: "Team Standup", position: "Weekly Review", type: "Meeting", duration: "30 min", status: "confirmed", avatar: "TS" },
      { time: "02:30 PM", candidate: "Anna Martinez", position: "Content Writer", type: "First Round", duration: "45 min", status: "confirmed", avatar: "AM" }
    ],
    15: [
      { time: "09:00 AM", candidate: "Alex Morgan", position: "UX Designer", type: "First Round", duration: "45 min", status: "confirmed", avatar: "AM" },
      { time: "11:30 AM", candidate: "Jamie Chen", position: "Frontend Dev", type: "Technical", duration: "60 min", status: "confirmed", avatar: "JC" },
      { time: "02:00 PM", candidate: "Taylor Kim", position: "Product Manager", type: "Second Round", duration: "45 min", status: "pending", avatar: "TK" },
      { time: "04:30 PM", candidate: "Casey Smith", position: "Data Analyst", type: "Final Round", duration: "30 min", status: "confirmed", avatar: "CS" },
      { time: "05:30 PM", candidate: "Team Standup", position: "Weekly Review", type: "Meeting", duration: "30 min", status: "confirmed", avatar: "TS" }
    ],
    17: [
      { time: "10:30 AM", candidate: "Robert Lee", position: "Security Engineer", type: "Technical", duration: "60 min", status: "confirmed", avatar: "RL" },
      { time: "03:00 PM", candidate: "Sofia Garcia", position: "UI Designer", type: "Portfolio Review", duration: "45 min", status: "confirmed", avatar: "SG" }
    ],
    19: [
      { time: "09:00 AM", candidate: "Kevin Wang", position: "Machine Learning Engineer", type: "First Round", duration: "45 min", status: "confirmed", avatar: "KW" }
    ],
    22: [
      { time: "11:00 AM", candidate: "Rachel Brown", position: "Project Manager", type: "Second Round", duration: "45 min", status: "confirmed", avatar: "RB" },
      { time: "02:30 PM", candidate: "Daniel Kim", position: "Full Stack Developer", type: "Final Round", duration: "60 min", status: "confirmed", avatar: "DK" }
    ],
    23: [
      { time: "10:00 AM", candidate: "Maya Patel", position: "Business Analyst", type: "Final Round", duration: "45 min", status: "confirmed", avatar: "MP" }
    ],
    26: [
      { time: "09:30 AM", candidate: "Chris Anderson", position: "Cloud Architect", type: "Technical", duration: "60 min", status: "confirmed", avatar: "CA" },
      { time: "01:00 PM", candidate: "Team Meeting", position: "Retrospective", type: "Meeting", duration: "45 min", status: "confirmed", avatar: "TM" },
      { time: "03:30 PM", candidate: "Nina Singh", position: "Sales Engineer", type: "First Round", duration: "45 min", status: "pending", avatar: "NS" }
    ],
    29: [
      { time: "10:00 AM", candidate: "Jordan Taylor", position: "Technical Writer", type: "Final Round", duration: "45 min", status: "confirmed", avatar: "JT" },
      { time: "02:00 PM", candidate: "Onboarding Session", position: "New Hire Orientation", type: "Meeting", duration: "120 min", status: "confirmed", avatar: "OH" }
    ]
  })

  return (
    <>
      {/* Notifications Dropdown - Outside main container to avoid overflow issues */}
      {showNotifications && (
        <div className="fixed inset-0 z-[9999]" onClick={() => setShowNotifications(false)}>
          <div 
            className="absolute right-4 top-16 w-96 bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl animate-in slide-in-from-top-2 duration-200"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="p-4 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-800/30 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center">
                    <Bell className="h-4 w-4 text-white" />
                  </div>
                  <div>
                    <h3 className="text-sm font-semibold text-slate-100">Notifications</h3>
                    <p className="text-xs text-slate-400">{notifications.length} new updates</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-7 w-7 p-0 text-slate-400 hover:text-slate-300 hover:bg-slate-700/50"
                    onClick={() => {
                      setNotifications([])
                      setShowNotifications(false)
                    }}
                    title="Mark all as read"
                  >
                    <CheckCircle2 className="h-3.5 w-3.5" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-7 w-7 p-0 text-slate-400 hover:text-slate-300 hover:bg-slate-700/50"
                    onClick={() => setShowNotifications(false)}
                  >
                    <X className="h-3.5 w-3.5" />
                  </Button>
                </div>
              </div>
            </div>

            {/* Notifications List */}
            <div className="max-h-80 overflow-y-auto">
              {notifications.length === 0 ? (
                <div className="p-8 text-center">
                  <div className="w-16 h-16 bg-slate-800/50 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Bell className="h-8 w-8 text-slate-500" />
                  </div>
                  <p className="text-sm text-slate-400 mb-1">All caught up!</p>
                  <p className="text-xs text-slate-500">No new notifications</p>
                </div>
              ) : (
                <div className="divide-y divide-slate-700/30">
                  {notifications.map((notification, index) => (
                    <div 
                      key={notification.id} 
                      className="p-4 hover:bg-slate-800/30 transition-all duration-200 group relative"
                      style={{ 
                        animationDelay: `${index * 50}ms`,
                        animation: 'slideInLeft 0.3s ease-out forwards'
                      }}
                    >
                      {/* Notification Content */}
                      <div className="flex items-start gap-3">
                        {/* Icon */}
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                          notification.type === 'interview' 
                            ? 'bg-blue-500/20 border border-blue-500/30' :
                          notification.type === 'application' 
                            ? 'bg-emerald-500/20 border border-emerald-500/30' :
                          notification.type === 'goal'
                            ? 'bg-purple-500/20 border border-purple-500/30' :
                            'bg-slate-500/20 border border-slate-500/30'
                        }`}>
                          {notification.type === 'interview' && (
                            <Calendar className="h-4 w-4 text-blue-400" />
                          )}
                          {notification.type === 'application' && (
                            <Users className="h-4 w-4 text-emerald-400" />
                          )}
                          {notification.type === 'goal' && (
                            <Target className="h-4 w-4 text-purple-400" />
                          )}
                          {!['interview', 'application', 'goal'].includes(notification.type) && (
                            <Bell className="h-4 w-4 text-slate-400" />
                          )}
                        </div>

                        {/* Content */}
                        <div className="flex-1 min-w-0">
                          <div className="flex items-start justify-between gap-2">
                            <p className="text-sm text-slate-200 leading-relaxed group-hover:text-slate-100 transition-colors">
                              {notification.message}
                            </p>
                            {notification.urgent && (
                              <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse flex-shrink-0 mt-2"></div>
                            )}
                          </div>
                          <div className="flex items-center justify-between mt-2">
                            <span className="text-xs text-slate-500">{notification.time}</span>
                            <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button
                                variant="ghost"
                                size="sm"
                                className="h-6 px-2 text-xs text-fuchsia-400 hover:bg-fuchsia-500/10"
                                onClick={() => {
                                  setNotifications(prev => prev.filter(n => n.id !== notification.id))
                                }}
                              >
                                Dismiss
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Hover effect line */}
                      <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-gradient-to-b from-fuchsia-500 to-purple-500 opacity-0 group-hover:opacity-100 transition-opacity"></div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Footer */}
            {notifications.length > 0 && (
              <div className="p-4 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
                <div className="flex items-center justify-between">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-xs text-slate-400 hover:text-slate-300 hover:bg-slate-700/50 h-8"
                    onClick={() => {
                      setNotifications([])
                      setShowNotifications(false)
                    }}
                  >
                    <CheckCircle2 className="h-3 w-3 mr-1" />
                    Mark all as read
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-xs text-fuchsia-400 hover:text-fuchsia-300 hover:bg-fuchsia-500/10 h-8"
                    onClick={() => {
                      setShowNotifications(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: "📱 Viewing all notifications in dashboard", time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    View All
                    <ArrowRight className="h-3 w-3 ml-1" />
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      <div
        ref={dashboardRef}
        className={`
          relative rounded-xl overflow-hidden border border-slate-700/50 shadow-xl shadow-slate-900/20 bg-slate-900/95 backdrop-blur-sm
          transition-all duration-500 w-full max-w-full
          ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-8"}
        `}
        style={{ minHeight: '650px' }}
      >
        {/* Dashboard Header */}
        <div className="bg-slate-800/50 p-3 border-b border-slate-700/50 flex items-center justify-between backdrop-blur-sm">
          <div className="flex items-center gap-3">
            <div className="w-2.5 h-2.5 rounded-full bg-red-500"></div>
            <div className="w-2.5 h-2.5 rounded-full bg-yellow-500"></div>
            <div className="w-2.5 h-2.5 rounded-full bg-green-500"></div>
          </div>
          <div className="flex items-center gap-2 bg-slate-900/50 rounded-md px-2 py-1 text-xs text-slate-400 border border-slate-700/50">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span>inclusive.io/dashboard</span>
            <span className="text-green-400">LIVE</span>
          </div>
          <div className="flex items-center gap-2">
            {/* Notifications */}
            <div className="relative">
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0 relative"
                onClick={() => setShowNotifications(!showNotifications)}
              >
                {notifications.some(n => n.urgent) ? (
                  <BellDot className="h-4 w-4 text-fuchsia-400" />
                ) : (
                  <Bell className="h-4 w-4 text-slate-400" />
                )}
                {notifications.length > 0 && (
                  <div className="absolute -top-1 -right-1 w-4 h-4 bg-fuchsia-500 rounded-full flex items-center justify-center text-xs text-white font-bold">
                    {notifications.length}
                  </div>
                )}
              </Button>
            </div>
            
            {/* Refresh Indicator */}
            <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
              <RefreshCw className="h-3 w-3 text-slate-400 animate-spin" />
            </Button>
          </div>
        </div>

        {/* Dashboard Content */}
        <div className="bg-slate-900/50 h-full">
          <div className="grid grid-cols-12 gap-3 p-4 lg:p-6 min-h-[600px]">
            {/* Sidebar */}
            <div className="col-span-12 md:col-span-3 lg:col-span-2 bg-slate-800/50 rounded-lg p-3 flex flex-col gap-3 border border-slate-700/50 backdrop-blur-sm h-full">
              <AnimatedElement animation="slide-in-right" delay={100}>
                <div className="flex items-center gap-2">
                  <div className="w-7 h-7 rounded-full bg-fuchsia-500/20 flex items-center justify-center border border-fuchsia-500/30">
                    <span className="text-fuchsia-300 text-xs">U</span>
                  </div>
                  <div className="text-sm text-slate-300">User</div>
                </div>
              </AnimatedElement>

              <div className="space-y-1 mt-3 flex-1">
                {[
                  { name: "Dashboard", icon: <BarChart3 className="h-3.5 w-3.5" /> },
                  { name: "Candidates", icon: <Users className="h-3.5 w-3.5" /> },
                  { name: "Jobs", icon: <Briefcase className="h-3.5 w-3.5" /> },
                  { name: "Calendar", icon: <Calendar className="h-3.5 w-3.5" /> },
                  { name: "Settings", icon: <Settings className="h-3.5 w-3.5" /> },
                ].map((item, i) => (
                  <AnimatedElement key={i} animation="slide-in-right" delay={200 + i * 50}>
                    <button
                      className={`text-xs p-2 rounded-md w-full flex items-center gap-2 transition-all duration-200 ${
                        activeTab === item.name.toLowerCase()
                          ? "bg-fuchsia-500/20 text-fuchsia-300 border border-fuchsia-500/30"
                          : "text-slate-400 hover:bg-slate-700/50 hover:text-slate-300"
                      }`}
                      onClick={() => setActiveTab(item.name.toLowerCase())}
                    >
                      {item.icon}
                      <span className="hidden sm:inline">{item.name}</span>
                    </button>
                  </AnimatedElement>
                ))}
              </div>
              
              {/* Sidebar footer spacer */}
              <div className="mt-auto pt-3 border-t border-slate-700/50">
                <div className="text-xs text-slate-500 text-center">v2.1.0</div>
              </div>
            </div>

            {/* Main Content */}
          {/* Main Content */}
          <div className="col-span-12 md:col-span-9 lg:col-span-10 space-y-3 h-full flex flex-col">
            {/* Search and Filter */}
            <AnimatedElement animation="slide-up">
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
                <div className="relative w-full sm:w-64">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-slate-400" />
                  <Input
                    placeholder="Search..."
                    className="pl-9 h-8 bg-slate-800/50 border-slate-700/50 text-slate-200 placeholder:text-slate-400 text-sm"
                    onChange={(e) => {
                      // Global search functionality
                      if (e.target.value) {
                        setNotifications(prev => [
                          { id: Date.now(), type: "application", message: `Searching for "${e.target.value}"`, time: "Just now", urgent: false },
                          ...prev.slice(0, 4)
                        ])
                      }
                    }}
                  />
                </div>
                {/* Removed redundant Filter and Add New buttons - each tab has its own contextual buttons */}
              </div>
            </AnimatedElement>

            {/* Tab Content */}
            <div className="flex-1 overflow-hidden">
              {renderDashboardContent()}
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Modals */}
      {/* Candidate Profile Modal */}
      {showCandidateModal && selectedCandidate && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-2xl animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-800/30 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center text-white text-lg font-bold">
                    {selectedCandidate.avatar}
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">{selectedCandidate.name}</h3>
                    <p className="text-slate-400">{selectedCandidate.position}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="text-right">
                    <div className="text-sm font-medium text-fuchsia-400">{selectedCandidate.match} Match</div>
                    <div className="text-xs text-slate-500">{selectedCandidate.stage}</div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                    onClick={() => setShowCandidateModal(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Contact Information</h4>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm">
                        <Mail className="h-4 w-4 text-slate-500" />
                        <span className="text-slate-400">{selectedCandidate.email}</span>
                      </div>
                      <div className="flex items-center gap-2 text-sm">
                        <Phone className="h-4 w-4 text-slate-500" />
                        <span className="text-slate-400">{selectedCandidate.phone}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Experience</h4>
                    <div className="text-sm text-slate-400">{selectedCandidate.experience}</div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Location</h4>
                    <div className="text-sm text-slate-400">{selectedCandidate.location}</div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Skills</h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedCandidate.skills.map((skill: string, i: number) => (
                        <span key={i} className="px-2 py-1 bg-slate-800/50 border border-slate-700/50 rounded text-xs text-slate-300">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Application Status</h4>
                    <div className="space-y-2">
                      <div className="text-sm text-slate-400">Applied: {selectedCandidate.date}</div>
                      <div className="text-sm text-slate-400">Last Activity: {selectedCandidate.lastActivity}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-fuchsia-500 hover:bg-fuchsia-600 text-white"
                    onClick={() => {
                      setShowCandidateModal(false)
                      handleCandidateAction(selectedCandidate.id, "email")
                    }}
                  >
                    <Mail className="h-3 w-3 mr-1" />
                    Send Email
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                    onClick={() => {
                      setShowCandidateModal(false)
                      handleCandidateAction(selectedCandidate.id, "schedule")
                    }}
                  >
                    <Calendar className="h-3 w-3 mr-1" />
                    Schedule Interview
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowCandidateModal(false)}
                >
                  Close
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Email Compose Modal */}
      {showEmailModal && selectedCandidate && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-2xl animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-blue-800/20 to-blue-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center">
                    <Mail className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-100">Compose Email</h3>
                    <p className="text-slate-400 text-sm">Send message to {selectedCandidate.name}</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowEmailModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">To</label>
                <Input 
                  value={selectedCandidate.email} 
                  readOnly 
                  className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Subject</label>
                <Input 
                  defaultValue={`Interview Opportunity - ${selectedCandidate.position}`}
                  className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Message</label>
                <textarea 
                  className="w-full h-32 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder={`Hi ${selectedCandidate.name},\n\nI hope this email finds you well. I wanted to reach out regarding the ${selectedCandidate.position} position at our company.\n\nBased on your profile and experience, I believe you would be an excellent fit for our team. Would you be available for a brief conversation to discuss this opportunity further?\n\nBest regards,\nHiring Team`}
                />
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-blue-500 hover:bg-blue-600 text-white"
                    onClick={() => {
                      setShowEmailModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: `📧 Email sent to ${selectedCandidate.name}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Mail className="h-3 w-3 mr-1" />
                    Send Email
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                  >
                    Save Draft
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowEmailModal(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Schedule Interview Modal */}
      {showScheduleModal && selectedCandidate && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-2xl animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-emerald-800/20 to-emerald-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-emerald-500 to-emerald-600 rounded-full flex items-center justify-center">
                    <Calendar className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-100">Schedule Interview</h3>
                    <p className="text-slate-400 text-sm">Book meeting with {selectedCandidate.name}</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowScheduleModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Interview Type</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>Phone Screening</option>
                    <option>Video Interview</option>
                    <option>In-Person Interview</option>
                    <option>Technical Assessment</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Duration</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>30 minutes</option>
                    <option>45 minutes</option>
                    <option>1 hour</option>
                    <option>1.5 hours</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Date</label>
                  <Input 
                    type="date" 
                    className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Time</label>
                  <Input 
                    type="time" 
                    className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Interviewer(s)</label>
                <Input 
                  placeholder="Select interviewers..."
                  className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Notes</label>
                <textarea 
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder="Add any specific topics or requirements for this interview..."
                />
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-emerald-500 hover:bg-emerald-600 text-white"
                    onClick={() => {
                      setShowScheduleModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "interview", message: `📅 Interview scheduled with ${selectedCandidate.name}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Calendar className="h-3 w-3 mr-1" />
                    Schedule Interview
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                  >
                    Send Calendar Invite
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowScheduleModal(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* More Actions Modal */}
      {showMoreActionsModal && selectedCandidate && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-md animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-purple-800/20 to-purple-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center">
                    <MoreVertical className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-100">More Actions</h3>
                    <p className="text-slate-400 text-sm">{selectedCandidate.name}</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowMoreActionsModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6">
              <div className="space-y-2">
                {[
                  { icon: <Users className="h-4 w-4" />, label: "Send Message", color: "text-blue-400" },
                  { icon: <Target className="h-4 w-4" />, label: "Add to Favorites", color: "text-yellow-400" },
                  { icon: <Download className="h-4 w-4" />, label: "Download Resume", color: "text-green-400" },
                  { icon: <Activity className="h-4 w-4" />, label: "Add Notes", color: "text-purple-400" },
                  { icon: <ArrowRight className="h-4 w-4" />, label: "Move to Different Stage", color: "text-orange-400" },
                  { icon: <Mail className="h-4 w-4" />, label: "Share Profile", color: "text-cyan-400" }
                ].map((action, i) => (
                  <button
                    key={i}
                    className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-slate-800/50 transition-colors text-left"
                    onClick={() => {
                      setShowMoreActionsModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: `✨ ${action.label} - ${selectedCandidate.name}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <div className={`${action.color}`}>
                      {action.icon}
                    </div>
                    <span className="text-slate-300">{action.label}</span>
                    <ArrowRight className="h-3 w-3 text-slate-500 ml-auto" />
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Job Management Modals */}
      {/* Create Job Modal */}
      {showCreateJobModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-fuchsia-800/20 to-fuchsia-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center">
                    <Briefcase className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">Create New Job</h3>
                    <p className="text-slate-400 text-sm">Post a new job opening to attract talent</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowCreateJobModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Basic Information */}
                <div className="space-y-4">
                  <h4 className="text-sm font-medium text-slate-300 mb-3">Basic Information</h4>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Job Title *</label>
                    <Input className="bg-slate-800/50 border-slate-700/50 text-slate-300" placeholder="e.g. Senior Frontend Developer" />
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Department *</label>
                    <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option>Engineering</option>
                      <option>Design</option>
                      <option>Product</option>
                      <option>Marketing</option>
                      <option>Sales</option>
                      <option>Customer Success</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Location *</label>
                    <Input className="bg-slate-800/50 border-slate-700/50 text-slate-300" placeholder="e.g. Remote, San Francisco, New York" />
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs text-slate-400 mb-2">Job Type</label>
                      <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                        <option>Full-time</option>
                        <option>Part-time</option>
                        <option>Contract</option>
                        <option>Internship</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-2">Level</label>
                      <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                        <option>Entry-level</option>
                        <option>Mid-level</option>
                        <option>Senior</option>
                        <option>Lead</option>
                        <option>Principal</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Compensation & Priority */}
                <div className="space-y-4">
                  <h4 className="text-sm font-medium text-slate-300 mb-3">Compensation & Priority</h4>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Salary Range</label>
                    <Input className="bg-slate-800/50 border-slate-700/50 text-slate-300" placeholder="e.g. $80,000 - $120,000" />
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Priority Level</label>
                    <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option>High</option>
                      <option>Medium</option>
                      <option>Low</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Status</label>
                    <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option>Active</option>
                      <option>Paused</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Job Description */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Job Description *</label>
                <textarea 
                  className="w-full h-32 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder="Describe the role, responsibilities, and what makes this position exciting..."
                />
              </div>

              {/* Requirements */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Requirements</label>
                <textarea 
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder="List the key requirements and qualifications (one per line)"
                />
              </div>

              {/* Benefits */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Benefits & Perks</label>
                <textarea 
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder="List the benefits and perks (one per line)"
                />
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-fuchsia-500 hover:bg-fuchsia-600 text-white"
                    onClick={() => {
                      setShowCreateJobModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: "✅ New job posted successfully", time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Briefcase className="h-3 w-3 mr-1" />
                    Post Job
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                  >
                    Save as Draft
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowCreateJobModal(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Job Details Modal */}
      {showJobDetailsModal && selectedJob && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-blue-800/20 to-blue-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center">
                    <Briefcase className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">{selectedJob.title}</h3>
                    <p className="text-slate-400">{selectedJob.department} • {selectedJob.location}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="text-right">
                    <div className="text-sm font-medium text-fuchsia-400">{selectedJob.applicants} Applications</div>
                    <div className="text-xs text-slate-500">Posted {selectedJob.posted}</div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                    onClick={() => setShowJobDetailsModal(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              {/* Job Overview */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="md:col-span-2 space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Job Description</h4>
                    <div className="text-sm text-slate-400 leading-relaxed">
                      {selectedJob.description}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Requirements</h4>
                    <div className="space-y-1">
                      {selectedJob.requirements.map((req: string, i: number) => (
                        <div key={i} className="flex items-center gap-2 text-sm text-slate-400">
                          <CheckCircle2 className="h-3 w-3 text-emerald-400 flex-shrink-0" />
                          {req}
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Benefits & Perks</h4>
                    <div className="space-y-1">
                      {selectedJob.benefits.map((benefit: string, i: number) => (
                        <div key={i} className="flex items-center gap-2 text-sm text-slate-400">
                          <Target className="h-3 w-3 text-fuchsia-400 flex-shrink-0" />
                          {benefit}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50">
                    <h4 className="text-sm font-medium text-slate-300 mb-3">Job Details</h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-slate-500 mb-1">Job Type</div>
                        <div className="text-sm text-slate-300">{selectedJob.type}</div>
                      </div>
                      <div>
                        <div className="text-xs text-slate-500 mb-1">Level</div>
                        <div className="text-sm text-slate-300">{selectedJob.level}</div>
                      </div>
                      <div>
                        <div className="text-xs text-slate-500 mb-1">Salary Range</div>
                        <div className="text-sm text-slate-300">{selectedJob.salary}</div>
                      </div>
                      <div>
                        <div className="text-xs text-slate-500 mb-1">Priority</div>
                        <span
                          className={`px-2 py-1 rounded-full text-xs ${
                            selectedJob.priority === "high"
                              ? "bg-red-500/20 text-red-300 border border-red-500/30"
                              : selectedJob.priority === "medium"
                                ? "bg-yellow-500/20 text-yellow-300 border border-yellow-500/30"
                                : "bg-slate-500/20 text-slate-300 border border-slate-500/30"
                          }`}
                        >
                          {selectedJob.priority} priority
                        </span>
                      </div>
                      <div>
                        <div className="text-xs text-slate-500 mb-1">Status</div>
                        <span
                          className={`px-2 py-1 rounded-full text-xs ${
                            selectedJob.status === "active"
                              ? "bg-emerald-500/20 text-emerald-300 border border-emerald-500/30"
                              : "bg-amber-500/20 text-amber-300 border border-amber-500/30"
                          }`}
                        >
                          {selectedJob.status}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50">
                    <h4 className="text-sm font-medium text-slate-300 mb-3">Application Stats</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Total Applications</span>
                        <span className="text-sm font-medium text-fuchsia-400">{selectedJob.applicants}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">In Review</span>
                        <span className="text-sm font-medium text-blue-400">{Math.floor(selectedJob.applicants * 0.3)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Interviewed</span>
                        <span className="text-sm font-medium text-emerald-400">{Math.floor(selectedJob.applicants * 0.15)}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Offers Extended</span>
                        <span className="text-sm font-medium text-purple-400">{Math.floor(selectedJob.applicants * 0.05)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-blue-500 hover:bg-blue-600 text-white"
                    onClick={() => {
                      setShowJobDetailsModal(false)
                      setShowEditJobModal(true)
                    }}
                  >
                    <Settings className="h-3 w-3 mr-1" />
                    Edit Job
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                    onClick={() => {
                      setShowJobDetailsModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: `👥 Viewing ${selectedJob.applicants} applications for ${selectedJob.title}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Users className="h-3 w-3 mr-1" />
                    View Applications
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowJobDetailsModal(false)}
                >
                  Close
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Job Modal */}
      {showEditJobModal && selectedJob && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-emerald-800/20 to-emerald-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-emerald-500 to-emerald-600 rounded-full flex items-center justify-center">
                    <Settings className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">Edit Job</h3>
                    <p className="text-slate-400 text-sm">Update {selectedJob.title} details</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowEditJobModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Basic Information */}
                <div className="space-y-4">
                  <h4 className="text-sm font-medium text-slate-300 mb-3">Basic Information</h4>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Job Title *</label>
                    <Input defaultValue={selectedJob.title} className="bg-slate-800/50 border-slate-700/50 text-slate-300" />
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Department *</label>
                    <select defaultValue={selectedJob.department} className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option>Engineering</option>
                      <option>Design</option>
                      <option>Product</option>
                      <option>Marketing</option>
                      <option>Sales</option>
                      <option>Customer Success</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Location *</label>
                    <Input defaultValue={selectedJob.location} className="bg-slate-800/50 border-slate-700/50 text-slate-300" />
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs text-slate-400 mb-2">Job Type</label>
                      <select defaultValue={selectedJob.type} className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                        <option>Full-time</option>
                        <option>Part-time</option>
                        <option>Contract</option>
                        <option>Internship</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-xs text-slate-400 mb-2">Level</label>
                      <select defaultValue={selectedJob.level} className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                        <option>Entry-level</option>
                        <option>Mid-level</option>
                        <option>Senior</option>
                        <option>Lead</option>
                        <option>Principal</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Compensation & Priority */}
                <div className="space-y-4">
                  <h4 className="text-sm font-medium text-slate-300 mb-3">Compensation & Priority</h4>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Salary Range</label>
                    <Input defaultValue={selectedJob.salary} className="bg-slate-800/50 border-slate-700/50 text-slate-300" />
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Priority Level</label>
                    <select defaultValue={selectedJob.priority} className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option value="high">High</option>
                      <option value="medium">Medium</option>
                      <option value="low">Low</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs text-slate-400 mb-2">Status</label>
                    <select defaultValue={selectedJob.status} className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                      <option value="active">Active</option>
                      <option value="paused">Paused</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Job Description */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Job Description *</label>
                <textarea 
                  defaultValue={selectedJob.description}
                  className="w-full h-32 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                />
              </div>

              {/* Requirements */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Requirements</label>
                <textarea 
                  defaultValue={selectedJob.requirements.join('\n')}
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                />
              </div>

              {/* Benefits */}
              <div>
                <label className="block text-xs text-slate-400 mb-2">Benefits & Perks</label>
                <textarea 
                  defaultValue={selectedJob.benefits.join('\n')}
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                />
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-emerald-500 hover:bg-emerald-600 text-white"
                    onClick={() => {
                      setShowEditJobModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "application", message: `✅ ${selectedJob.title} updated successfully`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <CheckCircle2 className="h-3 w-3 mr-1" />
                    Save Changes
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                    onClick={() => {
                      setShowEditJobModal(false)
                      setShowJobDetailsModal(true)
                    }}
                  >
                    Preview
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowEditJobModal(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Calendar Modals */}
      {/* Schedule Interview Modal */}
      {showScheduleInterviewModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-2xl animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-fuchsia-800/20 to-fuchsia-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center">
                    <Calendar className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">Schedule Interview</h3>
                    <p className="text-slate-400 text-sm">Book a new interview session</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                  onClick={() => setShowScheduleInterviewModal(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Candidate</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>Alex Morgan - UX Designer</option>
                    <option>Jamie Chen - Frontend Developer</option>
                    <option>Taylor Kim - Product Manager</option>
                    <option>Casey Smith - Data Analyst</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Interview Type</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>Phone Screening</option>
                    <option>Video Interview</option>
                    <option>Technical Assessment</option>
                    <option>Final Round</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Date</label>
                  <Input 
                    type="date" 
                    className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                    defaultValue="2024-12-15"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Time</label>
                  <Input 
                    type="time" 
                    className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                    defaultValue="14:00"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Duration</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>30 minutes</option>
                    <option>45 minutes</option>
                    <option>1 hour</option>
                    <option>1.5 hours</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">Interviewer</label>
                  <select className="w-full p-2 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300">
                    <option>Sarah Wilson - Senior Manager</option>
                    <option>Mike Johnson - Tech Lead</option>
                    <option>Lisa Chen - Product Director</option>
                    <option>David Brown - HR Manager</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Meeting Link</label>
                <Input 
                  placeholder="https://meet.google.com/xyz-abc-def"
                  className="bg-slate-800/50 border-slate-700/50 text-slate-300"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">Notes</label>
                <textarea 
                  className="w-full h-24 p-3 bg-slate-800/50 border border-slate-700/50 rounded-md text-slate-300 placeholder:text-slate-500 resize-none"
                  placeholder="Add any specific topics, requirements, or instructions for this interview..."
                />
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-fuchsia-500 hover:bg-fuchsia-600 text-white"
                    onClick={() => {
                      setShowScheduleInterviewModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "interview", message: "📅 Interview scheduled successfully", time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Calendar className="h-3 w-3 mr-1" />
                    Schedule Interview
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                  >
                    Send Calendar Invite
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowScheduleInterviewModal(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Event Details Modal */}
      {showEventDetailsModal && selectedEvent && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-[9999] flex items-center justify-center p-4">
          <div className="bg-slate-900/95 border border-slate-700/50 rounded-xl shadow-2xl backdrop-blur-xl w-full max-w-2xl animate-in zoom-in-95 duration-200">
            {/* Header */}
            <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-blue-800/20 to-blue-800/10 rounded-t-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-fuchsia-500 to-purple-500 rounded-full flex items-center justify-center text-white text-lg font-bold">
                    {selectedEvent.avatar}
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-slate-100">{selectedEvent.candidate}</h3>
                    <p className="text-slate-400">{selectedEvent.position} • {selectedEvent.type}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="text-right">
                    <div className="text-sm font-medium text-fuchsia-400">{selectedEvent.time}</div>
                    <div className="text-xs text-slate-500">{selectedEvent.duration}</div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 text-slate-400 hover:text-slate-300"
                    onClick={() => setShowEventDetailsModal(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Interview Details</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Type</span>
                        <span className="text-sm text-slate-300">{selectedEvent.type}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Duration</span>
                        <span className="text-sm text-slate-300">{selectedEvent.duration}</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-slate-500">Status</span>
                        <span
                          className={`px-2 py-1 rounded-full text-xs ${
                            selectedEvent.status === "confirmed"
                              ? "bg-emerald-500/20 text-emerald-300 border border-emerald-500/30"
                              : "bg-amber-500/20 text-amber-300 border border-amber-500/30"
                          }`}
                        >
                          {selectedEvent.status}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Meeting Info</h4>
                    <div className="space-y-2">
                      <div className="text-sm text-slate-400">
                        📹 Video Call: meet.google.com/xyz-abc-def
                      </div>
                      <div className="text-sm text-slate-400">
                        👤 Interviewer: Sarah Wilson
                      </div>
                      <div className="text-sm text-slate-400">
                        📧 Email: sarah.wilson@company.com
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Candidate Profile</h4>
                    <div className="space-y-2">
                      <div className="text-sm text-slate-400">
                        📧 {selectedEvent.candidate.toLowerCase().replace(' ', '.')}@email.com
                      </div>
                      <div className="text-sm text-slate-400">
                        📱 +1 (555) 123-4567
                      </div>
                      <div className="text-sm text-slate-400">
                        🎯 Match Score: 92%
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-slate-300 mb-2">Preparation Notes</h4>
                    <div className="text-sm text-slate-400 leading-relaxed">
                      Review candidate's portfolio and previous work samples. Focus on UX design process and problem-solving approach.
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="text-sm font-medium text-slate-300 mb-2">Interview Agenda</h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-slate-400">
                    <CheckCircle2 className="h-4 w-4 text-emerald-400" />
                    Introduction & Background (10 min)
                  </div>
                  <div className="flex items-center gap-2 text-sm text-slate-400">
                    <CheckCircle2 className="h-4 w-4 text-emerald-400" />
                    Portfolio Review (20 min)
                  </div>
                  <div className="flex items-center gap-2 text-sm text-slate-400">
                    <CheckCircle2 className="h-4 w-4 text-emerald-400" />
                    Design Challenge Discussion (10 min)
                  </div>
                  <div className="flex items-center gap-2 text-sm text-slate-400">
                    <CheckCircle2 className="h-4 w-4 text-emerald-400" />
                    Q&A Session (5 min)
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 border-t border-slate-700/50 bg-slate-800/30 rounded-b-xl">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    className="bg-blue-500 hover:bg-blue-600 text-white"
                    onClick={() => {
                      setShowEventDetailsModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "interview", message: `📞 Joining interview with ${selectedEvent.candidate}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Calendar className="h-3 w-3 mr-1" />
                    Join Meeting
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-slate-700/50 text-slate-300 hover:bg-slate-700/50"
                    onClick={() => {
                      setShowEventDetailsModal(false)
                      setNotifications(prev => [
                        { id: Date.now(), type: "interview", message: `✏️ Editing interview with ${selectedEvent.candidate}`, time: "Just now", urgent: false },
                        ...prev.slice(0, 4)
                      ])
                    }}
                  >
                    <Settings className="h-3 w-3 mr-1" />
                    Edit Event
                  </Button>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-slate-400 hover:text-slate-300"
                  onClick={() => setShowEventDetailsModal(false)}
                >
                  Close
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Today's Schedule */}
      <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 backdrop-blur-sm">
        <div className="flex items-center justify-between mb-3">
          <h4 className="text-base font-medium text-slate-100">
            {selectedDate === 15 ? "Today's Schedule" : `Schedule for December ${selectedDate}`}
          </h4>
          <div className="text-xs text-slate-400">
            {calendarEvents[selectedDate]?.length || 0} events
          </div>
        </div>
        <div className="space-y-2">
          {calendarEvents[selectedDate] && calendarEvents[selectedDate].length > 0 ? (
            calendarEvents[selectedDate].map((event, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg border border-slate-600/30 hover:bg-slate-700/50 transition-colors">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-fuchsia-500 to-fuchsia-600 rounded-full flex items-center justify-center text-white text-xs font-medium">
                    {event.avatar}
                  </div>
                  <div>
                    <div className="text-sm font-medium text-slate-100">{event.candidate}</div>
                    <div className="text-xs text-slate-400">{event.position}</div>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="text-right">
                    <div className="text-sm text-slate-300">{event.time}</div>
                    <div className="text-xs text-slate-500">{event.duration}</div>
                  </div>
                  <div className={`px-2 py-1 rounded text-xs font-medium ${
                    event.type === 'Technical' ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30' :
                    event.type === 'First Round' ? 'bg-emerald-500/20 text-emerald-300 border border-emerald-500/30' :
                    event.type === 'Second Round' ? 'bg-amber-500/20 text-amber-300 border border-amber-500/30' :
                    event.type === 'Final Round' ? 'bg-purple-500/20 text-purple-300 border border-purple-500/30' :
                    event.type === 'Portfolio Review' ? 'bg-pink-500/20 text-pink-300 border border-pink-500/30' :
                    'bg-slate-500/20 text-slate-300 border border-slate-500/30'
                  }`}>
                    {event.type}
                  </div>
                  <div className={`w-2 h-2 rounded-full ${
                    event.status === 'confirmed' ? 'bg-emerald-400' :
                    event.status === 'pending' ? 'bg-amber-400' :
                    'bg-slate-400'
                  }`}></div>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-8 text-slate-400">
              <div className="w-12 h-12 bg-slate-700/50 rounded-full flex items-center justify-center mx-auto mb-2">
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <p className="text-sm">No events scheduled for this day</p>
            </div>
          )}
        </div>
      </div>
    </div>
    </>
  )
} 