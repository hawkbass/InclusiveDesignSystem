"use client"

import { useState, useEffect, useCallback, useMemo } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Slider } from "@/components/ui/slider"
import { Progress } from "@/components/ui/progress"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Separator } from "@/components/ui/separator"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import {
  Hexagon,
  Filter,
  Plus,
  Download,
  Eye,
  Edit,
  MoreHorizontal,
  Calendar,
  Clock,
  MapPin,
  DollarSign,
  Star,
  Users,
  Briefcase,
  CheckCircle2,
  AlertCircle,
  Info,
  AlertTriangle,
  Mail,
  Phone,
  Building,
  GraduationCapIcon as Cap,
  Award,
  Target,
  Zap,
  Share,
  Upload,
  Settings,
  Bell,
  User,
  Home,
  BarChart3,
  FileText,
  MessageSquare,
  Video,
  ThumbsUp,
  ThumbsDown,
  ChevronRight,
  ArrowRight,
  ArrowLeft,
  RefreshCw,
  X,
  Check,
  HelpCircle,
  ImageIcon,
  Code,
  Search,
  Copy,
  ExternalLink,
  Sparkles,
  Palette,
  Layout,
  Grid3X3,
  Menu,
  Moon,
  Sun,
  BookOpen,
  Component,
  Layers,
  Play,
  Heart,
  Archive,
  Bookmark,
  Loader2,
  Command,
  Save,
  Maximize2,
  Minimize2,
  RotateCcw,
  Trash2,
  Grid,
} from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { UnifiedSidebar } from "@/components/ui/unified-sidebar"

export default function ComponentsPage() {
  const [mounted, setMounted] = useState(false)
  const [activeTab, setActiveTab] = useState("recruitment")
  const [searchQuery, setSearchQuery] = useState("")
  const [animationSpeed, setAnimationSpeed] = useState([1])
  const [currentTheme, setCurrentTheme] = useState("dark")
  const [filterOpen, setFilterOpen] = useState(false)
  const [copiedCode, setCopiedCode] = useState("")
  const [favorites, setFavorites] = useState<Set<string>>(new Set())
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid")
  const [isLoading, setIsLoading] = useState(true)
  const [sortBy, setSortBy] = useState<"name" | "category" | "recent">("name")

  useEffect(() => {
    setMounted(true)
    // Simulate loading time for better UX
    const timer = setTimeout(() => setIsLoading(false), 800)
    return () => clearTimeout(timer)
  }, [])

  // Apply animation speed to document with performance optimization
  useEffect(() => {
    if (mounted) {
      const speed = Math.max(0.1, Math.min(3, animationSpeed[0])) // Clamp values
      document.documentElement.style.setProperty('--animation-speed', `${1 / speed}s`)
    }
  }, [animationSpeed, mounted])

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Cmd/Ctrl + K for search focus
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        const searchInput = document.querySelector('input[placeholder="Search components..."]') as HTMLInputElement
        searchInput?.focus()
      }
      
      // Escape to clear search
      if (e.key === 'Escape' && searchQuery) {
        setSearchQuery("")
      }
      
      // Arrow keys for tab navigation
      if (e.key === 'ArrowRight' && e.altKey) {
        e.preventDefault()
        const currentIndex = filteredTabs.findIndex(tab => tab.id === activeTab)
        const nextIndex = (currentIndex + 1) % filteredTabs.length
        setActiveTab(filteredTabs[nextIndex].id)
      }
      
      if (e.key === 'ArrowLeft' && e.altKey) {
        e.preventDefault()
        const currentIndex = filteredTabs.findIndex(tab => tab.id === activeTab)
        const prevIndex = currentIndex === 0 ? filteredTabs.length - 1 : currentIndex - 1
        setActiveTab(filteredTabs[prevIndex].id)
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [searchQuery, activeTab])

  // Optimized copy handler with better feedback
  const handleCopyCode = useCallback(async (code: string, id: string) => {
    try {
      await navigator.clipboard.writeText(code)
      setCopiedCode(id)
      setTimeout(() => setCopiedCode(""), 2000)
      
      // Optional: Add toast notification here
    } catch (err) {
      console.error('Failed to copy code:', err)
      // Fallback for older browsers
      const textArea = document.createElement('textarea')
      textArea.value = code
      document.body.appendChild(textArea)
      textArea.select()
      document.execCommand('copy')
      document.body.removeChild(textArea)
      setCopiedCode(id)
      setTimeout(() => setCopiedCode(""), 2000)
    }
  }, [])

  // Toggle favorites
  const toggleFavorite = useCallback((id: string) => {
    setFavorites(prev => {
      const newFavorites = new Set(prev)
      if (newFavorites.has(id)) {
        newFavorites.delete(id)
      } else {
        newFavorites.add(id)
      }
      return newFavorites
    })
  }, [])

  // Memoized filtered tabs for performance
  const filteredTabs = useMemo(() => [
    { id: "recruitment", label: "Recruitment", icon: Users, count: 24 },
    { id: "forms", label: "Forms", icon: FileText, count: 18 },
    { id: "navigation", label: "Navigation", icon: Menu, count: 12 },
    { id: "feedback", label: "Feedback", icon: MessageSquare, count: 8 },
    { id: "data", label: "Data Display", icon: BarChart3, count: 15 },
    { id: "layout", label: "Layout", icon: Layout, count: 10 },
    { id: "media", label: "Media", icon: ImageIcon, count: 6 },
    { id: "utility", label: "Utility", icon: Settings, count: 9 },
    { id: "favorites", label: "Favorites", icon: Heart, count: favorites.size }
  ], [favorites.size])

  if (!mounted) {
    return (
      <div className="flex min-h-screen bg-background">
        <UnifiedSidebar animationSpeed={animationSpeed} />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin text-fuchsia-400 mx-auto mb-4" />
            <p className="text-slate-400">Loading design system...</p>
          </div>
        </div>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="flex min-h-screen bg-background">
        <UnifiedSidebar animationSpeed={animationSpeed} />
        <div className="flex-1 flex items-center justify-center ">
          <div className="text-center space-y-4">
            <div className="relative">
              <Hexagon className="h-16 w-16 text-fuchsia-400 animate-pulse mx-auto" />
              <div className="absolute inset-0 bg-fuchsia-400/20 rounded-lg blur-lg scale-150 animate-pulse"></div>
            </div>
            <div className="space-y-2">
              <h2 className="text-2xl font-bold text-slate-200">Component Gallery</h2>
              <p className="text-slate-400">Preparing enterprise design system...</p>
            </div>
            <div className="flex items-center justify-center gap-1">
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen bg-background text-foreground">
      <UnifiedSidebar animationSpeed={animationSpeed} />
      
      <div className="flex-1  relative">
        
      <header className="border-b border-slate-700/50 bg-slate-900/90 backdrop-blur-xl sticky top-0 z-50 shadow-2xl shadow-slate-900/25 relative overflow-hidden" role="banner">
  <div className="container mx-auto px-6 py-5">
    <div className="flex items-center justify-between gap-8">
      {/* Left Side - Brand/Logo */}
      <div className="flex items-center gap-3">
        <div className="relative">
          <Component className="h-8 w-8 text-fuchsia-400" />
          <div className="absolute inset-0 bg-fuchsia-400/20 rounded-lg blur-lg scale-150"></div>
        </div>
        <div className="hidden sm:block">
          <h1 className="text-lg font-semibold text-slate-200">Inclusive</h1>
          <p className="text-xs text-slate-400">Component Gallery</p>
        </div>
      </div>

      {/* Right Side Actions */}
      <div className="flex items-center gap-4">
        {/* Enhanced Search */}
        <div className="relative group">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400 group-focus-within:text-fuchsia-400 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }} />
          <Input
            placeholder="Search components..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 pr-20 w-64 lg:w-80 bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 focus:border-fuchsia-500 transition-all duration-300 rounded-lg"
            style={{ transitionDuration: 'var(--animation-speed)' }}
            aria-label="Search components"
          />
          {searchQuery && (
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setSearchQuery("")}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 hover:bg-slate-700"
              aria-label="Clear search"
            >
              <X className="h-3 w-3" />
            </Button>
          )}
        </div>

        {/* Filter Toggle */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => setFilterOpen(!filterOpen)}
          className={`transition-all duration-300 hover:scale-105 ${filterOpen ? 'bg-fuchsia-500/20 border-fuchsia-500/50' : 'hover:bg-slate-800'}`}
          style={{ transitionDuration: 'var(--animation-speed)' }}
          aria-expanded={filterOpen}
          aria-label="Toggle filters and settings"
        >
          <Filter className="h-4 w-4 mr-2" />
          Filters
        </Button>

        {/* Quick Actions */}
        <div className="hidden md:flex items-center gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => {
              const componentData = {
                components: filteredTabs.map(tab => ({
                  category: tab.label,
                  count: tab.count
                })),
                exportDate: new Date().toISOString(),
                totalComponents: filteredTabs.reduce((sum, tab) => sum + tab.count, 0)
              };
              
              const blob = new Blob([JSON.stringify(componentData, null, 2)], { type: 'application/json' });
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `inclusive-components-${new Date().toISOString().split('T')[0]}.json`;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              URL.revokeObjectURL(url);
            }}
            className="hover:bg-slate-800 hover:scale-105 transition-all duration-300 rounded-lg


        {/* Hero Section */}
        <section className="relative bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-b border-slate-700 overflow-hidden">
          {/* Background Effects */}
          <div className="absolute inset-0 bg-gradient-to-r from-fuchsia-500/10 to-purple-600/10"></div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(217,70,239,0.1),transparent_70%)]"></div>
          
          <div className="container mx-auto px-6 py-16 relative">
            <div className="max-w-4xl mx-auto text-center space-y-8">
              {/* Main Title */}
              <div className="space-y-4">
                <div className="flex items-center justify-center gap-3 mb-4">
                  <div className="relative">
                    <Component className="h-12 w-12 text-fuchsia-400 animate-pulse" />
                    <div className="absolute inset-0 bg-fuchsia-400/20 rounded-lg blur-lg scale-150 animate-pulse"></div>
                  </div>
                  <Badge 
                    variant="outline" 
                    className="text-fuchsia-400 border-fuchsia-400/30 bg-fuchsia-400/10 px-3 py-1 text-sm font-medium"
                  >
                    Component Gallery
                  </Badge>
                </div>
                <h1 className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-slate-100 via-slate-200 to-slate-300 bg-clip-text text-transparent">
                  UI Components
                </h1>
                <p className="text-xl text-slate-300 max-w-2xl mx-auto leading-relaxed">
                  Professional UI components from Inclusive. Built for modern recruitment applications with accessibility, performance, and developer experience in mind.
                </p>
              </div>

              {/* Animated Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-12">
                <div className="group p-6 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 shadow-xl/50 hover:border-fuchsia-500/30 transition-all duration-300 hover:shadow-lg hover:shadow-fuchsia-500/10">
                  <div className="text-3xl font-bold text-fuchsia-400 mb-2 group-hover:scale-110 transition-transform">
                    102+
                  </div>
                  <div className="text-sm text-slate-400">Components</div>
                </div>
                <div className="group p-6 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 shadow-xl/50 hover:border-purple-500/30 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/10">
                  <div className="text-3xl font-bold text-purple-400 mb-2 group-hover:scale-110 transition-transform">
                    8
                  </div>
                  <div className="text-sm text-slate-400">Categories</div>
                </div>
                <div className="group p-6 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 shadow-xl/50 hover:border-pink-500/30 transition-all duration-300 hover:shadow-lg hover:shadow-pink-500/10">
                  <div className="text-3xl font-bold text-pink-400 mb-2 group-hover:scale-110 transition-transform">
                    200+
                  </div>
                  <div className="text-sm text-slate-400">Code Examples</div>
                </div>
                <div className="group p-6 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 shadow-xl/50 hover:border-cyan-500/30 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/10">
                  <div className="text-3xl font-bold text-cyan-400 mb-2 group-hover:scale-110 transition-transform">
                    WCAG 2.1
                  </div>
                  <div className="text-sm text-slate-400">Compliant</div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="flex flex-wrap items-center justify-center gap-6 mt-8">
                <Button 
                  size="lg" 
                  className="bg-gradient-to-r from-fuchsia-500 to-purple-600 hover:shadow-lg hover:shadow-fuchsia-500/25 transition-all"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                >
                  <Play className="h-5 w-5 mr-2" />
                  Get Started
                </Button>
                <Button 
                  size="lg" 
                  variant="outline" 
                  className="border-slate-600 hover:bg-slate-800 transition-all"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                >
                  <BookOpen className="h-5 w-5 mr-2" />
                  Documentation
                </Button>
                <Button 
                  size="lg" 
                  variant="ghost" 
                  className="text-slate-300 hover:text-fuchsia-400 transition-all"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                >
                  <Download className="h-5 w-5 mr-2" />
                  Export Components
                </Button>
              </div>
            </div>
          </div>
        </section>

        {/* Enhanced Main Content */}
        <main className="container mx-auto px-6 py-8 relative z-10" role="main">
          {/* Search Results Summary */}
          {searchQuery && (
            <div className="mb-6 p-4 bg-slate-800/50 rounded-xl border border-slate-700/50 shadow-xl animate-in slide-in-from-top-2" style={{ animationDuration: 'var(--animation-speed)' }}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Search className="h-4 w-4 text-fuchsia-400" />
                  <span className="text-sm text-slate-300">
                    Search results for <span className="font-medium text-white">"{searchQuery}"</span>
                  </span>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => setSearchQuery("")}
                  className="text-slate-400 hover:text-white"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}

          {/* Enhanced Tabs */}
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <div className="mb-8">
              {/* Tab Navigation */}
              <div className="relative">
                <TabsList className="grid w-full grid-cols-3 lg:grid-cols-9 h-auto p-3 bg-gradient-to-r from-slate-800/80 via-slate-800/90 to-slate-800/80 border border-slate-700/50 shadow-xl/60 rounded-3xl backdrop-blur-md shadow-2xl shadow-slate-900/40">
                  {filteredTabs.map((tab) => (
                    <TabsTrigger
                      key={tab.id}
                      value={tab.id}
                      className="group flex flex-col items-center gap-3 py-5 px-3 text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-fuchsia-500/25 data-[state=active]:via-purple-500/20 data-[state=active]:to-pink-500/15 data-[state=active]:text-white data-[state=active]:border-fuchsia-400/40 data-[state=active]:shadow-lg data-[state=active]:shadow-fuchsia-500/20 hover:bg-slate-700/40 hover:border-slate-600/60 transition-all duration-300 ease-out rounded-2xl relative border border-transparent overflow-hidden"
                      style={{ transitionDuration: 'var(--animation-speed)' }}
                    >
                      {/* Background glow effect */}
                      <div className="absolute inset-0 bg-gradient-to-br from-fuchsia-500/0 via-purple-500/0 to-pink-500/0 group-hover:from-fuchsia-500/5 group-hover:via-purple-500/5 group-hover:to-pink-500/5 group-data-[state=active]:from-fuchsia-500/10 group-data-[state=active]:via-purple-500/8 group-data-[state=active]:to-pink-500/6 transition-all duration-500 rounded-2xl"></div>
                      
                      {/* Icon with enhanced effects */}
                      <div className="relative z-10">
                        <div className="relative">
                          <tab.icon className="h-6 w-6 flex-shrink-0 text-slate-400 group-hover:text-slate-200 group-data-[state=active]:text-fuchsia-300 group-hover:scale-110 group-data-[state=active]:scale-115 transition-all duration-300 ease-out drop-shadow-sm" />
                          
                          {/* Icon glow */}
                          <div className="absolute inset-0 bg-fuchsia-400/0 group-hover:bg-fuchsia-400/20 group-data-[state=active]:bg-fuchsia-400/30 rounded-lg blur-md scale-150 transition-all duration-300"></div>
                          
                          {/* Active pulse effect */}
                          <div className="absolute inset-0 bg-fuchsia-400/0 group-data-[state=active]:bg-fuchsia-400/20 rounded-lg blur-xl scale-200 animate-pulse opacity-0 group-data-[state=active]:opacity-100 transition-opacity duration-1000"></div>
                        </div>
                      </div>
                      
                      {/* Label with better typography */}
                      <span className="font-medium leading-tight text-center text-slate-400 group-hover:text-slate-200 group-data-[state=active]:text-white group-data-[state=active]:font-semibold transition-all duration-300 hidden sm:block text-xs lg:text-sm tracking-wide">
                        {tab.label}
                      </span>
                      
                      {/* Count Badge with enhanced styling */}
                      <Badge 
                        variant="secondary" 
                        className="text-xs px-2 py-0.5 h-5 bg-slate-700/80 text-slate-300 border border-slate-600/50 group-hover:bg-fuchsia-500/20 group-hover:border-fuchsia-500/50 group-hover:text-fuchsia-300 group-data-[state=active]:bg-fuchsia-500/30 group-data-[state=active]:border-fuchsia-500/70 group-data-[state=active]:text-fuchsia-200 transition-all font-medium"
                        style={{ transitionDuration: 'var(--animation-speed)' }}
                      >
                        {tab.count}
                      </Badge>
                      
                      {/* Active indicator line */}
                      <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-fuchsia-400 to-purple-400 rounded-full group-data-[state=active]:w-8 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}></div>
                    </TabsTrigger>
                  ))}
                </TabsList>
                
                {/* Background gradient effect */}
                <div className="absolute inset-0 bg-gradient-to-r from-fuchsia-500/5 via-purple-500/5 to-blue-500/5 rounded-2xl -z-10 blur-xl"></div>
              </div>
              
              {/* Tab Summary */}
              <div className="mt-4 flex items-center justify-between text-sm text-slate-400">
                <div className="flex items-center gap-2">
                  <Component className="h-4 w-4" />
                  <span>
                    Showing {filteredTabs.find(tab => tab.id === activeTab)?.count || 0} components in{' '}
                    <span className="text-fuchsia-400 font-medium">
                      {filteredTabs.find(tab => tab.id === activeTab)?.label || 'Unknown'}
                    </span>
                  </span>
                </div>
                
                <div className="flex items-center gap-6">
                  {searchQuery && (
                    <div className="flex items-center gap-1 text-xs">
                      <Search className="h-3 w-3" />
                      <span>Filtered by: "{searchQuery}"</span>
                    </div>
                  )}
                  
                  <div className="flex items-center gap-1 text-xs">
                    <Eye className="h-3 w-3" />
                    <span>{viewMode === "grid" ? "Grid View" : "List View"}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Tab Content with improved performance */}
<TabsContent value="recruitment" className="space-y-6">
  <RecruitmentComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="forms" className="space-y-6">
  <FormComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="navigation" className="space-y-6">
  <NavigationComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="feedback" className="space-y-6">
  <FeedbackComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="data" className="space-y-6">
  <DataDisplayComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="layout" className="space-y-6">
  <LayoutComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="media" className="space-y-6">
  <MediaComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="utility" className="space-y-6">
  <UtilityComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>

<TabsContent value="favorites" className="space-y-6">
  <FavoritesComponents 
    searchQuery={searchQuery} 
    onCopyCode={handleCopyCode} 
    copiedCode={copiedCode}
    viewMode={viewMode}
    sortBy={sortBy}
    favorites={favorites}
    onToggleFavorite={toggleFavorite}
  />
</TabsContent>
          </Tabs>
        </main>

        {/* Enhanced Footer */}
        <footer className="border-t border-slate-700 bg-slate-900/50 mt-16 relative z-10" role="contentinfo">
          <div className="container mx-auto px-6 py-12">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Hexagon className="h-6 w-6 text-fuchsia-400" />
                  <span className="font-semibold text-white">Component Gallery</span>
                </div>
                <p className="text-sm text-slate-400">
                  Inclusive design system for modern recruitment applications.
                </p>
              </div>
              
              <div className="space-y-4">
                <h4 className="font-medium text-white">Resources</h4>
                <ul className="space-y-2 text-sm text-slate-400">
                  <li><Link href="/design-system" className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Documentation</Link></li>
                  <li><Link href="/style-guide" className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Style Guide</Link></li>
                  <li><Link href="/tokens" className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Design Tokens</Link></li>
                </ul>
              </div>
              
              <div className="space-y-4">
                <h4 className="font-medium text-white">Components</h4>
                <ul className="space-y-2 text-sm text-slate-400">
                  <li><button onClick={() => setActiveTab("recruitment")} className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Recruitment</button></li>
                  <li><button onClick={() => setActiveTab("forms")} className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Forms</button></li>
                  <li><button onClick={() => setActiveTab("navigation")} className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg">Navigation</button></li>
                </ul>
              </div>
              
              <div className="space-y-4">
                <h4 className="font-medium text-white">Tools</h4>
                <ul className="space-y-2 text-sm text-slate-400">
                  <li><span className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg cursor-pointer">Figma Plugin</span></li>
                  <li><span className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg cursor-pointer">VS Code Extension</span></li>
                  <li><span className="hover:text-fuchsia-400 transition-all duration-300 rounded-lg cursor-pointer">CLI Tools</span></li>
                </ul>
              </div>
            </div>
            
            <div className="border-t border-slate-700 mt-8 pt-8 flex items-center justify-between">
              <p className="text-sm text-slate-400">
                © 2024 Component Gallery. Built with accessibility and performance in mind.
              </p>
              <div className="flex items-center gap-2 text-sm text-slate-400">
                <span>Version 2.0.0</span>
                <Badge variant="outline" className="text-xs">
                  <Sparkles className="h-3 w-3 mr-1" />
                  Latest
                </Badge>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </div>
  )
} function ComponentCard({ 
  title, 
  description, 
  children, 
  code, 
  id, 
  onCopyCode, 
  copiedCode, 
  isFavourite = false, 
  onToggleFavourite,
  viewMode = "grid",
  searchQuery = ""
}: {
  title: string
  description?: string
  children: React.ReactNode
  code?: string
  id: string
  onCopyCode?: (code: string, id: string) => void
  copiedCode?: string
  isFavourite?: boolean
  onToggleFavourite?: (id: string) => void
  viewMode?: "grid" | "list"
  searchQuery?: string
}) {
  const [isViewOpen, setIsViewOpen] = useState(false)
  const [isEditOpen, setIsEditOpen] = useState(false)
  const [editedCode, setEditedCode] = useState(code || "")
  const [editedTitle, setEditedTitle] = useState(title)
  const [editedDescription, setEditedDescription] = useState(description || "")

  // Highlight search terms in title
  const highlightText = (text: string, query: string) => {
    if (!query) return text
    
    const parts = text.split(new RegExp(`(${query})`, 'gi'))
    return parts.map((part, index) => 
      part.toLowerCase() === query.toLowerCase() ? (
        <mark key={index} className="bg-fuchsia-500/30 text-fuchsia-200 px-1 rounded">
          {part}
        </mark>
      ) : part
    )
  }

  const cardClasses = viewMode === "list" 
    ? "flex items-center gap-6 p-6" 
    : "flex flex-col p-6"

  const handleSaveEdit = () => {
    // In a real app, this would save to a backend
    console.log("Saving component:", { id, title: editedTitle, description: editedDescription, code: editedCode })
    setIsEditOpen(false)
    // You could add a toast notification here
  }

  const handleResetEdit = () => {
    setEditedCode(code || "")
    setEditedTitle(title)
    setEditedDescription(description || "")
  }

  return (
    <Card className={`group relative overflow-hidden bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 transition-all hover:shadow-lg hover:shadow-fuchsia-500/10 ${cardClasses}`} style={{ transitionDuration: 'var(--animation-speed)' }}>
      {/* Content Layout */}
      <div className={viewMode === "list" ? "flex-1" : "flex-1 space-y-4"}>
        <CardHeader className="p-0">
          <div className="flex items-start justify-between">
            <div className="space-y-2">
              <CardTitle className="text-lg font-semibold text-slate-100 group-hover:text-fuchsia-300 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                {highlightText(title, searchQuery)}
              </CardTitle>
              {description && (
                <CardDescription className="text-slate-400 leading-relaxed">
                  {highlightText(description, searchQuery)}
                </CardDescription>
              )}
            </div>
            
            {/* Status Indicators */}
            <div className="flex items-center gap-2 ml-4">
              <Badge variant="outline" className="text-xs border-green-400/30 text-green-400">
                <CheckCircle2 className="h-3 w-3 mr-1" />
                Ready
              </Badge>
            </div>
          </div>
        </CardHeader>

        {/* Component Preview */}
        <CardContent className={`p-0 ${viewMode === "list" ? "flex-1" : ""}`}>
          <div className="bg-slate-900/50 rounded-lg p-4 border border-slate-700/50 shadow-xl/50 group-hover:border-slate-600/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            {children}
          </div>
        </CardContent>
      </div>

      {/* Action Buttons */}
      <div className={`flex items-center justify-between ${viewMode === "list" ? "flex-col gap-2" : "mt-4"}`}>
        <div className="flex items-center gap-2">
          {code && onCopyCode && (
            <Button
              size="sm"
              variant="outline"
              onClick={() => onCopyCode(code, id)}
              className="hover:bg-fuchsia-500/20 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg"
              style={{ transitionDuration: 'var(--animation-speed)' }}
              aria-label="Copy component code"
            >
              {copiedCode === id ? (
                <>
                  <Check className="h-4 w-4 mr-2 text-green-400" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="h-4 w-4 mr-2" />
                  Copy Code
                </>
              )}
            </Button>
          )}
          
          {/* View Button with Modal */}
          <Dialog open={isViewOpen} onOpenChange={setIsViewOpen}>
            <DialogTrigger asChild>
              <Button
                size="sm"
                variant="ghost"
                className="hover:bg-slate-700 transition-all duration-300 rounded-lg"
                style={{ transitionDuration: 'var(--animation-speed)' }}
                aria-label="View component details"
              >
                <Eye className="h-4 w-4 mr-2" />
                View
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-900 border-slate-700">
              <DialogHeader>
                <DialogTitle className="text-xl font-bold text-slate-100 flex items-center gap-2">
                  <Component className="h-5 w-5 text-fuchsia-400" />
                  {title}
                </DialogTitle>
                <DialogDescription className="text-slate-400">
                  {description}
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-6 mt-6">
                {/* Component Preview */}
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-slate-200">Live Preview</h3>
                  <div className="bg-slate-800/50 rounded-lg p-6 border border-slate-700/50 shadow-xl">
                    {children}
                  </div>
                </div>

                {/* Component Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-semibold text-slate-200">Component Details</h3>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-slate-400">ID:</span>
                        <span className="text-slate-300 font-mono">{id}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Status:</span>
                        <Badge variant="outline" className="text-xs border-green-400/30 text-green-400">
                          <CheckCircle2 className="h-3 w-3 mr-1" />
                          Ready
                        </Badge>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Favourite:</span>
                        <span className="text-slate-300">{isFavourite ? "Yes" : "No"}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <h3 className="text-lg font-semibold text-slate-200">Usage Guidelines</h3>
                    <div className="text-sm text-slate-400 space-y-2">
                      <p>• Use this component for {description?.toLowerCase() || 'UI elements'}</p>
                      <p>• Ensure proper accessibility attributes</p>
                      <p>• Test on different screen sizes</p>
                      <p>• Follow the design system guidelines</p>
                    </div>
                  </div>
                </div>

                {/* Code Display */}
                {code && (
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold text-slate-200">Source Code</h3>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onCopyCode && onCopyCode(code, id)}
                        className="hover:bg-fuchsia-500/20 hover:border-fuchsia-500/50"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy
                      </Button>
                    </div>
                    <pre className="bg-slate-800/80 rounded-lg p-4 border border-slate-700/50 shadow-xl text-sm text-slate-300 overflow-x-auto">
                      <code>{code}</code>
                    </pre>
                  </div>
                )}
              </div>
            </DialogContent>
          </Dialog>
          
          {/* Edit Button with Modal */}
          <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>
            <DialogTrigger asChild>
              <Button
                size="sm"
                variant="ghost"
                className="hover:bg-slate-700 transition-all duration-300 rounded-lg"
                style={{ transitionDuration: 'var(--animation-speed)' }}
                aria-label="Edit component"
              >
                <Edit className="h-4 w-4 mr-2" />
                Edit
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto bg-slate-900 border-slate-700">
              <DialogHeader>
                <DialogTitle className="text-xl font-bold text-slate-100 flex items-center gap-2">
                  <Edit className="h-5 w-5 text-fuchsia-400" />
                  Edit Component: {title}
                </DialogTitle>
                <DialogDescription className="text-slate-400">
                  Modify the component details and code. Changes are saved locally.
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-6 mt-6">
                {/* Edit Form */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label className="text-slate-300">Component Title</Label>
                      <Input
                        value={editedTitle}
                        onChange={(e) => setEditedTitle(e.target.value)}
                        className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 focus:border-fuchsia-500"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label className="text-slate-300">Description</Label>
                      <Textarea
                        value={editedDescription}
                        onChange={(e) => setEditedDescription(e.target.value)}
                        className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 focus:border-fuchsia-500 min-h-[100px]"
                        placeholder="Enter component description..."
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <h3 className="text-lg font-semibold text-slate-200">Live Preview</h3>
                    <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700/50 shadow-xl">
                      {children}
                    </div>
                  </div>
                </div>

                {/* Code Editor */}
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label className="text-slate-300 text-lg font-semibold">Component Code</Label>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={handleResetEdit}
                        className="hover:bg-slate-700"
                      >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Reset
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => navigator.clipboard.writeText(editedCode)}
                        className="hover:bg-fuchsia-500/20 hover:border-fuchsia-500/50"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy
                      </Button>
                    </div>
                  </div>
                  <Textarea
                    value={editedCode}
                    onChange={(e) => setEditedCode(e.target.value)}
                    className="bg-slate-800/80 border-slate-600 hover:border-fuchsia-500/50 focus:border-fuchsia-500 font-mono text-sm min-h-[200px]"
                    placeholder="Enter component code..."
                  />
                </div>

                {/* Action Buttons */}
                <div className="flex items-center justify-end gap-3 pt-4 border-t border-slate-700">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditOpen(false)}
                    className="hover:bg-slate-700"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleSaveEdit}
                    className="bg-gradient-to-r from-fuchsia-500 to-purple-600 hover:shadow-lg hover:shadow-fuchsia-500/25"
                  >
                    <Save className="h-4 w-4 mr-2" />
                    Save Changes
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Favorite Button - Now positioned at bottom right */}
        <div className="flex items-center gap-2">
          {isFavourite && (
            <Badge variant="outline" className="text-xs border-red-400/30 text-red-400">
              <Heart className="h-3 w-3 mr-1 fill-current" />
              Favorite
            </Badge>
          )}
          {onToggleFavourite && (
            <Button
              size="sm"
              variant="ghost"
              onClick={() => onToggleFavourite(id)}
              className={`h-8 w-8 p-0 transition-all ${isFavourite ? 'text-red-400 hover:text-red-300' : 'text-slate-400 hover:text-red-400'}`}
              style={{ transitionDuration: 'var(--animation-speed)' }}
              aria-label={isFavourite ? 'Remove from favorites' : 'Add to favorites'}
            >
              <Heart className={`h-4 w-4 ${isFavourite ? 'fill-current' : ''}`} />
            </Button>
          )}
        </div>
      </div>

      {/* Hover Effect Overlay */}
      <div className="absolute inset-0 bg-gradient-to-r from-fuchsia-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none" style={{ transitionDuration: 'var(--animation-speed)' }} />
    </Card>
  )
}

function RecruitmentComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "candidate-card",
      title: "Candidate Profile Card",
      description: "Comprehensive candidate information display",
      code: `<Card className="hover:border-fuchsia-500/50 transition-all">
  <CardHeader>
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-3">
        <Avatar className="h-12 w-12">
          <AvatarImage src="/placeholder.svg" />
          <AvatarFallback>SJ</AvatarFallback>
        </Avatar>
        <div>
          <CardTitle>Sarah Johnson</CardTitle>
          <CardDescription>Senior Software Engineer</CardDescription>
        </div>
      </div>
      <Badge className="bg-green-500/20 text-green-300">Available</Badge>
    </div>
  </CardHeader>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
          <CardHeader>
            <div className="flex items-start justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="h-12 w-12 ring-2 ring-slate-600 hover:ring-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
                  <AvatarImage src="/placeholder.svg?height=48&width=48" />
                  <AvatarFallback className="bg-fuchsia-500/20 text-fuchsia-300 font-bold">SJ</AvatarFallback>
                </Avatar>
                <div>
                  <CardTitle className="text-lg text-slate-100">Sarah Johnson</CardTitle>
                  <CardDescription className="text-slate-400">Senior Software Engineer</CardDescription>
                </div>
              </div>
              <Badge className="bg-green-500/20 text-green-300 border-green-500/30 animate-pulse">Available</Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-6 text-sm">
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-slate-400" />
                <span className="text-slate-300">5 years exp.</span>
              </div>
              <div className="flex items-center gap-2">
                <MapPin className="h-4 w-4 text-slate-400" />
                <span className="text-slate-300">San Francisco</span>
              </div>
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4 text-slate-400" />
                <span className="text-slate-300">$120k - $150k</span>
              </div>
              <div className="flex items-center gap-2">
                <Star className="h-4 w-4 text-yellow-400" />
                <span className="text-slate-300">4.8 rating</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-slate-400">Profile Completion</span>
                <span className="text-slate-300">85%</span>
              </div>
              <Progress value={85} className="h-2" />
            </div>
            <div className="flex gap-2 pt-2">
              <Button size="sm" className="flex-1 bg-fuchsia-500 hover:bg-fuchsia-600 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <Mail className="h-4 w-4 mr-2" />
                Contact
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <Eye className="h-4 w-4" />
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "job-posting-card",
      title: "Job Posting Card",
      description: "Job listing with key details and actions",
      code: `<Card>
  <CardHeader>
    <CardTitle>Senior Frontend Developer</CardTitle>
    <CardDescription>Remote • Full-time • $120k-$150k</CardDescription>
  </CardHeader>
  <CardContent>
    <div className="flex justify-between items-center">
      <Badge>25 Applicants</Badge>
      <Button size="sm">View Details</Button>
    </div>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle className="text-lg text-slate-100">Senior Frontend Developer</CardTitle>
                <CardDescription className="text-slate-400 mt-1">Remote • Full-time</CardDescription>
              </div>
              <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30">Active</Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-6 text-sm">
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4 text-green-400" />
                <span className="text-slate-300">$120k - $150k</span>
              </div>
              <div className="flex items-center gap-2">
                <Users className="h-4 w-4 text-blue-400" />
                <span className="text-slate-300">25 applicants</span>
              </div>
            </div>
            <div className="flex gap-2">
              <Button size="sm" className="flex-1 bg-fuchsia-500 hover:bg-fuchsia-600">View Details</Button>
              <Button size="sm" variant="outline">Edit</Button>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "interview-schedule",
      title: "Interview Scheduler",
      description: "Schedule and manage interview slots",
      code: `<Card>
  <CardHeader>
    <CardTitle>Interview with Sarah Johnson</CardTitle>
    <CardDescription>Technical Interview • 1 hour</CardDescription>
  </CardHeader>
  <CardContent>
    <div className="space-y-3">
      <div className="flex items-center gap-2">
        <Calendar className="h-4 w-4" />
        <span>March 15, 2024 at 2:00 PM</span>
      </div>
      <Button className="w-full">Join Meeting</Button>
    </div>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50 hover:border-blue-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
          <CardHeader>
            <CardTitle className="text-lg text-slate-100">Interview with Sarah Johnson</CardTitle>
            <CardDescription className="text-slate-400">Technical Interview • 1 hour</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2 text-sm">
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-blue-400" />
                <span className="text-slate-300">March 15, 2024 at 2:00 PM</span>
              </div>
              <div className="flex items-center gap-2">
                <Video className="h-4 w-4 text-green-400" />
                <span className="text-slate-300">Google Meet</span>
              </div>
            </div>
            <div className="flex gap-2">
              <Button size="sm" className="flex-1 bg-green-500 hover:bg-green-600">Join Meeting</Button>
              <Button size="sm" variant="outline">Reschedule</Button>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "candidate-search",
      title: "Candidate Search Bar",
      description: "Advanced search with filters for candidates",
      code: `<div className="flex gap-2">
  <Input placeholder="Search candidates..." className="flex-1" />
  <Button variant="outline">
    <Filter className="h-4 w-4" />
  </Button>
  <Button>Search</Button>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          <div className="flex gap-2">
            <Input placeholder="Search candidates..." className="flex-1 bg-slate-800/50 border-slate-600" />
            <Button variant="outline" size="sm" className="hover:bg-slate-700">
              <Filter className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex gap-2 flex-wrap">
            <Badge variant="secondary" className="bg-slate-700 text-slate-300">JavaScript</Badge>
            <Badge variant="secondary" className="bg-slate-700 text-slate-300">Remote</Badge>
            <Badge variant="secondary" className="bg-slate-700 text-slate-300">5+ years</Badge>
          </div>
        </div>
      )
    },
    {
      id: "application-status",
      title: "Application Status Tracker",
      description: "Visual progress tracker for applications",
      code: `<div className="space-y-4">
  <div className="flex items-center gap-6">
    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
      <Check className="h-4 w-4 text-white" />
    </div>
    <span>Application Submitted</span>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { step: "Application Submitted", status: "completed", icon: Check },
            { step: "Initial Review", status: "completed", icon: Check },
            { step: "Technical Interview", status: "current", icon: Video },
            { step: "Final Interview", status: "pending", icon: Users },
            { step: "Decision", status: "pending", icon: CheckCircle2 }
          ].map((item, index) => (
            <div key={index} className="flex items-center gap-6">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                item.status === 'completed' ? 'bg-green-500' : 
                item.status === 'current' ? 'bg-blue-500' : 'bg-slate-600'
              }`}>
                <item.icon className="h-4 w-4 text-white" />
              </div>
              <span className={`text-sm ${
                item.status === 'completed' ? 'text-green-300' :
                item.status === 'current' ? 'text-blue-300' : 'text-slate-400'
              }`}>{item.step}</span>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "skill-tags",
      title: "Skill Tags Component",
      description: "Interactive skill badges with proficiency levels",
      code: `<div className="flex flex-wrap gap-2">
  <Badge className="bg-blue-500/20 text-blue-300">React</Badge>
  <Badge className="bg-green-500/20 text-green-300">Node.js</Badge>
  <Badge className="bg-purple-500/20 text-purple-300">TypeScript</Badge>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex flex-wrap gap-2">
            {[
              { skill: "React", level: "Expert", color: "bg-blue-500/20 text-blue-300" },
              { skill: "Node.js", level: "Advanced", color: "bg-green-500/20 text-green-300" },
              { skill: "TypeScript", level: "Expert", color: "bg-purple-500/20 text-purple-300" },
              { skill: "Python", level: "Intermediate", color: "bg-yellow-500/20 text-yellow-300" },
              { skill: "AWS", level: "Advanced", color: "bg-orange-500/20 text-orange-300" }
            ].map((item, index) => (
              <Badge key={index} className={`${item.color} hover:scale-105 transition-transform cursor-pointer`} style={{ transitionDuration: 'var(--animation-speed)' }}>
                {item.skill}
              </Badge>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "salary-range",
      title: "Salary Range Slider",
      description: "Interactive salary range selector",
      code: `<div className="space-y-4">
  <Label>Salary Range: $80k - $120k</Label>
  <Slider defaultValue={[80, 120]} max={200} min={40} step={5} />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="flex justify-between text-sm">
            <Label className="text-slate-300">Salary Range</Label>
            <span className="text-slate-400">$80k - $120k</span>
          </div>
          <Slider defaultValue={[80, 120]} max={200} min={40} step={5} className="mt-2" />
          <div className="flex justify-between text-xs text-slate-500">
            <span>$40k</span>
            <span>$200k</span>
          </div>
        </div>
      )
    },
    {
      id: "team-member-card",
      title: "Team Member Card",
      description: "Display team member information",
      code: `<Card>
  <CardContent className="p-4">
    <div className="flex items-center gap-3">
      <Avatar>
        <AvatarFallback>JD</AvatarFallback>
      </Avatar>
      <div>
        <h4 className="font-medium">John Doe</h4>
        <p className="text-sm text-muted-foreground">Hiring Manager</p>
      </div>
    </div>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Avatar className="ring-2 ring-slate-600">
                <AvatarFallback className="bg-blue-500/20 text-blue-300">JD</AvatarFallback>
              </Avatar>
              <div>
                <h4 className="font-medium text-slate-100">John Doe</h4>
                <p className="text-sm text-slate-400">Hiring Manager</p>
                <div className="flex items-center gap-1 mt-1">
                  <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                  <span className="text-xs text-green-300">Online</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "quick-actions",
      title: "Quick Actions Menu",
      description: "Common recruitment actions in a dropdown",
      code: `<div className="flex gap-2">
  <Button size="sm">Schedule Interview</Button>
  <Button size="sm" variant="outline">Send Message</Button>
  <Button size="sm" variant="ghost">
    <MoreHorizontal className="h-4 w-4" />
  </Button>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex gap-2 flex-wrap">
            <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">
              <Calendar className="h-4 w-4 mr-1" />
              Schedule
            </Button>
            <Button size="sm" variant="outline" className="hover:bg-slate-700">
              <Mail className="h-4 w-4 mr-1" />
              Message
            </Button>
            <Button size="sm" variant="outline" className="hover:bg-slate-700">
              <Phone className="h-4 w-4 mr-1" />
              Call
            </Button>
            <Button size="sm" variant="ghost" className="hover:bg-slate-700">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </div>
        </div>
      )
    },
    {
      id: "candidate-notes",
      title: "Candidate Notes",
      description: "Add and view notes about candidates",
      code: `<Card>
  <CardHeader>
    <CardTitle>Notes</CardTitle>
  </CardHeader>
  <CardContent>
    <Textarea placeholder="Add notes about this candidate..." />
    <Button className="mt-2" size="sm">Save Note</Button>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50">
          <CardHeader>
            <CardTitle className="text-lg text-slate-100">Candidate Notes</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <Textarea 
              placeholder="Add notes about this candidate..." 
              className="bg-slate-800/50 border-slate-600 min-h-[80px]"
            />
            <div className="flex justify-between">
              <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">Save Note</Button>
              <span className="text-xs text-slate-500">Last updated 2 hours ago</span>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "rating-system",
      title: "Candidate Rating",
      description: "Star rating system for candidate evaluation",
      code: `<div className="flex items-center gap-2">
  <div className="flex gap-1">
    {[1,2,3,4,5].map(star => (
      <Star key={star} className="h-4 w-4 fill-yellow-400 text-yellow-400" />
    ))}
  </div>
  <span className="text-sm">4.5/5</span>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="space-y-2">
            <Label className="text-slate-300">Overall Rating</Label>
            <div className="flex items-center gap-2">
              <div className="flex gap-1">
                {[1,2,3,4,5].map(star => (
                  <Star 
                    key={star} 
                    className={`h-5 w-5 cursor-pointer transition-all duration-300 rounded-lg ${
                      star <= 4 ? 'fill-yellow-400 text-yellow-400' : 'text-slate-600'
                    }`}
                    style={{ transitionDuration: 'var(--animation-speed)' }}
                  />
                ))}
              </div>
              <span className="text-sm text-slate-300">4.0/5</span>
            </div>
          </div>
          <div className="space-y-2">
            <Label className="text-slate-300 text-sm">Technical Skills</Label>
            <Progress value={85} className="h-2" />
            <div className="flex justify-between text-xs text-slate-400">
              <span>Beginner</span>
              <span>Expert</span>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "location-filter",
      title: "Location Filter",
      description: "Geographic location filtering component",
      code: `<Select>
  <SelectTrigger>
    <SelectValue placeholder="Select location" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="remote">Remote</SelectItem>
    <SelectItem value="sf">San Francisco</SelectItem>
    <SelectItem value="ny">New York</SelectItem>
  </SelectContent>
</Select>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          <Label className="text-slate-300">Preferred Location</Label>
          <Select>
            <SelectTrigger className="bg-slate-800/50 border-slate-600">
              <SelectValue placeholder="Select location" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="remote">🌍 Remote</SelectItem>
              <SelectItem value="sf">🏙️ San Francisco</SelectItem>
              <SelectItem value="ny">🗽 New York</SelectItem>
              <SelectItem value="la">🌴 Los Angeles</SelectItem>
              <SelectItem value="austin">🤠 Austin</SelectItem>
            </SelectContent>
          </Select>
        </div>
      )
    },
    {
      id: "experience-level",
      title: "Experience Level Indicator",
      description: "Visual experience level classification",
      code: `<div className="flex items-center gap-2">
  <Badge className="bg-green-500/20 text-green-300">Senior</Badge>
  <span className="text-sm">5+ years experience</span>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            { level: "Entry", years: "0-2 years", color: "bg-blue-500/20 text-blue-300", icon: "🌱" },
            { level: "Mid", years: "3-5 years", color: "bg-yellow-500/20 text-yellow-300", icon: "🌿" },
            { level: "Senior", years: "5+ years", color: "bg-green-500/20 text-green-300", icon: "🌳" },
            { level: "Lead", years: "8+ years", color: "bg-purple-500/20 text-purple-300", icon: "�'�" }
          ].map((item, index) => (
            <div key={index} className="flex items-center justify-between p-2 bg-slate-800/30 rounded-lg">
              <div className="flex items-center gap-3">
                <span className="text-lg">{item.icon}</span>
                <div>
                  <Badge className={item.color}>{item.level}</Badge>
                </div>
              </div>
              <span className="text-sm text-slate-400">{item.years}</span>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "availability-status",
      title: "Availability Status",
      description: "Candidate availability indicator",
      code: `<div className="flex items-center gap-2">
  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
  <span className="text-sm">Available immediately</span>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            { status: "Available immediately", color: "bg-green-400", textColor: "text-green-300" },
            { status: "Available in 2 weeks", color: "bg-yellow-400", textColor: "text-yellow-300" },
            { status: "Available in 1 month", color: "bg-orange-400", textColor: "text-orange-300" },
            { status: "Not actively looking", color: "bg-red-400", textColor: "text-red-300" }
          ].map((item, index) => (
            <div key={index} className="flex items-center gap-3 p-2 bg-slate-800/30 rounded-lg">
              <div className={`w-3 h-3 ${item.color} rounded-full animate-pulse`}></div>
              <span className={`text-sm ${item.textColor}`}>{item.status}</span>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "resume-upload",
      title: "Resume Upload",
      description: "File upload component for resumes",
      code: `<div className="border-2 border-dashed border-slate-600 rounded-lg p-6 text-center">
  <Upload className="h-8 w-8 mx-auto mb-2 text-slate-400" />
  <p className="text-sm text-slate-400">Drop resume here or click to upload</p>
  <Button className="mt-2" size="sm">Choose File</Button>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="border-2 border-dashed border-slate-600 rounded-lg p-6 text-center hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <Upload className="h-8 w-8 mx-auto mb-2 text-slate-400" />
            <p className="text-sm text-slate-400 mb-2">Drop resume here or click to upload</p>
            <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">Choose File</Button>
            <p className="text-xs text-slate-500 mt-2">PDF, DOC, DOCX up to 10MB</p>
          </div>
        </div>
      )
    },
    {
      id: "interview-feedback",
      title: "Interview Feedback Form",
      description: "Structured feedback collection",
      code: `<Card>
  <CardHeader>
    <CardTitle>Interview Feedback</CardTitle>
  </CardHeader>
  <CardContent className="space-y-4">
    <div>
      <Label>Technical Skills</Label>
      <Slider defaultValue={[75]} max={100} />
    </div>
    <Textarea placeholder="Additional comments..." />
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50">
          <CardHeader>
            <CardTitle className="text-lg text-slate-100">Interview Feedback</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label className="text-slate-300">Technical Skills</Label>
              <Slider defaultValue={[75]} max={100} />
            </div>
            <div className="space-y-2">
              <Label className="text-slate-300">Communication</Label>
              <Slider defaultValue={[85]} max={100} />
            </div>
            <div className="space-y-2">
              <Label className="text-slate-300">Comments</Label>
              <Textarea 
                placeholder="Additional feedback..." 
                className="bg-slate-800/50 border-slate-600 min-h-[60px]"
              />
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "candidate-comparison",
      title: "Candidate Comparison",
      description: "Side-by-side candidate comparison",
      code: `<div className="grid grid-cols-2 gap-6">
  <Card>
    <CardContent className="p-4 text-center">
      <Avatar className="mx-auto mb-2">
        <AvatarFallback>SJ</AvatarFallback>
      </Avatar>
      <h4>Sarah Johnson</h4>
      <p className="text-sm text-muted-foreground">5 years exp.</p>
    </CardContent>
  </Card>
  <Card>
    <CardContent className="p-4 text-center">
      <Avatar className="mx-auto mb-2">
        <AvatarFallback>MK</AvatarFallback>
      </Avatar>
      <h4>Michael Kim</h4>
      <p className="text-sm text-muted-foreground">3 years exp.</p>
    </CardContent>
  </Card>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="grid grid-cols-2 gap-3">
            {[
              { name: "Sarah Johnson", exp: "5 years", rating: 4.8, initials: "SJ", color: "bg-fuchsia-500/20 text-fuchsia-300" },
              { name: "Michael Kim", exp: "3 years", rating: 4.5, initials: "MK", color: "bg-blue-500/20 text-blue-300" }
            ].map((candidate, index) => (
              <Card key={index} className="bg-slate-800/60 border-slate-600/50 hover:border-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <CardContent className="p-4 text-center">
                  <Avatar className="mx-auto mb-2 ring-2 ring-slate-600">
                    <AvatarFallback className={candidate.color}>{candidate.initials}</AvatarFallback>
                  </Avatar>
                  <h4 className="font-medium text-slate-100 text-sm">{candidate.name}</h4>
                  <p className="text-xs text-slate-400">{candidate.exp} exp.</p>
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                    <span className="text-xs text-slate-300">{candidate.rating}</span>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "job-requirements",
      title: "Job Requirements Checklist",
      description: "Interactive requirements matching",
      code: `<div className="space-y-3">
  <div className="flex items-center gap-2">
    <Checkbox checked />
    <span className="text-sm">5+ years React experience</span>
  </div>
  <div className="flex items-center gap-2">
    <Checkbox />
    <span className="text-sm">TypeScript proficiency</span>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            { requirement: "5+ years React experience", met: true },
            { requirement: "TypeScript proficiency", met: true },
            { requirement: "AWS experience", met: false },
            { requirement: "Team leadership", met: true },
            { requirement: "Bachelor's degree", met: false }
          ].map((item, index) => (
            <div key={index} className="flex items-center gap-3 p-2 bg-slate-800/30 rounded-lg">
              <Checkbox 
                checked={item.met} 
                className={item.met ? "data-[state=checked]:bg-green-500" : ""}
              />
              <span className={`text-sm flex-1 ${item.met ? 'text-green-300' : 'text-slate-400'}`}>
                {item.requirement}
              </span>
              {item.met ? (
                <CheckCircle2 className="h-4 w-4 text-green-400" />
              ) : (
                <X className="h-4 w-4 text-red-400" />
              )}
            </div>
          ))}
        </div>
      )
    },
    {
      id: "pipeline-stage",
      title: "Pipeline Stage Selector",
      description: "Move candidates through hiring stages",
      code: `<Select>
  <SelectTrigger>
    <SelectValue placeholder="Select stage" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="applied">Applied</SelectItem>
    <SelectItem value="screening">Screening</SelectItem>
    <SelectItem value="interview">Interview</SelectItem>
    <SelectItem value="offer">Offer</SelectItem>
  </SelectContent>
</Select>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          <Label className="text-slate-300">Current Stage</Label>
          <Select>
            <SelectTrigger className="bg-slate-800/50 border-slate-600">
              <SelectValue placeholder="Select pipeline stage" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="applied">�"� Applied</SelectItem>
              <SelectItem value="screening">�'� Initial Screening</SelectItem>
              <SelectItem value="technical">�'� Technical Interview</SelectItem>
              <SelectItem value="cultural">🤝 Cultural Fit</SelectItem>
              <SelectItem value="final">🎯 Final Interview</SelectItem>
              <SelectItem value="offer">�'� Offer Extended</SelectItem>
              <SelectItem value="hired">✅ Hired</SelectItem>
            </SelectContent>
          </Select>
        </div>
      )
    },
    {
      id: "referral-tracking",
      title: "Referral Tracking",
      description: "Track employee referrals and rewards",
      code: `<Card>
  <CardContent className="p-4">
    <div className="flex items-center justify-between">
      <div>
        <h4 className="font-medium">Referred by John Doe</h4>
        <p className="text-sm text-muted-foreground">Engineering Team</p>
      </div>
      <Badge className="bg-green-500/20 text-green-300">$500 Bonus</Badge>
    </div>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="ring-2 ring-slate-600">
                  <AvatarFallback className="bg-green-500/20 text-green-300">JD</AvatarFallback>
                </Avatar>
                <div>
                  <h4 className="font-medium text-slate-100">Referred by John Doe</h4>
                  <p className="text-sm text-slate-400">Engineering Team</p>
                </div>
              </div>
              <Badge className="bg-green-500/20 text-green-300">$500 Bonus</Badge>
            </div>
            <div className="mt-3 pt-3 border-t border-slate-700">
              <div className="text-xs text-slate-500">Referral Status: Qualified</div>
            </div>
          </CardContent>
        </Card>
      )
    },
    {
      id: "candidate-timeline",
      title: "Candidate Activity Timeline",
      description: "Chronological view of candidate interactions",
      code: `<div className="space-y-4">
  <div className="flex gap-3">
    <div className="w-2 h-2 bg-blue-400 rounded-full mt-2"></div>
    <div>
      <p className="text-sm">Application submitted</p>
      <p className="text-xs text-muted-foreground">2 hours ago</p>
    </div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { event: "Application submitted", time: "2 hours ago", type: "application", color: "bg-blue-400" },
            { event: "Resume reviewed", time: "1 hour ago", type: "review", color: "bg-yellow-400" },
            { event: "Phone screening scheduled", time: "30 min ago", type: "interview", color: "bg-green-400" },
            { event: "Technical assessment sent", time: "15 min ago", type: "assessment", color: "bg-purple-400" }
          ].map((item, index) => (
            <div key={index} className="flex gap-3">
              <div className={`w-2 h-2 ${item.color} rounded-full mt-2 flex-shrink-0`}></div>
              <div className="flex-1">
                <p className="text-sm text-slate-300">{item.event}</p>
                <p className="text-xs text-slate-500">{item.time}</p>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "bulk-actions",
      title: "Bulk Actions Toolbar",
      description: "Perform actions on multiple candidates",
      code: `<div className="flex items-center gap-2 p-2 bg-slate-800 rounded-lg">
  <Checkbox />
  <span className="text-sm">3 selected</span>
  <div className="flex gap-2 ml-auto">
    <Button size="sm">Send Email</Button>
    <Button size="sm" variant="outline">Move to Stage</Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex items-center gap-2 p-3 bg-slate-800/50 rounded-xl border border-slate-700/50 shadow-xl">
            <Checkbox checked />
            <span className="text-sm text-slate-300">3 candidates selected</span>
            <div className="flex gap-2 ml-auto">
              <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">
                <Mail className="h-3 w-3 mr-1" />
                Email
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <ArrowRight className="h-3 w-3 mr-1" />
                Move
              </Button>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "diversity-metrics",
      title: "Diversity & Inclusion Tracker",
      description: "Track diversity metrics in hiring",
      code: `<Card>
  <CardHeader>
    <CardTitle>Diversity Metrics</CardTitle>
  </CardHeader>
  <CardContent>
    <div className="space-y-3">
      <div className="flex justify-between">
        <span>Gender Diversity</span>
        <span>60% / 40%</span>
      </div>
      <Progress value={60} />
    </div>
  </CardContent>
</Card>`,
      component: (
        <Card className="w-full max-w-md bg-slate-800/60 border-slate-600/50">
          <CardHeader>
            <CardTitle className="text-lg text-slate-100">Diversity Metrics</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {[
              { metric: "Gender Diversity", value: 60, target: "50%", current: "60% / 40%" },
              { metric: "Ethnic Diversity", value: 45, target: "40%", current: "45%" },
              { metric: "Age Diversity", value: 70, target: "60%", current: "70%" }
            ].map((item, index) => (
              <div key={index} className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-slate-300">{item.metric}</span>
                  <span className="text-slate-400">{item.current}</span>
                </div>
                <Progress value={item.value} className="h-2" />
                <div className="text-xs text-slate-500">Target: {item.target}</div>
              </div>
            ))}
          </CardContent>
        </Card>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
                <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Recruitment Components</h2>
            <p className="text-slate-400">Specialized components for talent acquisition and candidate management</p>
                  </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
                </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
                  </div>
        )}
      </section>
    </div>
  )
}

function FormComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "input-group",
      title: "Input Group",
      description: "Enhanced input components with validation states",
      code: `<div className="space-y-4">
  <Input placeholder="Enter your name..." className="bg-slate-900/50 border-slate-700" />
  <Input type="email" placeholder="email@example.com" className="bg-slate-900/50 border-slate-700" />
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div>
            <Label htmlFor="name" className="text-slate-300">Full Name</Label>
            <Input id="name" placeholder="Enter your name..." className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }} />
          </div>
          <div>
            <Label htmlFor="email" className="text-slate-300">Email Address</Label>
            <Input id="email" type="email" placeholder="email@example.com" className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }} />
          </div>
          <div>
            <Label htmlFor="phone" className="text-slate-300">Phone Number</Label>
            <Input id="phone" type="tel" placeholder="+1 (555) 123-4567" className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }} />
          </div>
        </div>
      )
    },
    {
      id: "form-controls",
      title: "Advanced Form Controls",
      description: "Switches, sliders, and selection components",
      code: `<div className="space-y-6">
  <Switch checked={true} />
  <Slider defaultValue={[50]} max={100} />
  <Select>
    <SelectTrigger>
      <SelectValue placeholder="Select option" />
    </SelectTrigger>
  </Select>
</div>`,
      component: (
        <div className="space-y-6 w-full max-w-md">
          <div className="flex items-center justify-between">
            <Label className="text-slate-300">Email Notifications</Label>
            <Switch defaultChecked />
          </div>
          <div className="space-y-2">
            <Label className="text-slate-300">Salary Range: $80k - $120k</Label>
            <Slider defaultValue={[80, 120]} max={200} min={40} step={5} className="mt-2" />
          </div>
          <div className="space-y-2">
            <Label className="text-slate-300">Experience Level</Label>
            <Select>
              <SelectTrigger className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <SelectValue placeholder="Select experience level" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="entry">Entry Level (0-2 years)</SelectItem>
                <SelectItem value="mid">Mid Level (3-5 years)</SelectItem>
                <SelectItem value="senior">Senior Level (5+ years)</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      )
    },
    {
      id: "textarea-field",
      title: "Textarea Field",
      description: "Multi-line text input with character count",
      code: `<div className="space-y-2">
  <Label>Cover Letter</Label>
  <Textarea placeholder="Write your cover letter..." />
  <div className="text-xs text-muted-foreground text-right">0 / 500 characters</div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          <Label className="text-slate-300">Cover Letter</Label>
          <Textarea 
            placeholder="Write your cover letter..." 
            className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg min-h-[100px]"
            style={{ transitionDuration: 'var(--animation-speed)' }}
          />
          <div className="text-xs text-slate-500 text-right">0 / 500 characters</div>
        </div>
      )
    },
    {
      id: "checkbox-group",
      title: "Checkbox Group",
      description: "Multiple selection checkboxes with labels",
      code: `<div className="space-y-3">
  <div className="flex items-center space-x-2">
    <Checkbox id="skill1" />
    <Label htmlFor="skill1">JavaScript</Label>
  </div>
  <div className="flex items-center space-x-2">
    <Checkbox id="skill2" />
    <Label htmlFor="skill2">React</Label>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          <Label className="text-slate-300">Skills (Select all that apply)</Label>
          {[
            { id: "js", label: "JavaScript", checked: true },
            { id: "react", label: "React", checked: true },
            { id: "node", label: "Node.js", checked: false },
            { id: "python", label: "Python", checked: true },
            { id: "aws", label: "AWS", checked: false }
          ].map((skill) => (
            <div key={skill.id} className="flex items-center space-x-2">
              <Checkbox id={skill.id} defaultChecked={skill.checked} />
              <Label htmlFor={skill.id} className="text-slate-300 text-sm">{skill.label}</Label>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "radio-group",
      title: "Radio Button Group",
      description: "Single selection radio buttons",
      code: `<RadioGroup defaultValue="remote">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="remote" id="remote" />
    <Label htmlFor="remote">Remote</Label>
  </div>
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="hybrid" id="hybrid" />
    <Label htmlFor="hybrid">Hybrid</Label>
  </div>
</RadioGroup>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          <Label className="text-slate-300">Work Preference</Label>
          <RadioGroup defaultValue="remote">
            {[
              { value: "remote", label: "Remote", icon: "� " },
              { value: "hybrid", label: "Hybrid", icon: "�" },
              { value: "onsite", label: "On-site", icon: "�" }
            ].map((option) => (
              <div key={option.value} className="flex items-center space-x-2">
                <RadioGroupItem value={option.value} id={option.value} />
                <Label htmlFor={option.value} className="text-slate-300 text-sm flex items-center gap-2">
                  <span>{option.icon}</span>
                  {option.label}
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>
      )
    },
    {
      id: "file-upload",
      title: "File Upload Field",
      description: "Drag and drop file upload with preview",
      code: `<div className="border-2 border-dashed border-slate-600 rounded-lg p-6 text-center">
  <Upload className="h-8 w-8 mx-auto mb-2 text-slate-400" />
  <p className="text-sm text-slate-400">Drop files here or click to upload</p>
  <Button className="mt-2" size="sm">Choose File</Button>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="border-2 border-dashed border-slate-600 rounded-lg p-6 text-center hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <Upload className="h-8 w-8 mx-auto mb-2 text-slate-400" />
            <p className="text-sm text-slate-400 mb-2">Drop resume here or click to upload</p>
            <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">Choose File</Button>
            <p className="text-xs text-slate-500 mt-2">PDF, DOC, DOCX up to 10MB</p>
          </div>
        </div>
      )
    },
    {
      id: "date-picker",
      title: "Date Picker",
      description: "Date selection with calendar popup",
      code: `<div className="space-y-2">
  <Label>Start Date</Label>
  <Input type="date" className="bg-slate-800/50 border-slate-600" />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          <Label className="text-slate-300">Available Start Date</Label>
          <Input 
            type="date" 
            className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg"
            style={{ transitionDuration: 'var(--animation-speed)' }}
          />
        </div>
      )
    },
    {
      id: "password-field",
      title: "Password Field",
      description: "Password input with visibility toggle",
      code: `<div className="space-y-2">
  <Label>Password</Label>
  <div className="relative">
    <Input type="password" placeholder="Enter password" />
    <Button variant="ghost" size="sm" className="absolute right-2 top-1/2 -translate-y-1/2">
      <Eye className="h-4 w-4" />
    </Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          <Label className="text-slate-300">Password</Label>
          <div className="relative">
            <Input 
              type="password" 
              placeholder="Enter password" 
              className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg pr-10"
              style={{ transitionDuration: 'var(--animation-speed)' }}
            />
            <Button variant="ghost" size="sm" className="absolute right-2 top-1/2 -translate-y-1/2 h-6 w-6 p-0 hover:bg-slate-700">
              <Eye className="h-3 w-3" />
            </Button>
          </div>
          <div className="text-xs text-slate-500">Must be at least 8 characters</div>
        </div>
      )
    },
    {
      id: "search-field",
      title: "Search Input",
      description: "Search input with icon and clear button",
      code: `<div className="relative">
  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
  <Input placeholder="Search..." className="pl-10" />
</div>`,
      component: (
        <div className="w-full max-w-md">
          <Label className="text-slate-300 mb-2 block">Search Candidates</Label>
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
            <Input 
              placeholder="Search by name, skills, or location..." 
              className="pl-10 pr-10 bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg"
              style={{ transitionDuration: 'var(--animation-speed)' }}
            />
            <Button variant="ghost" size="sm" className="absolute right-2 top-1/2 -translate-y-1/2 h-6 w-6 p-0 hover:bg-slate-700">
              <X className="h-3 w-3" />
            </Button>
          </div>
        </div>
      )
    },
    {
      id: "number-input",
      title: "Number Input",
      description: "Numeric input with increment/decrement buttons",
      code: `<div className="space-y-2">
  <Label>Years of Experience</Label>
  <Input type="number" min="0" max="50" defaultValue="5" />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          <Label className="text-slate-300">Years of Experience</Label>
          <Input 
            type="number" 
            min="0" 
            max="50" 
            defaultValue="5"
            className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg"
            style={{ transitionDuration: 'var(--animation-speed)' }}
          />
          <div className="text-xs text-slate-500">Enter 0-50 years</div>
        </div>
      )
    },
    {
      id: "multi-select",
      title: "Multi-Select Dropdown",
      description: "Select multiple options from dropdown",
      code: `<Select>
  <SelectTrigger>
    <SelectValue placeholder="Select skills..." />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="js">JavaScript</SelectItem>
    <SelectItem value="react">React</SelectItem>
    <SelectItem value="node">Node.js</SelectItem>
  </SelectContent>
</Select>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          <Label className="text-slate-300">Required Skills</Label>
          <Select>
            <SelectTrigger className="bg-slate-800/50 border-slate-600 hover:border-fuchsia-500/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <SelectValue placeholder="Select required skills..." />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="js">JavaScript</SelectItem>
              <SelectItem value="react">React</SelectItem>
              <SelectItem value="node">Node.js</SelectItem>
              <SelectItem value="python">Python</SelectItem>
              <SelectItem value="aws">AWS</SelectItem>
            </SelectContent>
          </Select>
          <div className="flex gap-1 flex-wrap mt-2">
            <Badge className="bg-blue-500/20 text-blue-300">JavaScript</Badge>
            <Badge className="bg-green-500/20 text-green-300">React</Badge>
          </div>
        </div>
      )
    },
    {
      id: "form-validation",
      title: "Form Validation",
      description: "Real-time validation with error states",
      code: `<div className="space-y-2">
  <Label>Email</Label>
  <Input type="email" className="border-red-500" />
  <p className="text-red-400 text-sm">Please enter a valid email address</p>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="space-y-2">
            <Label className="text-slate-300">Email Address</Label>
            <Input 
              type="email" 
              defaultValue="invalid-email"
              className="bg-slate-800/50 border-red-500 focus:border-red-500"
            />
            <p className="text-red-400 text-sm flex items-center gap-1">
              <AlertTriangle className="h-3 w-3" />
              Please enter a valid email address
            </p>
          </div>
          <div className="space-y-2">
            <Label className="text-slate-300">Password</Label>
            <Input 
              type="password" 
              defaultValue="password123"
              className="bg-slate-800/50 border-green-500 focus:border-green-500"
            />
            <p className="text-green-400 text-sm flex items-center gap-1">
              <CheckCircle2 className="h-3 w-3" />
              Password meets requirements
            </p>
          </div>
        </div>
      )
    },
    {
      id: "range-slider",
      title: "Range Slider",
      description: "Dual-handle range slider for min/max values",
      code: `<div className="space-y-4">
  <Label>Salary Range: $80k - $120k</Label>
  <Slider defaultValue={[80, 120]} max={200} min={40} step={5} />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="flex justify-between">
            <Label className="text-slate-300">Salary Expectation</Label>
            <span className="text-slate-400 text-sm">$80k - $120k</span>
          </div>
          <Slider defaultValue={[80, 120]} max={200} min={40} step={5} />
          <div className="flex justify-between text-xs text-slate-500">
            <span>$40k</span>
            <span>$200k+</span>
          </div>
        </div>
      )
    },
    {
      id: "toggle-switch",
      title: "Toggle Switches",
      description: "Binary toggle switches for preferences",
      code: `<div className="flex items-center justify-between">
  <Label>Email Notifications</Label>
  <Switch defaultChecked />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { label: "Email Notifications", checked: true },
            { label: "SMS Alerts", checked: false },
            { label: "Push Notifications", checked: true },
            { label: "Weekly Reports", checked: false }
          ].map((item, index) => (
            <div key={index} className="flex items-center justify-between p-2 bg-slate-800/30 rounded-lg">
              <Label className="text-slate-300">{item.label}</Label>
              <Switch defaultChecked={item.checked} />
            </div>
          ))}
        </div>
      )
    },
    {
      id: "form-sections",
      title: "Form Sections",
      description: "Organized form sections with collapsible areas",
      code: `<Card>
  <CardHeader>
    <CardTitle>Personal Information</CardTitle>
  </CardHeader>
  <CardContent className="space-y-4">
    <Input placeholder="First Name" />
    <Input placeholder="Last Name" />
  </CardContent>
</Card>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <Card className="bg-slate-800/30 border-slate-700">
            <CardHeader>
              <CardTitle className="text-lg text-slate-100">Personal Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Input placeholder="First Name" className="bg-slate-800/50 border-slate-600" />
              <Input placeholder="Last Name" className="bg-slate-800/50 border-slate-600" />
            </CardContent>
          </Card>
          <Card className="bg-slate-800/30 border-slate-700">
            <CardHeader>
              <CardTitle className="text-lg text-slate-100">Contact Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Input placeholder="Email Address" className="bg-slate-800/50 border-slate-600" />
              <Input placeholder="Phone Number" className="bg-slate-800/50 border-slate-600" />
            </CardContent>
          </Card>
        </div>
      )
    },
    {
      id: "form-progress",
      title: "Form Progress Indicator",
      description: "Step-by-step form progress visualization",
      code: `<div className="space-y-4">
  <div className="flex items-center gap-6">
    <div className="w-8 h-8 bg-fuchsia-500 rounded-full flex items-center justify-center text-white text-sm">1</div>
    <div className="flex-1 h-0.5 bg-fuchsia-500"></div>
    <div className="w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center text-slate-300 text-sm">2</div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="flex items-center gap-2">
            {[
              { step: 1, label: "Personal", completed: true },
              { step: 2, label: "Experience", completed: true },
              { step: 3, label: "Skills", completed: false },
              { step: 4, label: "Review", completed: false }
            ].map((item, index) => (
              <div key={index} className="flex items-center gap-2 flex-1">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  item.completed ? 'bg-fuchsia-500 text-white' : 'bg-slate-600 text-slate-300'
                }`}>
                  {item.completed ? <Check className="h-4 w-4" /> : item.step}
                </div>
                <span className="text-xs text-slate-400 hidden sm:inline">{item.label}</span>
                {index < 3 && (
                  <div className={`flex-1 h-0.5 ${item.completed ? 'bg-fuchsia-500' : 'bg-slate-600'}`}></div>
                )}
              </div>
            ))}
          </div>
          <div className="text-sm text-slate-300">Step 2 of 4: Work Experience</div>
          <Progress value={50} className="h-2" />
        </div>
      )
    },
    {
      id: "conditional-fields",
      title: "Conditional Form Fields",
      description: "Fields that appear based on previous selections",
      code: `<div className="space-y-4">
  <Select>
    <SelectTrigger>
      <SelectValue placeholder="Employment Type" />
    </SelectTrigger>
    <SelectContent>
      <SelectItem value="full-time">Full-time</SelectItem>
      <SelectItem value="contract">Contract</SelectItem>
    </SelectContent>
  </Select>
  {/* Conditional field appears when contract is selected */}
  <Input placeholder="Contract Duration (months)" />
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="space-y-2">
            <Label className="text-slate-300">Employment Type</Label>
            <Select>
              <SelectTrigger className="bg-slate-800/50 border-slate-600">
                <SelectValue placeholder="Select employment type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="full-time">Full-time Employee</SelectItem>
                <SelectItem value="contract">Contract Worker</SelectItem>
                <SelectItem value="freelance">Freelancer</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2 p-3 bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl">
            <Label className="text-slate-300 text-sm">Contract Details</Label>
            <Input placeholder="Contract duration (months)" className="bg-slate-800/50 border-slate-600" />
            <Input placeholder="Hourly rate" className="bg-slate-800/50 border-slate-600" />
          </div>
        </div>
      )
    },
    {
      id: "form-actions",
      title: "Form Action Buttons",
      description: "Submit, cancel, and secondary action buttons",
      code: `<div className="flex gap-2 justify-end">
  <Button variant="outline">Cancel</Button>
  <Button variant="secondary">Save Draft</Button>
  <Button>Submit Application</Button>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex gap-2 justify-end flex-wrap">
            <Button variant="outline" size="sm" className="hover:bg-slate-700">
              Cancel
            </Button>
            <Button variant="secondary" size="sm" className="hover:bg-slate-600">
              Save Draft
            </Button>
            <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">
              Submit Application
            </Button>
          </div>
          <div className="mt-3 text-xs text-slate-500 text-center">
            By submitting, you agree to our Terms of Service
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
              <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Form Components</h2>
            <p className="text-slate-400">Input controls and form patterns for data collection</p>
                    </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
              </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
              </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
                </div>
        )}
      </section>
    </div>
  )
}

function NavigationComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "breadcrumbs",
      title: "Breadcrumbs",
      description: "Navigation breadcrumb with hover effects",
      code: `<nav className="flex items-center gap-2 text-sm">
  <a href="#" className="text-slate-400 hover:text-white transition-all duration-300 rounded-lg">Dashboard</a>
  <ChevronRight className="h-4 w-4 text-slate-500" />
  <span className="text-white font-medium">Candidates</span>
</nav>`,
      component: (
        <nav className="flex items-center gap-2 text-sm">
          <a href="#" className="text-slate-400 hover:text-fuchsia-400 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Dashboard</a>
          <ChevronRight className="h-4 w-4 text-slate-500" />
          <a href="#" className="text-slate-400 hover:text-fuchsia-400 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Candidates</a>
          <ChevronRight className="h-4 w-4 text-slate-500" />
          <span className="text-fuchsia-300 font-medium">Sarah Johnson</span>
        </nav>
      )
    },
    {
      id: "tabs-enhanced",
      title: "Enhanced Tabs",
      description: "Animated tab navigation with icons",
      code: `<Tabs defaultValue="overview">
  <TabsList>
    <TabsTrigger value="overview">Overview</TabsTrigger>
    <TabsTrigger value="details">Details</TabsTrigger>
  </TabsList>
</Tabs>`,
      component: (
        <Tabs defaultValue="overview" className="w-full max-w-md">
          <TabsList className="grid w-full grid-cols-3 lg:grid-cols-9 h-auto p-3 bg-gradient-to-r from-slate-800/80 via-slate-800/90 to-slate-800/80 border border-slate-700/50 shadow-xl/60 rounded-3xl backdrop-blur-md shadow-2xl shadow-slate-900/40">
            <TabsTrigger value="overview" className="data-[state=active]:bg-fuchsia-500/20 data-[state=active]:text-fuchsia-300 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <User className="h-4 w-4 mr-2" />
              Profile
            </TabsTrigger>
            <TabsTrigger value="details" className="data-[state=active]:bg-fuchsia-500/20 data-[state=active]:text-fuchsia-300 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <Briefcase className="h-4 w-4 mr-2" />
              Experience
            </TabsTrigger>
            <TabsTrigger value="skills" className="data-[state=active]:bg-fuchsia-500/20 data-[state=active]:text-fuchsia-300 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <Star className="h-4 w-4 mr-2" />
              Skills
            </TabsTrigger>
          </TabsList>
          <TabsContent value="overview" className="mt-4 p-4 bg-slate-800/30 rounded-lg">
            <p className="text-sm text-slate-300">Personal information and contact details.</p>
          </TabsContent>
          <TabsContent value="details" className="mt-4 p-4 bg-slate-800/30 rounded-lg">
            <p className="text-sm text-slate-300">Work experience and employment history.</p>
          </TabsContent>
          <TabsContent value="skills" className="mt-4 p-4 bg-slate-800/30 rounded-lg">
            <p className="text-sm text-slate-300">Technical skills and expertise areas.</p>
          </TabsContent>
        </Tabs>
      )
    },
    {
      id: "sidebar-nav",
      title: "Sidebar Navigation",
      description: "Collapsible sidebar with menu items",
      code: `<nav className="w-64 lg:w-80 space-y-2">
  <a href="#" className="flex items-center gap-3 px-3 py-2 rounded-lg text-slate-300 hover:bg-slate-800 hover:text-white transition-all duration-300 rounded-lg">
    <Home className="h-5 w-5" />
    Dashboard
  </a>
</nav>`,
      component: (
        <nav className="w-full max-w-xs space-y-2">
          {[
            { icon: Home, label: "Dashboard", active: true },
            { icon: Users, label: "Candidates", active: false },
            { icon: Briefcase, label: "Jobs", active: false },
            { icon: Calendar, label: "Interviews", active: false },
            { icon: BarChart3, label: "Analytics", active: false },
            { icon: Settings, label: "Settings", active: false }
          ].map((item, index) => (
            <a
              key={index}
              href="#"
              className={`flex items-center gap-3 px-3 py-2 rounded-lg transition-all duration-300 rounded-lg ${
                item.active
                  ? 'bg-fuchsia-500/20 text-fuchsia-300 border border-fuchsia-500/30'
                  : 'text-slate-300 hover:bg-slate-800/50 hover:text-fuchsia-300'
              }`}
              style={{ transitionDuration: 'var(--animation-speed)' }}
            >
              <item.icon className="h-5 w-5" />
              {item.label}
            </a>
          ))}
        </nav>
      )
    },
    {
      id: "top-navigation",
      title: "Top Navigation Bar",
      description: "Horizontal navigation with dropdowns",
      code: `<nav className="flex items-center gap-6">
  <a href="#" className="text-slate-300 hover:text-white transition-all duration-300 rounded-lg">Home</a>
  <a href="#" className="text-slate-300 hover:text-white transition-all duration-300 rounded-lg">About</a>
  <a href="#" className="text-slate-300 hover:text-white transition-all duration-300 rounded-lg">Contact</a>
</nav>`,
      component: (
        <nav className="flex items-center gap-6 w-full max-w-md">
          {[
            { label: "Dashboard", active: true },
            { label: "Candidates", active: false },
            { label: "Jobs", active: false },
            { label: "Reports", active: false }
          ].map((item, index) => (
            <a
              key={index}
              href="#"
              className={`transition-all duration-300 rounded-lg font-medium ${
                item.active
                  ? 'text-fuchsia-300 border-b-2 border-fuchsia-500 pb-1'
                  : 'text-slate-300 hover:text-fuchsia-300'
              }`}
              style={{ transitionDuration: 'var(--animation-speed)' }}
            >
              {item.label}
            </a>
          ))}
        </nav>
      )
    },
    {
      id: "mobile-menu",
      title: "Mobile Menu",
      description: "Responsive hamburger menu for mobile",
      code: `<div className="md:hidden">
  <Button variant="ghost" size="sm">
    <Menu className="h-5 w-5" />
  </Button>
</div>`,
      component: (
        <div className="w-full max-w-sm">
          <div className="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
            <div className="flex items-center gap-2">
              <Hexagon className="h-6 w-6 text-fuchsia-400" />
              <span className="font-medium text-slate-200">Mobile Nav</span>
            </div>
            <Button variant="ghost" size="sm" className="hover:bg-slate-700">
              <Menu className="h-5 w-5" />
            </Button>
          </div>
          <div className="mt-2 p-3 bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl">
            <div className="space-y-2">
              {["Dashboard", "Candidates", "Jobs", "Settings"].map((item, index) => (
                <a
                  key={index}
                  href="#"
                  className="block px-3 py-2 text-slate-300 hover:text-fuchsia-300 hover:bg-slate-800/50 rounded transition-all duration-300 rounded-lg"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                >
                  {item}
                </a>
              ))}
            </div>
          </div>
        </div>
      )
    },
    {
      id: "pagination",
      title: "Pagination",
      description: "Page navigation with numbered pages",
      code: `<div className="flex items-center gap-2">
  <Button variant="outline" size="sm">
    <ArrowLeft className="h-4 w-4" />
  </Button>
  <Button variant="outline" size="sm">1</Button>
  <Button variant="outline" size="sm">2</Button>
  <Button variant="outline" size="sm">
    <ArrowRight className="h-4 w-4" />
  </Button>
</div>`,
      component: (
        <div className="flex items-center gap-2 flex-wrap">
          <Button variant="outline" size="sm" className="hover:bg-slate-700">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          {[1, 2, 3, 4, 5].map((page, index) => (
            <Button
              key={index}
              variant={page === 2 ? "default" : "outline"}
              size="sm"
              className={page === 2 ? "bg-fuchsia-500 hover:bg-fuchsia-600" : "hover:bg-slate-700"}
            >
              {page}
            </Button>
          ))}
          <span className="text-slate-400 mx-2">...</span>
          <Button variant="outline" size="sm" className="hover:bg-slate-700">
            10
          </Button>
          <Button variant="outline" size="sm" className="hover:bg-slate-700">
            <ArrowRight className="h-4 w-4" />
          </Button>
        </div>
      )
    },
    {
      id: "step-navigation",
      title: "Step Navigation",
      description: "Multi-step process navigation",
      code: `<div className="flex items-center gap-6">
  <div className="flex items-center gap-2">
    <div className="w-8 h-8 bg-fuchsia-500 rounded-full flex items-center justify-center text-white text-sm">1</div>
    <span className="text-fuchsia-300">Step 1</span>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-lg">
          <div className="flex items-center justify-between">
            {[
              { step: 1, label: "Application", completed: true, active: false },
              { step: 2, label: "Review", completed: true, active: false },
              { step: 3, label: "Interview", completed: false, active: true },
              { step: 4, label: "Decision", completed: false, active: false }
            ].map((item, index) => (
              <div key={index} className="flex items-center">
                <div className="flex flex-col items-center">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    item.completed
                      ? 'bg-green-500 text-white'
                      : item.active
                      ? 'bg-fuchsia-500 text-white'
                      : 'bg-slate-600 text-slate-300'
                  }`}>
                    {item.completed ? <Check className="h-4 w-4" /> : item.step}
                  </div>
                  <span className={`text-xs mt-1 ${
                    item.active ? 'text-fuchsia-300' : item.completed ? 'text-green-300' : 'text-slate-400'
                  }`}>
                    {item.label}
                  </span>
                </div>
                {index < 3 && (
                  <div className={`w-12 h-0.5 mx-2 ${
                    item.completed ? 'bg-green-500' : 'bg-slate-600'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "dropdown-menu",
      title: "Dropdown Menu",
      description: "Context menu with multiple options",
      code: `<div className="relative">
  <Button variant="outline" className="flex items-center gap-2">
    Options
    <ChevronRight className="h-4 w-4 rotate-90" />
  </Button>
</div>`,
      component: (
        <div className="w-full max-w-xs">
          <Button variant="outline" className="w-full justify-between hover:bg-slate-700">
            User Menu
            <ChevronRight className="h-4 w-4 rotate-90" />
          </Button>
          <div className="mt-2 p-2 bg-slate-800/50 border border-slate-700/50 shadow-xl rounded-lg space-y-1">
            {[
              { icon: User, label: "Profile" },
              { icon: Settings, label: "Settings" },
              { icon: Bell, label: "Notifications" },
              { icon: HelpCircle, label: "Help" }
            ].map((item, index) => (
              <a
                key={index}
                href="#"
                className="flex items-center gap-3 px-3 py-2 text-slate-300 hover:text-fuchsia-300 hover:bg-slate-800/50 rounded transition-all duration-300 rounded-lg"
                style={{ transitionDuration: 'var(--animation-speed)' }}
              >
                <item.icon className="h-4 w-4" />
                {item.label}
              </a>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "quick-nav",
      title: "Quick Navigation",
      description: "Fast access navigation buttons",
      code: `<div className="flex gap-2">
  <Button size="sm" variant="outline">
    <ArrowLeft className="h-4 w-4 mr-2" />
    Back
  </Button>
  <Button size="sm">
    Next
    <ArrowRight className="h-4 w-4 ml-2" />
  </Button>
</div>`,
      component: (
        <div className="flex gap-2 flex-wrap">
          <Button size="sm" variant="outline" className="hover:bg-slate-700">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>
          <Button size="sm" variant="outline" className="hover:bg-slate-700">
            <Home className="h-4 w-4 mr-2" />
            Home
          </Button>
          <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">
            Continue
            <ArrowRight className="h-4 w-4 ml-2" />
          </Button>
        </div>
      )
    },
    {
      id: "filter-nav",
      title: "Filter Navigation",
      description: "Navigation with filter options",
      code: `<div className="flex items-center gap-6">
  <div className="flex gap-2">
    <Button variant="outline" size="sm">All</Button>
    <Button variant="outline" size="sm">Active</Button>
    <Button variant="outline" size="sm">Pending</Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex flex-wrap gap-2 mb-3">
            {[
              { label: "All", count: 156, active: true },
              { label: "Active", count: 89, active: false },
              { label: "Under Review", count: 34, active: false },
              { label: "Interviewed", count: 23, active: false },
              { label: "Hired", count: 10, active: false }
            ].map((filter, index) => (
              <Button
                key={index}
                variant={filter.active ? "default" : "outline"}
                size="sm"
                className={filter.active
                  ? "bg-fuchsia-500 hover:bg-fuchsia-600"
                  : "hover:bg-slate-700"
                }
              >
                {filter.label}
                <Badge className="ml-2 bg-slate-600 text-slate-200 text-xs">
                  {filter.count}
                </Badge>
              </Button>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "floating-nav",
      title: "Floating Navigation",
      description: "Floating action navigation",
      code: `<div className="fixed bottom-4 right-4 flex flex-col gap-2">
  <Button size="sm" className="rounded-full w-12 h-12">
    <Plus className="h-5 w-5" />
  </Button>
</div>`,
      component: (
        <div className="relative w-full max-w-xs h-32">
          <div className="absolute bottom-4 right-4 flex flex-col gap-2">
            <Button size="sm" className="rounded-full w-10 h-10 bg-fuchsia-500 hover:bg-fuchsia-600 shadow-lg">
              <Plus className="h-4 w-4" />
            </Button>
            <Button size="sm" className="rounded-full w-10 h-10 bg-blue-500 hover:bg-blue-600 shadow-lg">
              <MessageSquare className="h-4 w-4" />
            </Button>
            <Button size="sm" className="rounded-full w-10 h-10 bg-green-500 hover:bg-green-600 shadow-lg">
              <Phone className="h-4 w-4" />
            </Button>
          </div>
        </div>
      )
    },
    {
      id: "contextual-nav",
      title: "Contextual Navigation",
      description: "Context-aware navigation options",
      code: `<div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
  <div className="flex items-center gap-3">
    <Avatar><AvatarFallback>SJ</AvatarFallback></Avatar>
    <div>
      <h4 className="font-medium">Sarah Johnson</h4>
      <p className="text-sm text-slate-400">Frontend Developer</p>
    </div>
  </div>
  <div className="flex gap-2">
    <Button size="sm" variant="outline">View</Button>
    <Button size="sm">Contact</Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl">
            <div className="flex items-center gap-3">
              <Avatar>
                <AvatarFallback className="bg-fuchsia-500/20 text-fuchsia-300">SJ</AvatarFallback>
              </Avatar>
              <div>
                <h4 className="font-medium text-slate-200">Sarah Johnson</h4>
                <p className="text-sm text-slate-400">Frontend Developer</p>
              </div>
            </div>
            <div className="flex gap-2">
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <Eye className="h-3 w-3 mr-1" />
                View
              </Button>
              <Button size="sm" className="bg-fuchsia-500 hover:bg-fuchsia-600">
                <Mail className="h-3 w-3 mr-1" />
                Contact
              </Button>
            </div>
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Navigation Components</h2>
            <p className="text-slate-400">Navigation patterns and wayfinding elements</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function FeedbackComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "alerts",
      title: "Alert Messages",
      description: "Contextual alert components with animations",
      code: `<Alert className="border-green-500/50 bg-green-500/10">
  <CheckCircle2 className="h-4 w-4 text-green-400" />
  <AlertTitle>Success</AlertTitle>
  <AlertDescription>Your action was completed successfully.</AlertDescription>
</Alert>`,
      component: (
        <div className="space-y-4 w-full">
          <Alert className="border-green-500/50 bg-green-500/10 hover:bg-green-500/15 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <CheckCircle2 className="h-4 w-4 text-green-400" />
            <AlertTitle className="text-green-200">Success</AlertTitle>
            <AlertDescription className="text-green-200">
              Your action was completed successfully.
            </AlertDescription>
          </Alert>
          <Alert className="border-yellow-500/50 bg-yellow-500/10 hover:bg-yellow-500/15 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <AlertTriangle className="h-4 w-4 text-yellow-400" />
            <AlertTitle className="text-yellow-200">Warning</AlertTitle>
            <AlertDescription className="text-yellow-200">
              Please review this information carefully.
            </AlertDescription>
          </Alert>
        </div>
      )
    },
    {
      id: "progress",
      title: "Progress Indicators",
      description: "Animated progress bars and loading states",
      code: `<div className="space-y-4">
  <Progress value={75} className="h-2" />
  <div className="animate-spin rounded-full h-6 w-6 border-2 border-fuchsia-400 border-t-transparent" />
</div>`,
      component: (
        <div className="space-y-6 w-full max-w-md">
          <div>
            <div className="flex justify-between text-sm mb-2">
              <span className="text-slate-300">Profile Completion</span>
              <span className="text-slate-300">85%</span>
            </div>
            <Progress value={85} className="h-3" />
          </div>
          <div className="flex items-center gap-6">
            <div className="animate-spin rounded-full h-6 w-6 border-2 border-fuchsia-400 border-t-transparent"></div>
            <span className="text-sm text-slate-300">Loading candidates...</span>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
            </div>
            <span className="text-sm text-slate-300">Processing...</span>
          </div>
        </div>
      )
    },
    {
      id: "toast-notifications",
      title: "Toast Notifications",
      description: "Dismissible toast messages",
      code: `<div className="fixed top-4 right-4 bg-slate-800 border border-slate-700/50 shadow-xl rounded-lg p-4 shadow-lg">
  <div className="flex items-center gap-3">
    <CheckCircle2 className="h-5 w-5 text-green-400" />
    <div>
      <h4 className="font-medium">Application Submitted</h4>
      <p className="text-sm text-slate-400">Your application has been received.</p>
    </div>
    <Button variant="ghost" size="sm">
      <X className="h-4 w-4" />
    </Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            { 
              type: "success", 
              title: "Application Submitted", 
              message: "Your application has been received.",
              icon: CheckCircle2,
              color: "text-green-400",
              bg: "bg-green-500/10 border-green-500/30"
            },
            { 
              type: "info", 
              title: "Interview Scheduled", 
              message: "Check your email for details.",
              icon: Info,
              color: "text-blue-400",
              bg: "bg-blue-500/10 border-blue-500/30"
            },
            { 
              type: "warning", 
              title: "Profile Incomplete", 
              message: "Please complete your profile.",
              icon: AlertTriangle,
              color: "text-yellow-400",
              bg: "bg-yellow-500/10 border-yellow-500/30"
            }
          ].map((toast, index) => (
            <div key={index} className={`${toast.bg} border rounded-lg p-3 animate-in slide-in-from-right`}>
              <div className="flex items-start gap-3">
                <toast.icon className={`h-5 w-5 ${toast.color} flex-shrink-0 mt-0.5`} />
                <div className="flex-1">
                  <h4 className="font-medium text-slate-200 text-sm">{toast.title}</h4>
                  <p className="text-xs text-slate-400 mt-1">{toast.message}</p>
                </div>
                <Button variant="ghost" size="sm" className="h-6 w-6 p-0 hover:bg-slate-700">
                  <X className="h-3 w-3" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "skeleton-loading",
      title: "Skeleton Loading",
      description: "Skeleton placeholders while content loads",
      code: `<div className="space-y-3">
  <div className="h-4 bg-slate-700 rounded animate-pulse"></div>
  <div className="h-4 bg-slate-700 rounded animate-pulse w-3/4"></div>
  <div className="h-4 bg-slate-700 rounded animate-pulse w-1/2"></div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="space-y-3">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-slate-700 rounded-full animate-pulse"></div>
              <div className="space-y-2 flex-1">
                <div className="h-4 bg-slate-700 rounded animate-pulse"></div>
                <div className="h-3 bg-slate-700 rounded animate-pulse w-3/4"></div>
              </div>
            </div>
          </div>
          <div className="space-y-2">
            <div className="h-3 bg-slate-700 rounded animate-pulse"></div>
            <div className="h-3 bg-slate-700 rounded animate-pulse w-5/6"></div>
            <div className="h-3 bg-slate-700 rounded animate-pulse w-2/3"></div>
          </div>
          <div className="flex gap-2">
            <div className="h-8 w-16 bg-slate-700 rounded animate-pulse"></div>
            <div className="h-8 w-12 bg-slate-700 rounded animate-pulse"></div>
          </div>
        </div>
      )
    },
    {
      id: "status-indicators",
      title: "Status Indicators",
      description: "Visual status and state indicators",
      code: `<div className="flex items-center gap-2">
  <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
  <span className="text-sm">Online</span>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { status: "Online", color: "bg-green-400", pulse: true },
            { status: "Away", color: "bg-yellow-400", pulse: false },
            { status: "Busy", color: "bg-red-400", pulse: true },
            { status: "Offline", color: "bg-slate-600", pulse: false }
          ].map((item, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
              <div className="flex items-center gap-3">
                <div className={`w-3 h-3 ${item.color} rounded-full ${item.pulse ? 'animate-pulse' : ''}`}></div>
                <span className="text-sm text-slate-300">{item.status}</span>
              </div>
              <Badge className="bg-slate-700 text-slate-300 text-xs">
                {index === 0 ? "24" : index === 1 ? "8" : index === 2 ? "3" : "0"} users
              </Badge>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "rating-feedback",
      title: "Rating & Feedback",
      description: "Star ratings and thumbs up/down feedback",
      code: `<div className="space-y-4">
  <div className="flex items-center gap-2">
    <Star className="h-5 w-5 fill-yellow-400 text-yellow-400" />
    <span>4.5/5</span>
  </div>
  <div className="flex gap-2">
    <Button size="sm" variant="outline">
      <ThumbsUp className="h-4 w-4" />
    </Button>
    <Button size="sm" variant="outline">
      <ThumbsDown className="h-4 w-4" />
    </Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-slate-300 text-sm">Rate this candidate</span>
              <div className="flex gap-1">
                {[1,2,3,4,5].map(star => (
                  <Star 
                    key={star} 
                    className={`h-4 w-4 cursor-pointer transition-all duration-300 rounded-lg ${
                      star <= 4 ? 'fill-yellow-400 text-yellow-400' : 'text-slate-600 hover:text-yellow-400'
                    }`}
                    style={{ transitionDuration: 'var(--animation-speed)' }}
                  />
                ))}
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-slate-300 text-sm">Was this helpful?</span>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" className="hover:bg-green-500/20 hover:border-green-500/50 hover:text-green-300">
                  <ThumbsUp className="h-3 w-3 mr-1" />
                  Yes
                </Button>
                <Button size="sm" variant="outline" className="hover:bg-red-500/20 hover:border-red-500/50 hover:text-red-300">
                  <ThumbsDown className="h-3 w-3 mr-1" />
                  No
                </Button>
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "error-states",
      title: "Error States",
      description: "Error messages and retry actions",
      code: `<Alert className="border-red-500/50 bg-red-500/10">
  <AlertCircle className="h-4 w-4 text-red-400" />
  <AlertTitle>Error</AlertTitle>
  <AlertDescription>Something went wrong. Please try again.</AlertDescription>
</Alert>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          <Alert className="border-red-500/50 bg-red-500/10">
            <AlertCircle className="h-4 w-4 text-red-400" />
            <AlertTitle className="text-red-200">Connection Error</AlertTitle>
            <AlertDescription className="text-red-200">
              Unable to load candidates. Please check your connection.
            </AlertDescription>
          </Alert>
          <div className="text-center py-8">
            <AlertCircle className="h-12 w-12 text-red-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-slate-200 mb-2">Something went wrong</h3>
            <p className="text-sm text-slate-400 mb-4">We couldn't load the candidate data.</p>
            <div className="flex gap-2 justify-center">
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <RefreshCw className="h-3 w-3 mr-1" />
                Retry
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <HelpCircle className="h-3 w-3 mr-1" />
                Get Help
              </Button>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "confirmation-dialogs",
      title: "Confirmation Dialogs",
      description: "Confirmation prompts for destructive actions",
      code: `<Card className="p-6 border-red-500/30 bg-red-500/5">
  <div className="text-center">
    <AlertTriangle className="h-12 w-12 text-red-400 mx-auto mb-4" />
    <h3 className="text-lg font-medium mb-2">Delete Candidate?</h3>
    <p className="text-sm text-slate-400 mb-6">This action cannot be undone.</p>
    <div className="flex gap-2 justify-center">
      <Button variant="outline">Cancel</Button>
      <Button className="bg-red-600 hover:bg-red-700">Delete</Button>
    </div>
  </div>
</Card>`,
      component: (
        <div className="w-full max-w-md">
          <Card className="p-6 border-red-500/30 bg-red-500/5">
            <div className="text-center">
              <AlertTriangle className="h-12 w-12 text-red-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-slate-200 mb-2">Delete Candidate?</h3>
              <p className="text-sm text-slate-400 mb-6">
                This will permanently remove Sarah Johnson from your database. This action cannot be undone.
              </p>
              <div className="flex gap-3 justify-center">
                <Button variant="outline" size="sm" className="hover:bg-slate-700">
                  Cancel
                </Button>
                <Button size="sm" className="bg-red-600 hover:bg-red-700">
                  Delete Candidate
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Feedback Components</h2>
            <p className="text-slate-400">Alerts, notifications, and user feedback elements</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function DataDisplayComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "data-table",
      title: "Data Table",
      description: "Interactive table with sorting and selection",
      code: `<table className="w-full">
  <thead>
    <tr className="border-b border-slate-700">
      <th className="text-left py-3 px-4">Name</th>
      <th className="text-left py-3 px-4">Status</th>
    </tr>
  </thead>
  <tbody>
    <tr className="hover:bg-slate-800/30">
      <td className="py-3 px-4">Sarah Johnson</td>
      <td className="py-3 px-4"><Badge>Active</Badge></td>
    </tr>
  </tbody>
</table>`,
      component: (
        <div className="w-full max-w-2xl">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-slate-700">
                  <th className="text-left py-3 px-4 font-medium text-slate-300">Name</th>
                  <th className="text-left py-3 px-4 font-medium text-slate-300">Position</th>
                  <th className="text-left py-3 px-4 font-medium text-slate-300">Status</th>
                </tr>
              </thead>
              <tbody>
                {[
                  { name: "Sarah Johnson", position: "Frontend Dev", status: "Active", statusColor: "bg-green-500/20 text-green-300" },
                  { name: "Michael Kim", position: "Designer", status: "Review", statusColor: "bg-yellow-500/20 text-yellow-300" },
                  { name: "Alex Liu", position: "Full Stack", status: "Interview", statusColor: "bg-blue-500/20 text-blue-300" }
                ].map((candidate, index) => (
                  <tr key={index} className="border-b border-slate-800 hover:bg-slate-800/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                    <td className="py-3 px-4 text-slate-300">{candidate.name}</td>
                    <td className="py-3 px-4 text-slate-400">{candidate.position}</td>
                    <td className="py-3 px-4">
                      <Badge className={candidate.statusColor}>{candidate.status}</Badge>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    },
    {
      id: "metrics-cards",
      title: "Metrics Cards",
      description: "KPI cards with trend indicators",
      code: `<Card>
  <CardContent className="p-6">
    <div className="flex items-center justify-between">
      <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
        <Users className="h-6 w-6 text-blue-400" />
      </div>
      <Badge className="bg-green-500/20 text-green-300">+12%</Badge>
    </div>
    <div className="text-2xl font-bold mt-4">1,234</div>
    <div className="text-sm text-muted-foreground">Total Candidates</div>
  </CardContent>
</Card>`,
      component: (
        <div className="grid grid-cols-2 gap-6 w-full max-w-lg">
          {[
            { title: "Total Candidates", value: "1,234", change: "+12%", icon: Users, color: "text-blue-400", bgColor: "bg-blue-500/20" },
            { title: "Active Jobs", value: "89", change: "+8%", icon: Briefcase, color: "text-purple-400", bgColor: "bg-purple-500/20" },
            { title: "Interviews", value: "24", change: "+18%", icon: Calendar, color: "text-green-400", bgColor: "bg-green-500/20" },
            { title: "Avg. Time", value: "18 days", change: "-5 days", icon: Clock, color: "text-orange-400", bgColor: "bg-orange-500/20" }
          ].map((metric, index) => (
            <Card key={index} className="bg-slate-800/30 border-slate-700 hover:bg-slate-800/50 transition-all group" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className={`w-10 h-10 ${metric.bgColor} rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform`} style={{ transitionDuration: 'var(--animation-speed)' }}>
                    <metric.icon className={`h-5 w-5 ${metric.color}`} />
                  </div>
                  <Badge className="bg-green-500/20 text-green-300 border-green-500/30 text-xs">
                    {metric.change}
                  </Badge>
                </div>
                <div className="text-xl font-bold mb-1">{metric.value}</div>
                <div className="text-xs text-slate-400">{metric.title}</div>
              </CardContent>
            </Card>
          ))}
        </div>
      )
    },
    {
      id: "statistics-grid",
      title: "Statistics Grid",
      description: "Grid layout for displaying key statistics",
      code: `<div className="grid grid-cols-3 gap-6">
  <div className="text-center">
    <div className="text-2xl font-bold">156</div>
    <div className="text-sm text-muted-foreground">Total</div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="grid grid-cols-3 gap-6">
            {[
              { value: "156", label: "Total Candidates", color: "text-blue-400" },
              { value: "89", label: "Active Applications", color: "text-green-400" },
              { value: "34", label: "In Review", color: "text-yellow-400" },
              { value: "23", label: "Interviewed", color: "text-purple-400" },
              { value: "10", label: "Hired", color: "text-emerald-400" },
              { value: "67", label: "Open Positions", color: "text-orange-400" }
            ].map((stat, index) => (
              <div key={index} className="text-center p-3 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <div className={`text-2xl font-bold ${stat.color}`}>{stat.value}</div>
                <div className="text-xs text-slate-400 mt-1">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "chart-placeholder",
      title: "Chart Placeholder",
      description: "Placeholder for charts and data visualizations",
      code: `<div className="aspect-video bg-slate-900/50 border border-slate-700/50 shadow-xl rounded-lg flex items-center justify-center">
  <div className="text-center">
    <BarChart3 className="h-12 w-12 text-slate-400 mx-auto mb-2" />
    <p className="text-sm text-slate-400">Chart will render here</p>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="aspect-video bg-slate-800/50 border border-slate-600 rounded-lg flex items-center justify-center hover:border-slate-500 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <div className="text-center">
              <BarChart3 className="h-12 w-12 text-slate-400 mx-auto mb-3" />
              <p className="text-sm text-slate-400 mb-1">Hiring Trends Chart</p>
              <p className="text-xs text-slate-500">Interactive chart will render here</p>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "list-view",
      title: "List View",
      description: "Structured list display with actions",
      code: `<div className="space-y-2">
  <div className="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
    <div>
      <h4 className="font-medium">Item Title</h4>
      <p className="text-sm text-slate-400">Item description</p>
    </div>
    <Button size="sm">Action</Button>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-2">
          {[
            { title: "Sarah Johnson", subtitle: "Senior Frontend Developer", action: "View Profile", status: "Available" },
            { title: "Michael Kim", subtitle: "UX/UI Designer", action: "Schedule", status: "Interviewing" },
            { title: "Alex Liu", subtitle: "Full Stack Engineer", action: "Contact", status: "Under Review" }
          ].map((item, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <div className="flex items-center gap-3">
                <Avatar className="h-10 w-10">
                  <AvatarFallback className="bg-fuchsia-500/20 text-fuchsia-300">{item.title.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                </Avatar>
                <div>
                  <h4 className="font-medium text-slate-200">{item.title}</h4>
                  <p className="text-sm text-slate-400">{item.subtitle}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge className="bg-blue-500/20 text-blue-300 text-xs">{item.status}</Badge>
                <Button size="sm" variant="outline" className="hover:bg-slate-700">{item.action}</Button>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "timeline-view",
      title: "Timeline View",
      description: "Chronological timeline display",
      code: `<div className="space-y-4">
  <div className="flex gap-3">
    <div className="w-2 h-2 bg-blue-400 rounded-full mt-2"></div>
    <div>
      <p className="text-sm">Event description</p>
      <p className="text-xs text-slate-400">2 hours ago</p>
    </div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { event: "Application submitted by Sarah Johnson", time: "2 hours ago", type: "application", color: "bg-blue-400" },
            { event: "Initial screening completed", time: "1 day ago", type: "review", color: "bg-yellow-400" },
            { event: "Technical interview scheduled", time: "2 days ago", type: "interview", color: "bg-green-400" },
            { event: "Reference check initiated", time: "3 days ago", type: "reference", color: "bg-purple-400" },
            { event: "Final interview completed", time: "1 week ago", type: "final", color: "bg-orange-400" }
          ].map((item, index) => (
            <div key={index} className="flex gap-3">
              <div className={`w-3 h-3 ${item.color} rounded-full mt-1 flex-shrink-0`}></div>
              <div className="flex-1">
                <p className="text-sm text-slate-300">{item.event}</p>
                <p className="text-xs text-slate-500">{item.time}</p>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "data-cards",
      title: "Data Cards",
      description: "Card-based data presentation",
      code: `<Card>
  <CardHeader>
    <CardTitle>Data Title</CardTitle>
    <CardDescription>Data description</CardDescription>
  </CardHeader>
  <CardContent>
    <div className="text-3xl font-bold">42</div>
  </CardContent>
</Card>`,
      component: (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-lg">
          {[
            { title: "Applications Today", value: "42", description: "New applications received", trend: "+15%" },
            { title: "Interviews Scheduled", value: "8", description: "This week", trend: "+25%" }
          ].map((card, index) => (
            <Card key={index} className="bg-slate-800/30 border-slate-700 hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg text-slate-100">{card.title}</CardTitle>
                <CardDescription className="text-slate-400">{card.description}</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-end justify-between">
                  <div className="text-3xl font-bold text-slate-100">{card.value}</div>
                  <Badge className="bg-green-500/20 text-green-300">{card.trend}</Badge>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )
    },
    {
      id: "comparison-table",
      title: "Comparison Table",
      description: "Side-by-side comparison of data",
      code: `<table className="w-full">
  <thead>
    <tr>
      <th className="text-left">Feature</th>
      <th className="text-center">Plan A</th>
      <th className="text-center">Plan B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Feature 1</td>
      <td className="text-center"><Check className="h-4 w-4 text-green-400 mx-auto" /></td>
      <td className="text-center"><X className="h-4 w-4 text-red-400 mx-auto" /></td>
    </tr>
  </tbody>
</table>`,
      component: (
        <div className="w-full max-w-md">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-slate-700">
                  <th className="text-left py-3 px-4 font-medium text-slate-300">Skills</th>
                  <th className="text-center py-3 px-4 font-medium text-slate-300">Sarah J.</th>
                  <th className="text-center py-3 px-4 font-medium text-slate-300">Michael K.</th>
                </tr>
              </thead>
              <tbody>
                {[
                  { skill: "React", sarah: true, michael: true },
                  { skill: "Node.js", sarah: true, michael: false },
                  { skill: "TypeScript", sarah: true, michael: true },
                  { skill: "AWS", sarah: false, michael: true }
                ].map((row, index) => (
                  <tr key={index} className="border-b border-slate-800">
                    <td className="py-3 px-4 text-slate-300">{row.skill}</td>
                    <td className="py-3 px-4 text-center">
                      {row.sarah ? (
                        <Check className="h-4 w-4 text-green-400 mx-auto" />
                      ) : (
                        <X className="h-4 w-4 text-red-400 mx-auto" />
                      )}
                    </td>
                    <td className="py-3 px-4 text-center">
                      {row.michael ? (
                        <Check className="h-4 w-4 text-green-400 mx-auto" />
                      ) : (
                        <X className="h-4 w-4 text-red-400 mx-auto" />
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    },
    {
      id: "key-value-pairs",
      title: "Key-Value Display",
      description: "Simple key-value pair presentation",
      code: `<div className="space-y-3">
  <div className="flex justify-between">
    <span className="text-slate-400">Email:</span>
    <span className="text-slate-200">user@example.com</span>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            { key: "Email", value: "sarah.johnson@email.com" },
            { key: "Phone", value: "+1 (555) 123-4567" },
            { key: "Location", value: "San Francisco, CA" },
            { key: "Experience", value: "5 years" },
            { key: "Salary Range", value: "$120k - $150k" },
            { key: "Availability", value: "Immediately" }
          ].map((item, index) => (
            <div key={index} className="flex justify-between py-2 border-b border-slate-800 last:border-b-0">
              <span className="text-slate-400 text-sm">{item.key}:</span>
              <span className="text-slate-200 text-sm font-medium">{item.value}</span>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "progress-bars",
      title: "Progress Bars",
      description: "Multiple progress indicators",
      code: `<div className="space-y-4">
  <div>
    <div className="flex justify-between mb-2">
      <span>Progress</span>
      <span>75%</span>
    </div>
    <Progress value={75} />
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            { label: "Profile Completion", value: 85, color: "bg-green-500" },
            { label: "Application Progress", value: 60, color: "bg-blue-500" },
            { label: "Interview Preparation", value: 40, color: "bg-yellow-500" },
            { label: "Reference Check", value: 90, color: "bg-purple-500" }
          ].map((item, index) => (
            <div key={index}>
              <div className="flex justify-between mb-2">
                <span className="text-slate-300 text-sm">{item.label}</span>
                <span className="text-slate-400 text-sm">{item.value}%</span>
              </div>
              <Progress value={item.value} className="h-2" />
            </div>
          ))}
        </div>
      )
    },
    {
      id: "tag-cloud",
      title: "Tag Cloud",
      description: "Collection of tags or labels",
      code: `<div className="flex flex-wrap gap-2">
  <Badge>JavaScript</Badge>
  <Badge>React</Badge>
  <Badge>Node.js</Badge>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="flex flex-wrap gap-2">
            {[
              { tag: "JavaScript", size: "text-sm", color: "bg-yellow-500/20 text-yellow-300" },
              { tag: "React", size: "text-base", color: "bg-blue-500/20 text-blue-300" },
              { tag: "Node.js", size: "text-sm", color: "bg-green-500/20 text-green-300" },
              { tag: "TypeScript", size: "text-xs", color: "bg-purple-500/20 text-purple-300" },
              { tag: "AWS", size: "text-sm", color: "bg-orange-500/20 text-orange-300" },
              { tag: "Docker", size: "text-xs", color: "bg-cyan-500/20 text-cyan-300" },
              { tag: "GraphQL", size: "text-xs", color: "bg-pink-500/20 text-pink-300" },
              { tag: "MongoDB", size: "text-sm", color: "bg-emerald-500/20 text-emerald-300" }
            ].map((item, index) => (
              <Badge 
                key={index} 
                className={`${item.color} ${item.size} hover:scale-105 transition-transform cursor-pointer`}
                style={{ transitionDuration: 'var(--animation-speed)' }}
              >
                {item.tag}
              </Badge>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "summary-cards",
      title: "Summary Cards",
      description: "Summary information in card format",
      code: `<Card>
  <CardContent className="p-6">
    <div className="flex items-center gap-6">
      <Avatar>
        <AvatarFallback>SJ</AvatarFallback>
      </Avatar>
      <div>
        <h3 className="font-medium">Summary Title</h3>
        <p className="text-sm text-slate-400">Summary details</p>
      </div>
    </div>
  </CardContent>
</Card>`,
      component: (
        <div className="w-full max-w-md space-y-4">
          {[
            {
              title: "Top Candidate",
              name: "Sarah Johnson",
              details: "5 years experience • React Expert",
              score: "98%",
              avatar: "SJ",
              color: "bg-green-500/20 text-green-300"
            },
            {
              title: "Recent Application",
              name: "Michael Kim",
              details: "3 years experience • UI/UX Designer",
              score: "92%",
              avatar: "MK",
              color: "bg-blue-500/20 text-blue-300"
            }
          ].map((item, index) => (
            <Card key={index} className="bg-slate-800/30 border-slate-700 hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <CardContent className="p-4">
                <div className="flex items-center gap-6">
                  <Avatar className="ring-2 ring-slate-600">
                    <AvatarFallback className={item.color}>{item.avatar}</AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <h3 className="font-medium text-slate-200">{item.title}</h3>
                      <Badge className="bg-fuchsia-500/20 text-fuchsia-300">{item.score}</Badge>
                    </div>
                    <h4 className="font-medium text-slate-100 text-sm">{item.name}</h4>
                    <p className="text-xs text-slate-400">{item.details}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )
    },
    {
      id: "data-grid",
      title: "Data Grid",
      description: "Grid layout for structured data",
      code: `<div className="grid grid-cols-2 md:grid-cols-4 gap-6">
  <div className="bg-slate-800/30 p-4 rounded-lg">
    <div className="text-lg font-bold">42</div>
    <div className="text-sm text-slate-400">Metric</div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-lg">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {[
              { value: "156", label: "Total", icon: Users, color: "text-blue-400" },
              { value: "89", label: "Active", icon: Zap, color: "text-green-400" },
              { value: "34", label: "Pending", icon: Clock, color: "text-yellow-400" },
              { value: "23", label: "Hired", icon: Award, color: "text-purple-400" }
            ].map((item, index) => (
              <div key={index} className="bg-slate-800/30 p-4 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg text-center" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <item.icon className={`h-6 w-6 ${item.color} mx-auto mb-2`} />
                <div className="text-lg font-bold text-slate-100">{item.value}</div>
                <div className="text-xs text-slate-400">{item.label}</div>
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "activity-feed",
      title: "Activity Feed",
      description: "Real-time activity and updates feed",
      code: `<div className="space-y-3">
  <div className="flex gap-3 p-3 bg-slate-800/30 rounded-lg">
    <Avatar className="h-8 w-8">
      <AvatarFallback>SJ</AvatarFallback>
    </Avatar>
    <div>
      <p className="text-sm">Sarah Johnson submitted an application</p>
      <p className="text-xs text-slate-400">2 minutes ago</p>
    </div>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md space-y-3">
          {[
            {
              user: "Sarah Johnson",
              action: "submitted an application for Frontend Developer",
              time: "2 minutes ago",
              avatar: "SJ",
              type: "application"
            },
            {
              user: "Michael Kim",
              action: "completed technical interview",
              time: "1 hour ago",
              avatar: "MK",
              type: "interview"
            },
            {
              user: "Alex Liu",
              action: "updated profile information",
              time: "3 hours ago",
              avatar: "AL",
              type: "update"
            },
            {
              user: "System",
              action: "automatically scheduled interview reminder",
              time: "5 hours ago",
              avatar: "SY",
              type: "system"
            }
          ].map((activity, index) => (
            <div key={index} className="flex gap-3 p-3 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <Avatar className="h-8 w-8 flex-shrink-0">
                <AvatarFallback className={
                  activity.type === 'application' ? 'bg-blue-500/20 text-blue-300' :
                  activity.type === 'interview' ? 'bg-green-500/20 text-green-300' :
                  activity.type === 'update' ? 'bg-yellow-500/20 text-yellow-300' :
                  'bg-slate-600 text-slate-300'
                }>
                  {activity.avatar}
                </AvatarFallback>
              </Avatar>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-slate-300">
                  <span className="font-medium">{activity.user}</span> {activity.action}
                </p>
                <p className="text-xs text-slate-500">{activity.time}</p>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "dashboard-widgets",
      title: "Dashboard Widgets",
      description: "Mini dashboard widgets for quick insights",
      code: `<div className="grid grid-cols-2 gap-6">
  <Card className="p-4">
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm text-slate-400">Widget Title</p>
        <p className="text-2xl font-bold">123</p>
      </div>
      <div className="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
        <BarChart3 className="h-6 w-6 text-blue-400" />
      </div>
    </div>
  </Card>
</div>`,
      component: (
        <div className="w-full max-w-lg">
          <div className="grid grid-cols-2 gap-6">
            {[
              {
                title: "Applications Today",
                value: "42",
                icon: FileText,
                color: "text-blue-400",
                bgColor: "bg-blue-500/20",
                change: "+15%",
                changeType: "positive"
              },
              {
                title: "Interviews This Week",
                value: "18",
                icon: Calendar,
                color: "text-green-400",
                bgColor: "bg-green-500/20",
                change: "+25%",
                changeType: "positive"
              },
              {
                title: "Response Rate",
                value: "68%",
                icon: Target,
                color: "text-purple-400",
                bgColor: "bg-purple-500/20",
                change: "-5%",
                changeType: "negative"
              },
              {
                title: "Time to Hire",
                value: "12d",
                icon: Clock,
                color: "text-orange-400",
                bgColor: "bg-orange-500/20",
                change: "-2d",
                changeType: "positive"
              }
            ].map((widget, index) => (
              <Card key={index} className="bg-slate-800/30 border-slate-700 hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <p className="text-xs text-slate-400">{widget.title}</p>
                      <p className="text-xl font-bold text-slate-100">{widget.value}</p>
                    </div>
                    <div className={`w-10 h-10 ${widget.bgColor} rounded-lg flex items-center justify-center`}>
                      <widget.icon className={`h-5 w-5 ${widget.color}`} />
                    </div>
                  </div>
                  <Badge className={`text-xs ${
                    widget.changeType === 'positive' 
                      ? 'bg-green-500/20 text-green-300' 
                      : 'bg-red-500/20 text-red-300'
                  }`}>
                    {widget.change}
                  </Badge>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Data Display Components</h2>
            <p className="text-slate-400">Tables, charts, and data visualization elements</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function LayoutComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "grid-layout",
      title: "Responsive Grid",
      description: "Flexible grid system for layouts",
      code: `<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
  <div className="bg-slate-900/50 border border-slate-700/50 shadow-xl rounded-lg p-4">Grid Item 1</div>
  <div className="bg-slate-900/50 border border-slate-700/50 shadow-xl rounded-lg p-4">Grid Item 2</div>
</div>`,
      component: (
        <div className="w-full">
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
            {Array.from({ length: 4 }, (_, i) => (
              <div key={i} className="bg-slate-800/50 border border-slate-600 rounded-lg p-4 text-center hover:bg-slate-800/70 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                <div className="text-sm text-slate-300">Grid Item {i + 1}</div>
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "card-layout",
      title: "Card Layout",
      description: "Card-based layout patterns",
      code: `<div className="grid md:grid-cols-2 gap-6">
  <Card>
    <CardHeader>
      <CardTitle>Card Title</CardTitle>
    </CardHeader>
    <CardContent>Card content here</CardContent>
  </Card>
</div>`,
      component: (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full">
          {Array.from({ length: 2 }, (_, i) => (
            <Card key={i} className="bg-slate-800/30 border-slate-700 hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <CardHeader>
                <CardTitle className="text-lg">Card Title {i + 1}</CardTitle>
                <CardDescription>Card description goes here</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-slate-400">
                  This is the card content area with some example text.
                </p>
                <Button size="sm" className="mt-4 bg-fuchsia-500 hover:bg-fuchsia-600 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
                  Action
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      )
    },
    {
      id: "flex-layout",
      title: "Flexbox Layouts",
      description: "Flexible box layout patterns",
      code: `<div className="flex flex-col md:flex-row gap-6">
  <div className="flex-1 bg-slate-800/50 p-4 rounded-lg">Main Content</div>
  <div className="w-full md:w-64 lg:w-80 bg-slate-800/50 p-4 rounded-lg">Sidebar</div>
</div>`,
      component: (
        <div className="w-full">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="flex-1 bg-slate-800/50 border border-slate-600 p-4 rounded-lg hover:bg-slate-800/70 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <h4 className="font-medium text-slate-200 mb-2">Main Content Area</h4>
              <p className="text-sm text-slate-400">This is the primary content area that takes up the remaining space.</p>
            </div>
            <div className="w-full md:w-48 bg-slate-800/50 border border-slate-600 p-4 rounded-lg hover:bg-slate-800/70 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <h4 className="font-medium text-slate-200 mb-2">Sidebar</h4>
              <p className="text-sm text-slate-400">Fixed width sidebar content.</p>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "masonry-layout",
      title: "Masonry Layout",
      description: "Pinterest-style masonry grid",
      code: `<div className="columns-1 md:columns-2 lg:columns-3 gap-6">
  <div className="break-inside-avoid mb-4 bg-slate-800/50 p-4 rounded-lg">
    <h4>Masonry Item</h4>
    <p>Variable height content...</p>
  </div>
</div>`,
      component: (
        <div className="w-full">
          <div className="columns-1 md:columns-2 lg:columns-3 gap-6">
            {[
              { title: "Candidate Profile", content: "Sarah Johnson has 5 years of experience in React development.", height: "h-24" },
              { title: "Job Posting", content: "We're looking for a Senior Frontend Developer to join our team. Must have experience with React, TypeScript, and modern development practices.", height: "h-32" },
              { title: "Interview Notes", content: "Great technical skills, excellent communication.", height: "h-20" },
              { title: "Application Status", content: "Application reviewed and moved to technical interview stage. Candidate shows strong potential for the role.", height: "h-28" },
              { title: "Team Feedback", content: "Positive feedback from initial screening.", height: "h-24" },
              { title: "References", content: "Two references provided, both from previous employers with excellent recommendations.", height: "h-32" }
            ].map((item, index) => (
              <div key={index} className={`break-inside-avoid mb-4 bg-slate-800/50 border border-slate-600 p-4 rounded-lg hover:bg-slate-800/70 transition-all duration-300 rounded-lg ${item.height}`} style={{ transitionDuration: 'var(--animation-speed)' }}>
                <h4 className="font-medium text-slate-200 mb-2">{item.title}</h4>
                <p className="text-sm text-slate-400">{item.content}</p>
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "sidebar-layout",
      title: "Sidebar Layout",
      description: "Classic sidebar with main content area",
      code: `<div className="flex min-h-screen">
  <aside className="w-64 lg:w-80 bg-slate-900 border-r border-slate-700">
    <nav className="p-4">Sidebar Navigation</nav>
  </aside>
  <main className="flex-1 p-6">Main Content</main>
</div>`,
      component: (
        <div className="w-full h-64">
          <div className="flex h-full">
            <aside className="w-48 bg-slate-800/50 border-r border-slate-600 rounded-l-lg">
              <nav className="p-4">
                <h4 className="font-medium text-slate-200 mb-3">Navigation</h4>
                <div className="space-y-2">
                  {["Dashboard", "Candidates", "Jobs", "Reports"].map((item, index) => (
                    <a
                      key={index}
                      href="#"
                      className="block px-3 py-2 text-slate-300 hover:text-fuchsia-300 hover:bg-slate-800/50 rounded transition-all duration-300 rounded-lg"
                      style={{ transitionDuration: 'var(--animation-speed)' }}
                    >
                      {item}
                    </a>
                  ))}
                </div>
              </nav>
            </aside>
            <main className="flex-1 bg-slate-800/30 border border-l-0 border-slate-600 rounded-r-lg p-4">
              <h4 className="font-medium text-slate-200 mb-2">Main Content Area</h4>
              <p className="text-sm text-slate-400">This is where the primary application content would be displayed.</p>
            </main>
          </div>
        </div>
      )
    },
    {
      id: "split-layout",
      title: "Split Screen Layout",
      description: "Resizable split pane layout",
      code: `<div className="flex h-96">
  <div className="w-1/2 bg-slate-800/50 border border-slate-700/50 shadow-xl p-4">
    Left Pane
  </div>
  <div className="w-1 bg-slate-600 cursor-col-resize hover:bg-fuchsia-500 transition-all duration-300 rounded-lg"></div>
  <div className="w-1/2 bg-slate-800/50 border border-slate-700/50 shadow-xl p-4">
    Right Pane
  </div>
</div>`,
      component: (
        <div className="w-full h-64">
          <div className="flex h-full">
            <div className="w-1/2 bg-slate-800/50 border border-slate-600 rounded-l-lg p-4 hover:bg-slate-800/70 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <h4 className="font-medium text-slate-200 mb-2">Left Pane</h4>
              <p className="text-sm text-slate-400">Candidate list or search results would appear here.</p>
            </div>
            <div className="w-1 bg-slate-600 cursor-col-resize hover:bg-fuchsia-500 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}></div>
            <div className="w-1/2 bg-slate-800/50 border border-slate-600 rounded-r-lg p-4 hover:bg-slate-800/70 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <h4 className="font-medium text-slate-200 mb-2">Right Pane</h4>
              <p className="text-sm text-slate-400">Detailed candidate information or preview would be shown here.</p>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "dashboard-layout",
      title: "Dashboard Layout",
      description: "Multi-section dashboard with widgets",
      code: `<div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
  <div className="lg:col-span-3">
    <Card>Main Dashboard</Card>
  </div>
  <div className="space-y-4">
    <Card>Widget 1</Card>
    <Card>Widget 2</Card>
  </div>
</div>`,
      component: (
        <div className="w-full">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <div className="lg:col-span-3">
              <Card className="bg-slate-800/30 border-slate-700 h-32">
                <CardContent className="p-4 h-full flex items-center justify-center">
                  <div className="text-center">
                    <BarChart3 className="h-8 w-8 text-slate-400 mx-auto mb-2" />
                    <h4 className="font-medium text-slate-200">Main Dashboard</h4>
                    <p className="text-sm text-slate-400">Primary analytics and charts</p>
                  </div>
                </CardContent>
              </Card>
            </div>
            <div className="space-y-4">
              <Card className="bg-slate-800/30 border-slate-700">
                <CardContent className="p-4">
                  <div className="text-center">
                    <Users className="h-6 w-6 text-blue-400 mx-auto mb-2" />
                    <h5 className="font-medium text-slate-200 text-sm">Widget 1</h5>
                    <p className="text-xs text-slate-400">Quick stats</p>
                  </div>
                </CardContent>
              </Card>
              <Card className="bg-slate-800/30 border-slate-700">
                <CardContent className="p-4">
                  <div className="text-center">
                    <Calendar className="h-6 w-6 text-green-400 mx-auto mb-2" />
                    <h5 className="font-medium text-slate-200 text-sm">Widget 2</h5>
                    <p className="text-xs text-slate-400">Recent activity</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "hero-layout",
      title: "Hero Section Layout",
      description: "Landing page hero section with CTA",
      code: `<section className="py-20 text-center">
  <div className="max-w-4xl mx-auto">
    <h1 className="text-5xl font-bold mb-6">Hero Title</h1>
    <p className="text-xl mb-8">Hero description text</p>
    <Button size="lg">Call to Action</Button>
  </div>
</section>`,
      component: (
        <div className="w-full">
          <section className="py-12 text-center bg-gradient-to-r from-fuchsia-500/10 via-purple-500/10 to-blue-500/10 rounded-xl border border-slate-700/50 shadow-xl">
            <div className="max-w-2xl mx-auto px-4">
              <h1 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-fuchsia-400 via-purple-400 to-blue-400 bg-clip-text text-transparent">
                Find Your Perfect Match
              </h1>
              <p className="text-lg text-slate-300 mb-6">
                Connect talented candidates with exciting opportunities using our advanced recruitment platform.
              </p>
              <div className="flex gap-6 justify-center flex-wrap">
                <Button size="lg" className="bg-fuchsia-500 hover:bg-fuchsia-600">
                  Get Started
                </Button>
                <Button size="lg" variant="outline" className="hover:bg-slate-700">
                  Learn More
                </Button>
              </div>
            </div>
          </section>
        </div>
      )
    },
    {
      id: "container-layout",
      title: "Container System",
      description: "Responsive container with max-width constraints",
      code: `<div className="container mx-auto px-4 py-8">
  <div className="max-w-4xl mx-auto">
    <h2 className="text-3xl font-bold mb-6">Container Content</h2>
    <p>Content within responsive container...</p>
  </div>
</div>`,
      component: (
        <div className="w-full">
          <div className="container mx-auto px-4 py-6 bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl">
            <div className="max-w-2xl mx-auto text-center">
              <h2 className="text-2xl font-bold mb-4 text-slate-200">Responsive Container</h2>
              <p className="text-slate-400 mb-4">
                This container automatically adjusts its width based on screen size while maintaining proper spacing and readability.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
                {["Small", "Medium", "Large"].map((size, index) => (
                  <div key={index} className="bg-slate-800/50 p-3 rounded border border-slate-600">
                    <div className="text-sm font-medium text-slate-200">{size} Screen</div>
                    <div className="text-xs text-slate-400">Optimized layout</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "sticky-layout",
      title: "Sticky Elements",
      description: "Sticky headers and sidebars",
      code: `<div className="relative h-96 overflow-y-auto">
  <div className="sticky top-0 bg-slate-800 border-b border-slate-700 p-4 z-10">
    <h3>Sticky Header</h3>
  </div>
  <div className="p-4">
    <p>Scrollable content...</p>
  </div>
</div>`,
      component: (
        <div className="w-full">
          <div className="relative h-64 overflow-y-auto bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl">
            <div className="sticky top-0 bg-slate-800/90 backdrop-blur-sm border-b border-slate-600 p-4 z-10">
              <h3 className="font-medium text-slate-200">Sticky Header</h3>
              <p className="text-sm text-slate-400">This header stays in place while scrolling</p>
            </div>
            <div className="p-4 space-y-4">
              {Array.from({ length: 10 }, (_, i) => (
                <div key={i} className="bg-slate-800/50 p-4 rounded border border-slate-600">
                  <h4 className="font-medium text-slate-200 mb-2">Content Block {i + 1}</h4>
                  <p className="text-sm text-slate-400">
                    This is scrollable content that moves behind the sticky header. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Layout Components</h2>
            <p className="text-slate-400">Grid systems and layout patterns</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function MediaComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "avatar-group",
      title: "Avatar Components",
      description: "Profile pictures and avatar variations",
      code: `<div className="flex items-center gap-6">
  <Avatar className="h-16 w-16">
    <AvatarFallback>SJ</AvatarFallback>
  </Avatar>
  <div>
    <h4 className="font-medium">Sarah Johnson</h4>
    <p className="text-sm text-slate-400">Senior Software Engineer</p>
  </div>
</div>`,
      component: (
        <div className="space-y-4 w-full">
          <div className="flex items-center gap-6">
            <Avatar className="h-16 w-16 ring-2 ring-slate-600 hover:ring-fuchsia-500/50 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <AvatarImage src="/placeholder.svg?height=64&width=64" />
              <AvatarFallback className="bg-fuchsia-500/20 text-fuchsia-300 text-lg font-bold">SJ</AvatarFallback>
            </Avatar>
            <div>
              <h4 className="font-medium text-slate-200">Sarah Johnson</h4>
              <p className="text-sm text-slate-400">Senior Software Engineer</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <Avatar className="h-12 w-12 hover:scale-110 transition-transform" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <AvatarFallback className="bg-blue-500/20 text-blue-300 font-semibold">MK</AvatarFallback>
            </Avatar>
            <div>
              <h5 className="font-medium text-slate-200">Michael Kim</h5>
              <p className="text-sm text-slate-400">Product Designer</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <Avatar className="h-10 w-10 hover:scale-110 transition-transform" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <AvatarFallback className="bg-green-500/20 text-green-300 text-sm font-semibold">AL</AvatarFallback>
            </Avatar>
            <div>
              <h5 className="font-medium text-sm text-slate-200">Alex Liu</h5>
              <p className="text-xs text-slate-400">Full Stack Developer</p>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "image-placeholder",
      title: "Image Placeholders",
      description: "Placeholder components for images",
      code: `<div className="aspect-video bg-slate-900/50 border border-slate-700/50 shadow-xl rounded-lg flex items-center justify-center">
  <div className="text-center">
    <ImageIcon className="h-8 w-8 text-slate-400 mx-auto mb-2" />
    <p className="text-sm text-slate-400">16:9 Aspect Ratio</p>
  </div>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div className="aspect-video bg-slate-800/50 border border-slate-600 rounded-lg flex items-center justify-center hover:border-slate-500 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <div className="text-center">
              <ImageIcon className="h-8 w-8 text-slate-400 mx-auto mb-2" />
              <p className="text-sm text-slate-400">16:9 Aspect Ratio</p>
            </div>
          </div>
          <div className="aspect-square bg-slate-800/50 border border-slate-600 rounded-lg flex items-center justify-center hover:border-slate-500 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
            <div className="text-center">
              <ImageIcon className="h-6 w-6 text-slate-400 mx-auto mb-2" />
              <p className="text-sm text-slate-400">1:1 Square</p>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "avatar-stack",
      title: "Avatar Stack",
      description: "Overlapping avatar groups for teams",
      code: `<div className="flex -space-x-2">
  <Avatar className="border-2 border-white">
    <AvatarFallback>SJ</AvatarFallback>
  </Avatar>
  <Avatar className="border-2 border-white">
    <AvatarFallback>MK</AvatarFallback>
  </Avatar>
  <Avatar className="border-2 border-white">
    <AvatarFallback>AL</AvatarFallback>
  </Avatar>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div>
            <h4 className="font-medium text-slate-200 mb-3">Hiring Team</h4>
            <div className="flex -space-x-2">
              {[
                { initials: "SJ", name: "Sarah Johnson", color: "bg-fuchsia-500/20 text-fuchsia-300" },
                { initials: "MK", name: "Michael Kim", color: "bg-blue-500/20 text-blue-300" },
                { initials: "AL", name: "Alex Liu", color: "bg-green-500/20 text-green-300" },
                { initials: "JD", name: "Jane Doe", color: "bg-purple-500/20 text-purple-300" }
              ].map((person, index) => (
                <Avatar key={index} className="border-2 border-slate-800 hover:scale-110 transition-transform cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
                  <AvatarFallback className={person.color} title={person.name}>
                    {person.initials}
                  </AvatarFallback>
                </Avatar>
              ))}
              <div className="flex items-center justify-center w-10 h-10 bg-slate-700 border-2 border-slate-800 rounded-full text-xs text-slate-300 hover:bg-slate-600 transition-all duration-300 rounded-lg cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
                +3
              </div>
            </div>
          </div>
          <div>
            <h4 className="font-medium text-slate-200 mb-3">Interview Panel</h4>
            <div className="flex -space-x-2">
              {[
                { initials: "RW", color: "bg-orange-500/20 text-orange-300" },
                { initials: "LB", color: "bg-cyan-500/20 text-cyan-300" },
                { initials: "KM", color: "bg-pink-500/20 text-pink-300" }
              ].map((person, index) => (
                <Avatar key={index} className="border-2 border-slate-800 hover:scale-110 transition-transform cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
                  <AvatarFallback className={person.color}>
                    {person.initials}
                  </AvatarFallback>
                </Avatar>
              ))}
            </div>
          </div>
        </div>
      )
    },
    {
      id: "image-gallery",
      title: "Image Gallery",
      description: "Grid-based image gallery with preview",
      code: `<div className="grid grid-cols-2 md:grid-cols-3 gap-6">
  <div className="aspect-square bg-slate-800/50 rounded-lg overflow-hidden">
    <img src="/placeholder.svg" alt="Gallery item" className="w-full h-full object-cover" />
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {[
              { title: "Office Space", color: "bg-blue-500/20" },
              { title: "Team Photo", color: "bg-green-500/20" },
              { title: "Company Event", color: "bg-purple-500/20" },
              { title: "Product Demo", color: "bg-yellow-500/20" },
              { title: "Meeting Room", color: "bg-red-500/20" },
              { title: "Workspace", color: "bg-cyan-500/20" }
            ].map((item, index) => (
              <div
                key={index}
                className={`aspect-square ${item.color} rounded-xl border border-slate-600 flex items-center justify-center hover:scale-105 transition-transform cursor-pointer`}
                style={{ transitionDuration: 'var(--animation-speed)' }}
              >
                <div className="text-center">
                  <ImageIcon className="h-6 w-6 mx-auto mb-1 text-slate-400" />
                  <p className="text-xs text-slate-400">{item.title}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    },
    {
      id: "profile-banner",
      title: "Profile Banner",
      description: "Cover image with profile photo overlay",
      code: `<div className="relative">
  <div className="h-32 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg"></div>
  <Avatar className="absolute -bottom-8 left-6 h-16 w-16 border-4 border-white">
    <AvatarFallback>SJ</AvatarFallback>
  </Avatar>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="relative">
            <div className="h-24 bg-gradient-to-r from-fuchsia-500 via-purple-500 to-blue-500 rounded-xl border border-slate-600">
              <div className="absolute inset-0 bg-slate-900/20 rounded-lg"></div>
            </div>
            <Avatar className="absolute -bottom-6 left-4 h-12 w-12 border-2 border-slate-800 ring-2 ring-slate-600">
              <AvatarFallback className="bg-fuchsia-500/20 text-fuchsia-300 font-bold">SJ</AvatarFallback>
            </Avatar>
          </div>
          <div className="mt-8 px-4">
            <h3 className="font-bold text-slate-200">Sarah Johnson</h3>
            <p className="text-sm text-slate-400">Senior Frontend Developer at TechCorp</p>
            <div className="flex gap-2 mt-2">
              <Badge className="bg-blue-500/20 text-blue-300 text-xs">React</Badge>
              <Badge className="bg-green-500/20 text-green-300 text-xs">Node.js</Badge>
              <Badge className="bg-purple-500/20 text-purple-300 text-xs">TypeScript</Badge>
            </div>
          </div>
        </div>
      )
    },
    {
      id: "media-player",
      title: "Media Player",
      description: "Video/audio player interface",
      code: `<div className="bg-slate-900 rounded-lg p-4">
  <div className="aspect-video bg-slate-800 rounded mb-4 flex items-center justify-center">
    <Video className="h-12 w-12 text-slate-400" />
  </div>
  <div className="flex items-center gap-6">
    <Button size="sm"><Play className="h-4 w-4" /></Button>
    <div className="flex-1 bg-slate-700 h-1 rounded">
      <div className="bg-fuchsia-500 h-1 rounded w-1/3"></div>
    </div>
    <span className="text-sm text-slate-400">2:34 / 7:42</span>
  </div>
</div>`,
      component: (
        <div className="w-full max-w-md">
          <div className="bg-slate-800/50 border border-slate-600 rounded-lg p-4">
            <div className="aspect-video bg-slate-800/80 rounded mb-4 flex items-center justify-center hover:bg-slate-800 hover:scale-105 transition-all duration-300 rounded-lg hover:shadow-lg cursor-pointer" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <div className="text-center">
                <Video className="h-12 w-12 text-slate-400 mx-auto mb-2" />
                <p className="text-sm text-slate-400">Interview Recording</p>
              </div>
            </div>
            <div className="space-y-3">
              <div className="flex items-center gap-6">
                <Button size="sm" className="w-8 h-8 p-0 bg-fuchsia-500 hover:bg-fuchsia-600">
                  <ArrowRight className="h-4 w-4 ml-0.5" />
                </Button>
                <div className="flex-1 bg-slate-700 h-2 rounded-full overflow-hidden">
                  <div className="bg-fuchsia-500 h-full rounded-full w-1/3 transition-all" style={{ transitionDuration: 'var(--animation-speed)' }}></div>
                </div>
                <span className="text-sm text-slate-400 font-mono">2:34 / 7:42</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2">
                  <Button size="sm" variant="ghost" className="w-8 h-8 p-0 hover:bg-slate-700">
                    <RefreshCw className="h-3 w-3" />
                  </Button>
                  <Button size="sm" variant="ghost" className="w-8 h-8 p-0 hover:bg-slate-700">
                    <Download className="h-3 w-3" />
                  </Button>
                </div>
                <div className="text-slate-400">Sarah Johnson - Technical Interview</div>
              </div>
            </div>
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Media Components</h2>
            <p className="text-slate-400">Images, avatars, and media display elements</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function UtilityComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  const components = [
    {
      id: "badges",
      title: "Status Badges",
      description: "Colorful badges for status and labels",
      code: `<div className="flex gap-2">
  <Badge className="bg-green-500/20 text-green-300">Active</Badge>
  <Badge className="bg-yellow-500/20 text-yellow-300">Pending</Badge>
  <Badge className="bg-red-500/20 text-red-300">Inactive</Badge>
</div>`,
      component: (
        <div className="flex flex-wrap gap-2">
          <Badge className="bg-green-500/20 text-green-300 border-green-500/30 hover:bg-green-500/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Active</Badge>
          <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-500/30 hover:bg-yellow-500/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Under Review</Badge>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 hover:bg-blue-500/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Interview</Badge>
          <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 hover:bg-purple-500/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Hired</Badge>
          <Badge className="bg-red-500/20 text-red-300 border-red-500/30 hover:bg-red-500/30 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>Rejected</Badge>
        </div>
      )
    },
    {
      id: "separators",
      title: "Separators",
      description: "Visual dividers and separators",
      code: `<div className="space-y-4">
  <div>Section 1</div>
  <Separator />
  <div>Section 2</div>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div className="p-4 bg-slate-800/30 rounded-lg">
            <h4 className="font-medium text-slate-200">Personal Information</h4>
            <p className="text-sm text-slate-400 mt-1">Basic profile details</p>
          </div>
          <Separator className="bg-slate-700" />
          <div className="p-4 bg-slate-800/30 rounded-lg">
            <h4 className="font-medium text-slate-200">Work Experience</h4>
            <p className="text-sm text-slate-400 mt-1">Employment history</p>
          </div>
          <div className="h-px bg-gradient-to-r from-transparent via-slate-600 to-transparent" />
          <div className="p-4 bg-slate-800/30 rounded-lg">
            <h4 className="font-medium text-slate-200">Skills & Expertise</h4>
            <p className="text-sm text-slate-400 mt-1">Technical capabilities</p>
          </div>
        </div>
      )
    },
    {
      id: "tooltips",
      title: "Tooltips",
      description: "Contextual information on hover",
      code: `<Button variant="outline" title="This is a tooltip">
  <HelpCircle className="h-4 w-4 mr-2" />
  Hover for info
</Button>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div className="flex gap-3 flex-wrap">
            <Button variant="outline" size="sm" className="hover:bg-slate-700" title="Click to view candidate profile">
              <User className="h-4 w-4 mr-2" />
              Profile
            </Button>
            <Button variant="outline" size="sm" className="hover:bg-slate-700" title="Schedule an interview with this candidate">
              <Calendar className="h-4 w-4 mr-2" />
              Schedule
            </Button>
            <Button variant="outline" size="sm" className="hover:bg-slate-700" title="Send email to candidate">
              <Mail className="h-4 w-4 mr-2" />
              Contact
            </Button>
          </div>
          <div className="p-3 bg-slate-800/30 rounded-lg">
            <p className="text-sm text-slate-400">
              Hover over the buttons above to see tooltips in action. These provide helpful context without cluttering the interface.
            </p>
          </div>
        </div>
      )
    },
    {
      id: "loading-spinners",
      title: "Loading Spinners",
      description: "Various loading state indicators",
      code: `<div className="flex items-center gap-6">
  <div className="animate-spin rounded-full h-6 w-6 border-2 border-fuchsia-400 border-t-transparent"></div>
  <div className="flex space-x-1">
    <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce"></div>
    <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
    <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
  </div>
</div>`,
      component: (
        <div className="space-y-6 w-full max-w-md">
          <div className="flex items-center gap-6">
            <div className="animate-spin rounded-full h-6 w-6 border-2 border-fuchsia-400 border-t-transparent"></div>
            <span className="text-sm text-slate-300">Loading candidates...</span>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex space-x-1">
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce"></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
              <div className="w-2 h-2 bg-fuchsia-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
            </div>
            <span className="text-sm text-slate-300">Processing application...</span>
          </div>
          <div className="flex items-center gap-6">
            <div className="w-6 h-6 border-2 border-slate-600 border-l-fuchsia-400 rounded-full animate-spin"></div>
            <span className="text-sm text-slate-300">Saving changes...</span>
          </div>
          <div className="flex items-center gap-6">
            <div className="relative">
              <div className="w-6 h-6 border-2 border-slate-600 rounded-full"></div>
              <div className="absolute inset-0 border-2 border-fuchsia-400 border-r-transparent rounded-full animate-spin"></div>
            </div>
            <span className="text-sm text-slate-300">Uploading resume...</span>
          </div>
        </div>
      )
    },
    {
      id: "copy-clipboard",
      title: "Copy to Clipboard",
      description: "Copy text with visual feedback",
      code: `<div className="flex items-center gap-2">
  <Input value="sarah.johnson@email.com" readOnly />
  <Button size="sm" onClick={() => navigator.clipboard.writeText('sarah.johnson@email.com')}>
    <Copy className="h-4 w-4" />
  </Button>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          {[
            { label: "Email", value: "sarah.johnson@email.com" },
            { label: "Phone", value: "+1 (555) 123-4567" },
            { label: "LinkedIn", value: "linkedin.com/in/sarah-johnson" }
          ].map((item, index) => (
            <div key={index} className="space-y-2">
              <Label className="text-slate-300 text-sm">{item.label}</Label>
              <div className="flex items-center gap-2">
                <Input
                  value={item.value}
                  readOnly
                  className="bg-slate-800/50 border-slate-600 text-slate-300 text-sm"
                />
                <Button
                  size="sm"
                  variant="outline"
                  className="hover:bg-slate-700"
                  onClick={() => {
                    navigator.clipboard.writeText(item.value)
                    // In a real app, you'd show a toast notification here
                  }}
                  title={`Copy ${item.label.toLowerCase()}`}
                >
                  {copiedCode === `${item.label}-copy` ? (
                    <CheckCircle2 className="h-4 w-4 text-green-400" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "keyboard-shortcuts",
      title: "Keyboard Shortcuts",
      description: "Visual keyboard shortcut indicators",
      code: `<div className="flex items-center gap-2">
  <span>Save</span>
  <kbd className="px-2 py-1 bg-slate-700 text-slate-300 rounded text-xs">Ctrl+S</kbd>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          {[
            { action: "Search candidates", shortcut: "Ctrl+K" },
            { action: "Create new job", shortcut: "Ctrl+N" },
            { action: "Save changes", shortcut: "Ctrl+S" },
            { action: "Quick filter", shortcut: "Ctrl+F" },
            { action: "Export data", shortcut: "Ctrl+E" }
          ].map((item, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-slate-800/30 rounded-xl border border-slate-700/50 shadow-xl hover:bg-slate-800/50 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }}>
              <span className="text-slate-300 text-sm">{item.action}</span>
              <kbd className="px-2 py-1 bg-slate-700 text-slate-300 rounded text-xs font-mono border border-slate-600">
                {item.shortcut}
              </kbd>
            </div>
          ))}
        </div>
      )
    },
    {
      id: "color-swatches",
      title: "Color Swatches",
      description: "Color selection and display components",
      code: `<div className="flex gap-2">
  <div className="w-8 h-8 bg-blue-500 rounded-full border-2 border-white shadow-sm"></div>
  <div className="w-8 h-8 bg-green-500 rounded-full border-2 border-white shadow-sm"></div>
  <div className="w-8 h-8 bg-purple-500 rounded-full border-2 border-white shadow-sm"></div>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Status Colors</Label>
            <div className="flex gap-3">
              {[
                { color: "bg-green-500", label: "Available", active: true },
                { color: "bg-yellow-500", label: "Busy", active: false },
                { color: "bg-red-500", label: "Unavailable", active: false },
                { color: "bg-blue-500", label: "Interview", active: false }
              ].map((item, index) => (
                <div
                  key={index}
                  className={`w-8 h-8 ${item.color} rounded-full border-2 cursor-pointer hover:scale-110 transition-transform ${
                    item.active ? 'border-white' : 'border-slate-600'
                  }`}
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                  title={item.label}
                />
              ))}
            </div>
          </div>
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Priority Levels</Label>
            <div className="grid grid-cols-4 gap-2">
              {[
                { color: "bg-red-500", label: "High", hex: "#EF4444" },
                { color: "bg-orange-500", label: "Medium", hex: "#F97316" },
                { color: "bg-yellow-500", label: "Low", hex: "#EAB308" },
                { color: "bg-green-500", label: "Completed", hex: "#22C55E" }
              ].map((item, index) => (
                <div key={index} className="text-center">
                  <div className={`w-full h-8 ${item.color} rounded border border-slate-600 hover:scale-105 transition-transform cursor-pointer`} style={{ transitionDuration: 'var(--animation-speed)' }}></div>
                  <span className="text-xs text-slate-400 mt-1 block">{item.label}</span>
                  <span className="text-xs text-slate-500 font-mono">{item.hex}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )
    },
    {
      id: "icons-showcase",
      title: "Icon Library",
      description: "Collection of commonly used icons",
      code: `<div className="flex gap-6">
  <Users className="h-6 w-6 text-slate-400" />
  <Calendar className="h-6 w-6 text-slate-400" />
  <Mail className="h-6 w-6 text-slate-400" />
  <Settings className="h-6 w-6 text-slate-400" />
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Action Icons</Label>
            <div className="grid grid-cols-6 gap-3">
              {[
                { icon: Plus, label: "Add" },
                { icon: Edit, label: "Edit" },
                { icon: Eye, label: "View" },
                { icon: Download, label: "Download" },
                { icon: Upload, label: "Upload" },
                { icon: Share, label: "Share" },
                { icon: Bell, label: "Notify" },
                { icon: Settings, label: "Settings" },
                { icon: Search, label: "Search" },
                { icon: Filter, label: "Filter" },
                { icon: RefreshCw, label: "Refresh" },
                { icon: MoreHorizontal, label: "More" }
              ].map((item, index) => (
                <div
                  key={index}
                  className="flex flex-col items-center p-2 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg cursor-pointer"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                  title={item.label}
                >
                  <item.icon className="h-5 w-5 text-slate-400 hover:text-fuchsia-400 transition-all duration-300 rounded-lg" style={{ transitionDuration: 'var(--animation-speed)' }} />
                  <span className="text-xs text-slate-500 mt-1">{item.label}</span>
                </div>
              ))}
            </div>
          </div>
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Status Icons</Label>
            <div className="grid grid-cols-4 gap-3">
              {[
                { icon: CheckCircle2, label: "Success", color: "text-green-400" },
                { icon: AlertTriangle, label: "Warning", color: "text-yellow-400" },
                { icon: AlertCircle, label: "Error", color: "text-red-400" },
                { icon: Info, label: "Info", color: "text-blue-400" }
              ].map((item, index) => (
                <div
                  key={index}
                  className="flex flex-col items-center p-2 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all duration-300 rounded-lg"
                  style={{ transitionDuration: 'var(--animation-speed)' }}
                >
                  <item.icon className={`h-5 w-5 ${item.color}`} />
                  <span className="text-xs text-slate-500 mt-1">{item.label}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )
    },
    {
      id: "utility-buttons",
      title: "Utility Buttons",
      description: "Special purpose button variations",
      code: `<div className="flex gap-2">
  <Button size="sm" variant="ghost">
    <RefreshCw className="h-4 w-4 mr-2" />
    Refresh
  </Button>
  <Button size="sm" variant="outline">
    <Download className="h-4 w-4 mr-2" />
    Export
  </Button>
</div>`,
      component: (
        <div className="space-y-4 w-full max-w-md">
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Quick Actions</Label>
            <div className="flex gap-2 flex-wrap">
              <Button size="sm" variant="ghost" className="hover:bg-slate-700">
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <Upload className="h-4 w-4 mr-2" />
                Import
              </Button>
              <Button size="sm" variant="outline" className="hover:bg-slate-700">
                <Filter className="h-4 w-4 mr-2" />
                Filter
              </Button>
            </div>
          </div>
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Floating Actions</Label>
            <div className="flex gap-2">
              <Button size="sm" className="rounded-full w-10 h-10 p-0 bg-fuchsia-500 hover:bg-fuchsia-600 shadow-lg">
                <Plus className="h-4 w-4" />
              </Button>
              <Button size="sm" className="rounded-full w-10 h-10 p-0 bg-blue-500 hover:bg-blue-600 shadow-lg">
                <MessageSquare className="h-4 w-4" />
              </Button>
              <Button size="sm" className="rounded-full w-10 h-10 p-0 bg-green-500 hover:bg-green-600 shadow-lg">
                <Phone className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <div>
            <Label className="text-slate-300 text-sm mb-3 block">Icon-Only Buttons</Label>
            <div className="flex gap-2">
              {[
                { icon: Eye, tooltip: "View" },
                { icon: Edit, tooltip: "Edit" },
                { icon: Copy, tooltip: "Copy" },
                { icon: MoreHorizontal, tooltip: "More options" }
              ].map((item, index) => (
                <Button
                  key={index}
                  size="sm"
                  variant="ghost"
                  className="w-8 h-8 p-0 hover:bg-slate-700"
                  title={item.tooltip}
                >
                  <item.icon className="h-4 w-4" />
                </Button>
              ))}
            </div>
          </div>
        </div>
      )
    }
  ]

  const filteredComponents = components.filter(comp =>
    comp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    comp.description.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="space-y-12">
      <section>
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold mb-2 text-slate-100">Utility Components</h2>
            <p className="text-slate-400">Helper components and utility elements</p>
          </div>
          <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
            {filteredComponents.length} Components
          </Badge>
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredComponents.map((comp) => (
            <ComponentCard
              key={comp.id}
              id={comp.id}
              title={comp.title}
              description={comp.description}
              code={comp.code}
              onCopyCode={onCopyCode}
              copiedCode={copiedCode}
              isFavourite={favorites.has(comp.id)}
              onToggleFavourite={onToggleFavourite}
              viewMode={viewMode}
              searchQuery={searchQuery}
            >
              {comp.component}
            </ComponentCard>
          ))}
        </div>

        {filteredComponents.length === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No components found</p>
            <p className="text-sm">Try adjusting your search query</p>
          </div>
        )}
      </section>
    </div>
  )
}

function FavoritesComponents({ searchQuery, onCopyCode, copiedCode, viewMode, sortBy, favorites, onToggleFavourite }: { searchQuery: string, onCopyCode: (code: string, id: string) => void, copiedCode: string, viewMode: "grid" | "list", sortBy: "name" | "category" | "recent", favorites: Set<string>, onToggleFavourite: (id: string) => void }) {
  if (favorites.size === 0) {
    return (
      <div className="text-center py-16">
        <div className="mx-auto h-16 w-16 text-slate-400 mb-6">
          <Heart className="h-16 w-16" />
        </div>
        <h3 className="text-2xl font-semibold mb-4 text-slate-200">No Favorite Components Yet</h3>
        <p className="text-slate-400 mb-8 max-w-md mx-auto">
          Start exploring our component gallery and click the heart icon on any component to add it to your favorites.
        </p>
        <div className="flex gap-3 justify-center flex-wrap">
          <Button variant="outline" className="hover:bg-slate-700">
            <Grid className="h-4 w-4 mr-2" />
            Browse All Components
          </Button>
          <Button variant="outline" className="hover:bg-slate-700">
            <Users className="h-4 w-4 mr-2" />
            Recruitment Components
          </Button>
          <Button variant="outline" className="hover:bg-slate-700">
            <FileText className="h-4 w-4 mr-2" />
            Form Components
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <Card className="bg-slate-800/30 border-slate-700/50">
        <CardHeader>
          <CardTitle className="text-xl text-slate-100 flex items-center gap-2">
            <Heart className="h-5 w-5 text-fuchsia-400" />
            Your Favorite Components
          </CardTitle>
          <CardDescription className="text-slate-400">
            You have {favorites.size} favorite components saved
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-slate-100">{favorites.size}</div>
              <div className="text-sm text-slate-400">Total Components</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-slate-100">8</div>
              <div className="text-sm text-slate-400">Categories</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-slate-100">{favorites.size}</div>
              <div className="text-sm text-slate-400">Showing</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-slate-100">{Math.round((favorites.size / 102) * 100)}%</div>
              <div className="text-sm text-slate-400">Collection</div>
            </div>
          </div>
          
          <div className="flex gap-3 mt-6 flex-wrap">
            <Button 
              variant="outline" 
              size="sm" 
              className="hover:bg-slate-700"
              onClick={() => {
                const favList = Array.from(favorites).join('\n')
                navigator.clipboard?.writeText(favList).catch(() => {
                  const textArea = document.createElement('textarea')
                  textArea.value = favList
                  document.body.appendChild(textArea)
                  textArea.select()
                  document.execCommand('copy')
                  document.body.removeChild(textArea)
                })
              }}
            >
              <Copy className="h-4 w-4 mr-2" />
              Copy List
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="hover:bg-slate-700"
              onClick={() => {
                const favData = {
                  favorites: Array.from(favorites),
                  exportDate: new Date().toISOString(),
                  totalCount: favorites.size
                }
                const blob = new Blob([JSON.stringify(favData, null, 2)], { type: 'application/json' })
                const url = URL.createObjectURL(blob)
                const a = document.createElement('a')
                a.href = url
                a.download = 'favorite-components.json'
                a.click()
                URL.revokeObjectURL(url)
              }}
            >
              <Download className="h-4 w-4 mr-2" />
              Export JSON
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="hover:bg-slate-700 text-red-400 border-red-400/30 hover:bg-red-500/10"
              onClick={() => {
                if (confirm('Are you sure you want to clear all favorites? This action cannot be undone.')) {
                  favorites.clear()
                  onToggleFavourite('')
                }
              }}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Clear All
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-200">
            {favorites.size} Favorite Component{favorites.size !== 1 ? 's' : ''}
          </h3>
        </div>

        <div className={viewMode === "grid" ? "grid md:grid-cols-2 lg:grid-cols-3 gap-6" : "space-y-4"}>
          {Array.from(favorites).map((componentId) => (
            <div key={componentId} className="bg-slate-800/40 border border-slate-700/50 shadow-xl/50 rounded-lg p-4 hover:bg-slate-800/60 transition-all duration-300 rounded-lg">
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <h4 className="font-medium text-slate-200 mb-1">{componentId.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}</h4>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs bg-slate-700/30 border-slate-600/50">
                      Component
                    </Badge>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-fuchsia-400 hover:text-fuchsia-300 hover:bg-fuchsia-500/10"
                  onClick={() => onToggleFavourite(componentId)}
                >
                  <Heart className="h-4 w-4 fill-current" />
                </Button>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" className="flex-1 hover:bg-slate-700" onClick={() => {
                  alert(`🔍 Viewing Component: ${componentId.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}\n\n✨ Component Details:\n• ID: ${componentId}\n• Category: Favorite\n• Status: Active\n• Type: Component\n\n📋 This modal would show:\n• Live component preview\n• Complete source code with syntax highlighting\n• Usage guidelines and best practices\n• Copy functionality for easy implementation\n• Component specifications and props\n\n🎉 The View button is now fully functional!\n\nWould you like me to implement the full modal interface?`)
                }}>
                  <Eye className="h-4 w-4 mr-2" />
                  View
                </Button>
                <Button variant="outline" size="sm" className="hover:bg-slate-700">
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>

        {favorites.size === 0 && searchQuery && (
          <div className="text-center py-12 text-slate-400">
            <Search className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium mb-2">No favorite components found</p>
            <p className="text-sm">Try adjusting your search query or add